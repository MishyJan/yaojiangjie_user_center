/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.4.3.0 (NJsonSchema v9.4.8.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

import { Moment } from 'moment';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

@Injectable()
export class AccountServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 租户是否可用
     * @return Success
     */
    isTenantAvailable(input: IsTenantAvailableInput): Observable<IsTenantAvailableOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantAvailable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processIsTenantAvailable(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processIsTenantAvailable(response_);
                } catch (e) {
                    return <Observable<IsTenantAvailableOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<IsTenantAvailableOutput>><any>Observable.throw(response_);
        });
    }

    protected processIsTenantAvailable(response: Response): Observable<IsTenantAvailableOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: IsTenantAvailableOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? IsTenantAvailableOutput.fromJS(resultData200) : new IsTenantAvailableOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<IsTenantAvailableOutput>(<any>null);
    }

    /**
     * 租户是否存在
     * @return Success
     */
    isTenantNameExist(input: IsTenantAvailableInput): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantNameExist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processIsTenantNameExist(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processIsTenantNameExist(response_);
                } catch (e) {
                    return <Observable<boolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<boolean>><any>Observable.throw(response_);
        });
    }

    protected processIsTenantNameExist(response: Response): Observable<boolean> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: boolean = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<boolean>(<any>null);
    }

    /**
     * 注册
     * @return Success
     */
    register(input: RegisterInput): Observable<RegisterOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processRegister(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRegister(response_);
                } catch (e) {
                    return <Observable<RegisterOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RegisterOutput>><any>Observable.throw(response_);
        });
    }

    protected processRegister(response: Response): Observable<RegisterOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: RegisterOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterOutput.fromJS(resultData200) : new RegisterOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<RegisterOutput>(<any>null);
    }

    /**
     * 发送密码重置邮箱
     * @return Success
     */
    sendPasswordResetCode(input: SendPasswordResetCodeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/SendPasswordResetCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendPasswordResetCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendPasswordResetCode(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendPasswordResetCode(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 重置密码
     * @return Success
     */
    resetPassword(input: ResetPasswordInput): Observable<ResetPasswordOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/ResetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processResetPassword(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processResetPassword(response_);
                } catch (e) {
                    return <Observable<ResetPasswordOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResetPasswordOutput>><any>Observable.throw(response_);
        });
    }

    protected processResetPassword(response: Response): Observable<ResetPasswordOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: ResetPasswordOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResetPasswordOutput.fromJS(resultData200) : new ResetPasswordOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ResetPasswordOutput>(<any>null);
    }

    /**
     * 发送激活邮件
     * @return Success
     */
    sendEmailActivationLink(input: SendEmailActivationLinkInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/SendEmailActivationLink";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendEmailActivationLink(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendEmailActivationLink(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendEmailActivationLink(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 邮箱激活
     * @return Success
     */
    activateEmail(input: ActivateEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/ActivateEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processActivateEmail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processActivateEmail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processActivateEmail(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 模拟(用户)登录
     * @return Success
     */
    impersonate(input: ImpersonateInput): Observable<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Impersonate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processImpersonate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processImpersonate(response_);
                } catch (e) {
                    return <Observable<ImpersonateOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonateOutput>><any>Observable.throw(response_);
        });
    }

    protected processImpersonate(response: Response): Observable<ImpersonateOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: ImpersonateOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonateOutput.fromJS(resultData200) : new ImpersonateOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ImpersonateOutput>(<any>null);
    }

    /**
     * 退出模拟登录
     * @return Success
     */
    backToImpersonator(): Observable<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/BackToImpersonator";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processBackToImpersonator(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processBackToImpersonator(response_);
                } catch (e) {
                    return <Observable<ImpersonateOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonateOutput>><any>Observable.throw(response_);
        });
    }

    protected processBackToImpersonator(response: Response): Observable<ImpersonateOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: ImpersonateOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonateOutput.fromJS(resultData200) : new ImpersonateOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ImpersonateOutput>(<any>null);
    }

    /**
     * 关联账号
     * @return Success
     */
    switchToLinkedAccount(input: SwitchToLinkedAccountInput): Observable<SwitchToLinkedAccountOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/SwitchToLinkedAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSwitchToLinkedAccount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSwitchToLinkedAccount(response_);
                } catch (e) {
                    return <Observable<SwitchToLinkedAccountOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<SwitchToLinkedAccountOutput>><any>Observable.throw(response_);
        });
    }

    protected processSwitchToLinkedAccount(response: Response): Observable<SwitchToLinkedAccountOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: SwitchToLinkedAccountOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SwitchToLinkedAccountOutput.fromJS(resultData200) : new SwitchToLinkedAccountOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SwitchToLinkedAccountOutput>(<any>null);
    }
}

@Injectable()
export class AuditLogServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取审计日志
     * @startDate 开始时间（UTC）
     * @endDate 结束时间
     * @userName 用户名
     * @serviceName 服务名称
     * @methodName 操作
     * @browserInfo 浏览器
     * @hasException 是否异常
     * @minExecutionDuration 最小执行时间
     * @maxExecutionDuration 最大执行时间
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getAuditLogs(startDate: Moment, endDate: Moment, userName: string, serviceName: string, methodName: string, browserInfo: string, hasException: boolean, minExecutionDuration: number, maxExecutionDuration: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfAuditLogListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogs?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "null") + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "null") + "&"; 
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&"; 
        if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&"; 
        if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&"; 
        if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&"; 
        if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&"; 
        if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAuditLogs(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAuditLogs(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfAuditLogListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfAuditLogListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAuditLogs(response: Response): Observable<PagedResultDtoOfAuditLogListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfAuditLogListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfAuditLogListDto.fromJS(resultData200) : new PagedResultDtoOfAuditLogListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfAuditLogListDto>(<any>null);
    }

    /**
     * 导出审计日志到Excel
     * @startDate 开始时间（UTC）
     * @endDate 结束时间
     * @userName 用户名
     * @serviceName 服务名称
     * @methodName 操作
     * @browserInfo 浏览器
     * @hasException 是否异常
     * @minExecutionDuration 最小执行时间
     * @maxExecutionDuration 最大执行时间
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getAuditLogsToExcel(startDate: Moment, endDate: Moment, userName: string, serviceName: string, methodName: string, browserInfo: string, hasException: boolean, minExecutionDuration: number, maxExecutionDuration: number, sorting: string, maxResultCount: number, skipCount: number): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogsToExcel?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "null") + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "null") + "&"; 
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&"; 
        if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&"; 
        if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&"; 
        if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&"; 
        if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&"; 
        if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAuditLogsToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAuditLogsToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAuditLogsToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class BookingServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取预约详情
     * @return Success
     */
    getJoinBookingInfo(id: number): Observable<JoinBookingOutput> {
        let url_ = this.baseUrl + "/api/services/app/Booking/GetJoinBookingInfo?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetJoinBookingInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetJoinBookingInfo(response_);
                } catch (e) {
                    return <Observable<JoinBookingOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<JoinBookingOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetJoinBookingInfo(response: Response): Observable<JoinBookingOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: JoinBookingOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? JoinBookingOutput.fromJS(resultData200) : new JoinBookingOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<JoinBookingOutput>(<any>null);
    }

    /**
     * 应约(需要登录)
     * @return Success
     */
    joinBooking(input: JoinBookingInput): Observable<JoinBookingResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Booking/JoinBooking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processJoinBooking(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processJoinBooking(response_);
                } catch (e) {
                    return <Observable<JoinBookingResultDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<JoinBookingResultDto>><any>Observable.throw(response_);
        });
    }

    protected processJoinBooking(response: Response): Observable<JoinBookingResultDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: JoinBookingResultDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? JoinBookingResultDto.fromJS(resultData200) : new JoinBookingResultDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<JoinBookingResultDto>(<any>null);
    }
}

@Injectable()
export class BookingDataStatisticsServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取机构中心数据统计
     * @date 数据统计日期
     * @return Success
     */
    getBusCenterDataStatistics(date: string): Observable<BusCenterDataStatisticsDto> {
        let url_ = this.baseUrl + "/api/services/app/BookingDataStatistics/GetBusCenterDataStatistics?";
        if (date !== undefined)
            url_ += "Date=" + encodeURIComponent("" + date) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetBusCenterDataStatistics(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBusCenterDataStatistics(response_);
                } catch (e) {
                    return <Observable<BusCenterDataStatisticsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<BusCenterDataStatisticsDto>><any>Observable.throw(response_);
        });
    }

    protected processGetBusCenterDataStatistics(response: Response): Observable<BusCenterDataStatisticsDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: BusCenterDataStatisticsDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? BusCenterDataStatisticsDto.fromJS(resultData200) : new BusCenterDataStatisticsDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<BusCenterDataStatisticsDto>(<any>null);
    }

    /**
     * 获取预约基础数据统计
     * @date 数据统计日期
     * @return Success
     */
    getBookingData(date: string): Observable<BookingDataStatisticsDto> {
        let url_ = this.baseUrl + "/api/services/app/BookingDataStatistics/GetBookingData?";
        if (date !== undefined)
            url_ += "Date=" + encodeURIComponent("" + date) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetBookingData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBookingData(response_);
                } catch (e) {
                    return <Observable<BookingDataStatisticsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<BookingDataStatisticsDto>><any>Observable.throw(response_);
        });
    }

    protected processGetBookingData(response: Response): Observable<BookingDataStatisticsDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: BookingDataStatisticsDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? BookingDataStatisticsDto.fromJS(resultData200) : new BookingDataStatisticsDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<BookingDataStatisticsDto>(<any>null);
    }

    /**
     * 获取最近预约数据
     * @return Success
     */
    getCurrentlyBookingData(): Observable<CurrentlyBookingDataDto[]> {
        let url_ = this.baseUrl + "/api/services/app/BookingDataStatistics/GetCurrentlyBookingData";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCurrentlyBookingData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCurrentlyBookingData(response_);
                } catch (e) {
                    return <Observable<CurrentlyBookingDataDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<CurrentlyBookingDataDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetCurrentlyBookingData(response: Response): Observable<CurrentlyBookingDataDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: CurrentlyBookingDataDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(CurrentlyBookingDataDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<CurrentlyBookingDataDto[]>(<any>null);
    }

    /**
     * 获取预约转化率统计
     * @date 数据统计日期
     * @return Success
     */
    getBookingConverRate(date: string): Observable<BookingConverRateDto[]> {
        let url_ = this.baseUrl + "/api/services/app/BookingDataStatistics/GetBookingConverRate?";
        if (date !== undefined)
            url_ += "Date=" + encodeURIComponent("" + date) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetBookingConverRate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBookingConverRate(response_);
                } catch (e) {
                    return <Observable<BookingConverRateDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<BookingConverRateDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetBookingConverRate(response: Response): Observable<BookingConverRateDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: BookingConverRateDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(BookingConverRateDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<BookingConverRateDto[]>(<any>null);
    }

    /**
     * 获取预约访问时间分布
     * @date 数据统计日期
     * @return Success
     */
    getBookingAccessTime(date: string): Observable<BookingAccessChannelDto[]> {
        let url_ = this.baseUrl + "/api/services/app/BookingDataStatistics/GetBookingAccessTime?";
        if (date !== undefined)
            url_ += "Date=" + encodeURIComponent("" + date) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetBookingAccessTime(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBookingAccessTime(response_);
                } catch (e) {
                    return <Observable<BookingAccessChannelDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<BookingAccessChannelDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetBookingAccessTime(response: Response): Observable<BookingAccessChannelDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: BookingAccessChannelDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(BookingAccessChannelDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<BookingAccessChannelDto[]>(<any>null);
    }

    /**
     * 获取访问来源统计
     * @date 数据统计日期
     * @return Success
     */
    getBookingAccessSource(date: string): Observable<GetBookingAccessSourceOutput> {
        let url_ = this.baseUrl + "/api/services/app/BookingDataStatistics/GetBookingAccessSource?";
        if (date !== undefined)
            url_ += "Date=" + encodeURIComponent("" + date) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetBookingAccessSource(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBookingAccessSource(response_);
                } catch (e) {
                    return <Observable<GetBookingAccessSourceOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetBookingAccessSourceOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetBookingAccessSource(response: Response): Observable<GetBookingAccessSourceOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetBookingAccessSourceOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetBookingAccessSourceOutput.fromJS(resultData200) : new GetBookingAccessSourceOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetBookingAccessSourceOutput>(<any>null);
    }

    /**
     * 获取访问地域分布统计
     * @date 数据统计日期
     * @return Success
     */
    getBookingAccessRegion(date: string): Observable<BookingAccessRegionDto[]> {
        let url_ = this.baseUrl + "/api/services/app/BookingDataStatistics/GetBookingAccessRegion?";
        if (date !== undefined)
            url_ += "Date=" + encodeURIComponent("" + date) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetBookingAccessRegion(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBookingAccessRegion(response_);
                } catch (e) {
                    return <Observable<BookingAccessRegionDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<BookingAccessRegionDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetBookingAccessRegion(response: Response): Observable<BookingAccessRegionDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: BookingAccessRegionDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(BookingAccessRegionDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<BookingAccessRegionDto[]>(<any>null);
    }

    /**
     * 获取预约饱和度
     * @outletId 门店Id
     * @date 数据统计日期
     * @return Success
     */
    getBookingSaturation(outletId: number, date: string): Observable<GetBookingSaturationOutput> {
        let url_ = this.baseUrl + "/api/services/app/BookingDataStatistics/GetBookingSaturation?";
        if (outletId !== undefined)
            url_ += "OutletId=" + encodeURIComponent("" + outletId) + "&"; 
        if (date !== undefined)
            url_ += "Date=" + encodeURIComponent("" + date) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetBookingSaturation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBookingSaturation(response_);
                } catch (e) {
                    return <Observable<GetBookingSaturationOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetBookingSaturationOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetBookingSaturation(response: Response): Observable<GetBookingSaturationOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetBookingSaturationOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetBookingSaturationOutput.fromJS(resultData200) : new GetBookingSaturationOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetBookingSaturationOutput>(<any>null);
    }

    /**
     * 获取预约时间热度
     * @return Success
     */
    getBookingHeat(bookingId: number): Observable<BookingHeatDto[]> {
        let url_ = this.baseUrl + "/api/services/app/BookingDataStatistics/GetBookingHeat?";
        if (bookingId !== undefined)
            url_ += "bookingId=" + encodeURIComponent("" + bookingId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetBookingHeat(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBookingHeat(response_);
                } catch (e) {
                    return <Observable<BookingHeatDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<BookingHeatDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetBookingHeat(response: Response): Observable<BookingHeatDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: BookingHeatDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(BookingHeatDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<BookingHeatDto[]>(<any>null);
    }
}

@Injectable()
export class BookingRecordServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 记录预约访问情况
     * @return Success
     */
    recordBookingAccessAsync(input: BookingAccessRecordInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/BookingRecord/RecordBookingAccessAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processRecordBookingAccessAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRecordBookingAccessAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processRecordBookingAccessAsync(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 记录预约分享情况
     * @return Success
     */
    recordBookingShareAsync(input: BookingShareRecordInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/BookingRecord/RecordBookingShareAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processRecordBookingShareAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRecordBookingShareAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processRecordBookingShareAsync(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class CachingServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有缓存
     * @return Success
     */
    getAllCaches(): Observable<ListResultDtoOfCacheDto> {
        let url_ = this.baseUrl + "/api/services/app/Caching/GetAllCaches";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllCaches(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllCaches(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfCacheDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfCacheDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllCaches(response: Response): Observable<ListResultDtoOfCacheDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: ListResultDtoOfCacheDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfCacheDto.fromJS(resultData200) : new ListResultDtoOfCacheDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfCacheDto>(<any>null);
    }

    /**
     * 清理缓存
     * @input 缓存Id
     * @return Success
     */
    clearCache(input: EntityDtoOfString): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Caching/ClearCache";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processClearCache(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processClearCache(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processClearCache(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 清理所有缓存
     * @return Success
     */
    clearAllCaches(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Caching/ClearAllCaches";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processClearAllCaches(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processClearAllCaches(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processClearAllCaches(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ChatServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取会话好友
     * @return Success
     */
    getUserChatFriendsWithSettings(): Observable<GetUserChatFriendsWithSettingsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Chat/GetUserChatFriendsWithSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserChatFriendsWithSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserChatFriendsWithSettings(response_);
                } catch (e) {
                    return <Observable<GetUserChatFriendsWithSettingsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserChatFriendsWithSettingsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetUserChatFriendsWithSettings(response: Response): Observable<GetUserChatFriendsWithSettingsOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetUserChatFriendsWithSettingsOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserChatFriendsWithSettingsOutput.fromJS(resultData200) : new GetUserChatFriendsWithSettingsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetUserChatFriendsWithSettingsOutput>(<any>null);
    }

    /**
     * 获取会话消息
     * @tenantId 租户Id(可空)
     * @userId 用户Id
     * @minMessageId 最小消息Id(可空)
     * @return Success
     */
    getUserChatMessages(tenantId: number, userId: number, minMessageId: number): Observable<ListResultDtoOfChatMessageDto> {
        let url_ = this.baseUrl + "/api/services/app/Chat/GetUserChatMessages?";
        if (tenantId !== undefined)
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&"; 
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (minMessageId !== undefined)
            url_ += "MinMessageId=" + encodeURIComponent("" + minMessageId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserChatMessages(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserChatMessages(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfChatMessageDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfChatMessageDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUserChatMessages(response: Response): Observable<ListResultDtoOfChatMessageDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: ListResultDtoOfChatMessageDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfChatMessageDto.fromJS(resultData200) : new ListResultDtoOfChatMessageDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfChatMessageDto>(<any>null);
    }

    /**
     * 设置所有未读消息为已读
     * @return Success
     */
    markAllUnreadMessagesOfUserAsRead(input: MarkAllUnreadMessagesOfUserAsReadInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Chat/MarkAllUnreadMessagesOfUserAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processMarkAllUnreadMessagesOfUserAsRead(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processMarkAllUnreadMessagesOfUserAsRead(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processMarkAllUnreadMessagesOfUserAsRead(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class CommonLookupServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getEditionsForCombobox(onlyFreeItems: boolean): Observable<ListResultDtoOfSubscribableEditionComboboxItemDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetEditionsForCombobox?";
        if (onlyFreeItems !== undefined)
            url_ += "onlyFreeItems=" + encodeURIComponent("" + onlyFreeItems) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditionsForCombobox(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionsForCombobox(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfSubscribableEditionComboboxItemDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfSubscribableEditionComboboxItemDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionsForCombobox(response: Response): Observable<ListResultDtoOfSubscribableEditionComboboxItemDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: ListResultDtoOfSubscribableEditionComboboxItemDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfSubscribableEditionComboboxItemDto.fromJS(resultData200) : new ListResultDtoOfSubscribableEditionComboboxItemDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfSubscribableEditionComboboxItemDto>(<any>null);
    }

    /**
     * 查找用户
     * @return Success
     */
    findUsers(input: FindUsersInput): Observable<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/FindUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processFindUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processFindUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(response_);
        });
    }

    protected processFindUsers(response: Response): Observable<PagedResultDtoOfNameValueDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfNameValueDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNameValueDto.fromJS(resultData200) : new PagedResultDtoOfNameValueDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfNameValueDto>(<any>null);
    }

    /**
     * 获取默认版本名称
     * @return Success
     */
    getDefaultEditionName(): Observable<GetDefaultEditionNameOutput> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetDefaultEditionName";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDefaultEditionName(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDefaultEditionName(response_);
                } catch (e) {
                    return <Observable<GetDefaultEditionNameOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDefaultEditionNameOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetDefaultEditionName(response: Response): Observable<GetDefaultEditionNameOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetDefaultEditionNameOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDefaultEditionNameOutput.fromJS(resultData200) : new GetDefaultEditionNameOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetDefaultEditionNameOutput>(<any>null);
    }

    /**
     * 根据枚举名称获取下拉框数据源
     * @enumName 枚举类型名称
     * @return Success
     */
    getEnumSelectItemSource(enumName: string): Observable<SelectListItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetEnumSelectItemSource?";
        if (enumName !== undefined)
            url_ += "enumName=" + encodeURIComponent("" + enumName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnumSelectItemSource(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnumSelectItemSource(response_);
                } catch (e) {
                    return <Observable<SelectListItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SelectListItemDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetEnumSelectItemSource(response: Response): Observable<SelectListItemDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: SelectListItemDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SelectListItemDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SelectListItemDto[]>(<any>null);
    }
}

@Injectable()
export class EditionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取全部版本信息
     * @return Success
     */
    getEditions(): Observable<ListResultDtoOfEditionListDto> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditions(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfEditionListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfEditionListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEditions(response: Response): Observable<ListResultDtoOfEditionListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: ListResultDtoOfEditionListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfEditionListDto.fromJS(resultData200) : new ListResultDtoOfEditionListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfEditionListDto>(<any>null);
    }

    /**
     * 获取版本信息
     * @return Success
     */
    getEditionForEdit(id: number): Observable<GetEditionEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditionForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionForEdit(response_);
                } catch (e) {
                    return <Observable<GetEditionEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetEditionEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionForEdit(response: Response): Observable<GetEditionEditOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetEditionEditOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEditionEditOutput.fromJS(resultData200) : new GetEditionEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetEditionEditOutput>(<any>null);
    }

    /**
     * 创建/更新版本
     * @return Success
     */
    createOrUpdateEdition(input: CreateOrUpdateEditionDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/CreateOrUpdateEdition";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateEdition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateEdition(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateEdition(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 删除版本
     * @return Success
     */
    deleteEdition(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/DeleteEdition?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteEdition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteEdition(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteEdition(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 获取版本信息(下拉框选项)
     * @selectedEditionId 选择版本Id
     * @addAllItem 添加所有
     * @onlyFreeItems 只获取免费版
     * @return Success
     */
    getEditionComboboxItems(selectedEditionId: number, addAllItem: boolean, onlyFreeItems: boolean): Observable<SubscribableEditionComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionComboboxItems?";
        if (selectedEditionId !== undefined)
            url_ += "selectedEditionId=" + encodeURIComponent("" + selectedEditionId) + "&"; 
        if (addAllItem !== undefined)
            url_ += "addAllItem=" + encodeURIComponent("" + addAllItem) + "&"; 
        if (onlyFreeItems !== undefined)
            url_ += "onlyFreeItems=" + encodeURIComponent("" + onlyFreeItems) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditionComboboxItems(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionComboboxItems(response_);
                } catch (e) {
                    return <Observable<SubscribableEditionComboboxItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SubscribableEditionComboboxItemDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionComboboxItems(response: Response): Observable<SubscribableEditionComboboxItemDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: SubscribableEditionComboboxItemDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SubscribableEditionComboboxItemDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SubscribableEditionComboboxItemDto[]>(<any>null);
    }
}

@Injectable()
export class EditionViewServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有版本
     * @return Success
     */
    getEditionsForSelect(): Observable<EditionsSelectOutput> {
        let url_ = this.baseUrl + "/api/services/app/EditionView/GetEditionsForSelect";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditionsForSelect(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionsForSelect(response_);
                } catch (e) {
                    return <Observable<EditionsSelectOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<EditionsSelectOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionsForSelect(response: Response): Observable<EditionsSelectOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: EditionsSelectOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditionsSelectOutput.fromJS(resultData200) : new EditionsSelectOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<EditionsSelectOutput>(<any>null);
    }

    /**
     * 获取版本
     * @return Success
     */
    getEdition(editionId: number): Observable<EditionSelectDto> {
        let url_ = this.baseUrl + "/api/services/app/EditionView/GetEdition?";
        if (editionId !== undefined)
            url_ += "editionId=" + encodeURIComponent("" + editionId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEdition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEdition(response_);
                } catch (e) {
                    return <Observable<EditionSelectDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<EditionSelectDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEdition(response: Response): Observable<EditionSelectDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: EditionSelectDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditionSelectDto.fromJS(resultData200) : new EditionSelectDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<EditionSelectDto>(<any>null);
    }
}

@Injectable()
export class FileServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 下载临时文件
     * @fileName 文件名称
     * @fileType 文件类型
     * @fileToken 文件 Token
     * @return Success
     */
    downloadTempFile(fileName: string, fileType: string, fileToken: string): Observable<void> {
        let url_ = this.baseUrl + "/api/File/DownloadTempFile?";
        if (fileName !== undefined)
            url_ += "FileName=" + encodeURIComponent("" + fileName) + "&"; 
        if (fileType !== undefined)
            url_ += "FileType=" + encodeURIComponent("" + fileType) + "&"; 
        if (fileToken !== undefined)
            url_ += "FileToken=" + encodeURIComponent("" + fileToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDownloadTempFile(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDownloadTempFile(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDownloadTempFile(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 云存储回调
     * @return Success
     */
    uploadPictureCallBack(input: UploadPictureInput): Observable<UploadPictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/File/UploadPictureCallBack";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUploadPictureCallBack(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUploadPictureCallBack(response_);
                } catch (e) {
                    return <Observable<UploadPictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<UploadPictureOutput>><any>Observable.throw(response_);
        });
    }

    protected processUploadPictureCallBack(response: Response): Observable<UploadPictureOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: UploadPictureOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UploadPictureOutput.fromJS(resultData200) : new UploadPictureOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<UploadPictureOutput>(<any>null);
    }
}

@Injectable()
export class FriendshipServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 创建(添加)好友请求
     * @return Success
     */
    createFriendshipRequest(input: CreateFriendshipRequestInput): Observable<FriendDto> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/CreateFriendshipRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateFriendshipRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateFriendshipRequest(response_);
                } catch (e) {
                    return <Observable<FriendDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FriendDto>><any>Observable.throw(response_);
        });
    }

    protected processCreateFriendshipRequest(response: Response): Observable<FriendDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: FriendDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FriendDto.fromJS(resultData200) : new FriendDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FriendDto>(<any>null);
    }

    /**
     * 根据用户名创建添加好友请求
     * @return Success
     */
    createFriendshipRequestByUserName(input: CreateFriendshipRequestByUserNameInput): Observable<FriendDto> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/CreateFriendshipRequestByUserName";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateFriendshipRequestByUserName(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateFriendshipRequestByUserName(response_);
                } catch (e) {
                    return <Observable<FriendDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FriendDto>><any>Observable.throw(response_);
        });
    }

    protected processCreateFriendshipRequestByUserName(response: Response): Observable<FriendDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: FriendDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FriendDto.fromJS(resultData200) : new FriendDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FriendDto>(<any>null);
    }

    /**
     * 添加黑名单
     * @return Success
     */
    blockUser(input: BlockUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/BlockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processBlockUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processBlockUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processBlockUser(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 解除黑名单
     * @return Success
     */
    unblockUser(input: UnblockUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/UnblockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUnblockUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnblockUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnblockUser(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 接受好友请求
     * @return Success
     */
    acceptFriendshipRequest(input: AcceptFriendshipRequestInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/AcceptFriendshipRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processAcceptFriendshipRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAcceptFriendshipRequest(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processAcceptFriendshipRequest(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class HostDashboardServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getDashboardStatisticsData(incomeStatisticsDateInterval: IncomeStatisticsDateInterval, startDate: Moment, endDate: Moment): Observable<HostDashboardData> {
        let url_ = this.baseUrl + "/api/services/app/HostDashboard/GetDashboardStatisticsData?";
        if (incomeStatisticsDateInterval !== undefined)
            url_ += "IncomeStatisticsDateInterval=" + encodeURIComponent("" + incomeStatisticsDateInterval) + "&"; 
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "null") + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "null") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDashboardStatisticsData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDashboardStatisticsData(response_);
                } catch (e) {
                    return <Observable<HostDashboardData>><any>Observable.throw(e);
                }
            } else
                return <Observable<HostDashboardData>><any>Observable.throw(response_);
        });
    }

    protected processGetDashboardStatisticsData(response: Response): Observable<HostDashboardData> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: HostDashboardData = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? HostDashboardData.fromJS(resultData200) : new HostDashboardData();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<HostDashboardData>(<any>null);
    }

    /**
     * @return Success
     */
    getIncomeStatistics(incomeStatisticsDateInterval: IncomeStatisticsDateInterval2, startDate: Moment, endDate: Moment): Observable<GetIncomeStatisticsDataOutput> {
        let url_ = this.baseUrl + "/api/services/app/HostDashboard/GetIncomeStatistics?";
        if (incomeStatisticsDateInterval !== undefined)
            url_ += "IncomeStatisticsDateInterval=" + encodeURIComponent("" + incomeStatisticsDateInterval) + "&"; 
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "null") + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "null") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetIncomeStatistics(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetIncomeStatistics(response_);
                } catch (e) {
                    return <Observable<GetIncomeStatisticsDataOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetIncomeStatisticsDataOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetIncomeStatistics(response: Response): Observable<GetIncomeStatisticsDataOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetIncomeStatisticsDataOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetIncomeStatisticsDataOutput.fromJS(resultData200) : new GetIncomeStatisticsDataOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetIncomeStatisticsDataOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getEditionTenantStatistics(startDate: Moment, endDate: Moment): Observable<GetEditionTenantStatisticsOutput> {
        let url_ = this.baseUrl + "/api/services/app/HostDashboard/GetEditionTenantStatistics?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "null") + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "null") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditionTenantStatistics(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionTenantStatistics(response_);
                } catch (e) {
                    return <Observable<GetEditionTenantStatisticsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetEditionTenantStatisticsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionTenantStatistics(response: Response): Observable<GetEditionTenantStatisticsOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetEditionTenantStatisticsOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEditionTenantStatisticsOutput.fromJS(resultData200) : new GetEditionTenantStatisticsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetEditionTenantStatisticsOutput>(<any>null);
    }
}

@Injectable()
export class HostSettingsServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取宿主所有设置
     * @return Success
     */
    getAllSettings(): Observable<HostSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllSettings(response_);
                } catch (e) {
                    return <Observable<HostSettingsEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<HostSettingsEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllSettings(response: Response): Observable<HostSettingsEditDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: HostSettingsEditDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? HostSettingsEditDto.fromJS(resultData200) : new HostSettingsEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<HostSettingsEditDto>(<any>null);
    }

    /**
     * 更新宿主所有设置
     * @return Success
     */
    updateAllSettings(input: HostSettingsEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateAllSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateAllSettings(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateAllSettings(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 更新第三方登陆配置(单条记录)
     * @return Success
     */
    updateExternalAuthentication(input: ExternalAuthenticationProviderEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/UpdateExternalAuthentication";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateExternalAuthentication(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateExternalAuthentication(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateExternalAuthentication(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 获取验证码设置
     * @return Success
     */
    getVerificationCodeSettingsAsync(): Observable<VerificationCodeSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/GetVerificationCodeSettingsAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetVerificationCodeSettingsAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetVerificationCodeSettingsAsync(response_);
                } catch (e) {
                    return <Observable<VerificationCodeSettingsEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<VerificationCodeSettingsEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetVerificationCodeSettingsAsync(response: Response): Observable<VerificationCodeSettingsEditDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: VerificationCodeSettingsEditDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? VerificationCodeSettingsEditDto.fromJS(resultData200) : new VerificationCodeSettingsEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<VerificationCodeSettingsEditDto>(<any>null);
    }

    /**
     * 发送测试邮件
     * @return Success
     */
    sendTestEmail(input: SendTestEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendTestEmail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendTestEmail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendTestEmail(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class IncomeStatisticsServiceServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getIncomeStatisticsData(startDate: Moment, endDate: Moment, dateInterval: DateInterval): Observable<IncomeStastistic[]> {
        let url_ = this.baseUrl + "/api/services/app/IncomeStatisticsService/GetIncomeStatisticsData?";
        if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "null") + "&"; 
        if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "null") + "&"; 
        if (dateInterval !== undefined)
            url_ += "dateInterval=" + encodeURIComponent("" + dateInterval) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetIncomeStatisticsData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetIncomeStatisticsData(response_);
                } catch (e) {
                    return <Observable<IncomeStastistic[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<IncomeStastistic[]>><any>Observable.throw(response_);
        });
    }

    protected processGetIncomeStatisticsData(response: Response): Observable<IncomeStastistic[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: IncomeStastistic[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(IncomeStastistic.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<IncomeStastistic[]>(<any>null);
    }
}

@Injectable()
export class LanguageServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取语言
     * @return Success
     */
    getLanguages(): Observable<GetLanguagesOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguages";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLanguages(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLanguages(response_);
                } catch (e) {
                    return <Observable<GetLanguagesOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLanguagesOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetLanguages(response: Response): Observable<GetLanguagesOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetLanguagesOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLanguagesOutput.fromJS(resultData200) : new GetLanguagesOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetLanguagesOutput>(<any>null);
    }

    /**
     * 获取语言详情
     * @return Success
     */
    getLanguageForEdit(id: number): Observable<GetLanguageForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLanguageForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLanguageForEdit(response_);
                } catch (e) {
                    return <Observable<GetLanguageForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLanguageForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetLanguageForEdit(response: Response): Observable<GetLanguageForEditOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetLanguageForEditOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLanguageForEditOutput.fromJS(resultData200) : new GetLanguageForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetLanguageForEditOutput>(<any>null);
    }

    /**
     * 创建/编辑语言
     * @return Success
     */
    createOrUpdateLanguage(input: CreateOrUpdateLanguageInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/CreateOrUpdateLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateLanguage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateLanguage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateLanguage(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 删除语言
     * @return Success
     */
    deleteLanguage(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/DeleteLanguage?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteLanguage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteLanguage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteLanguage(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 设置默认语言
     * @return Success
     */
    setDefaultLanguage(input: SetDefaultLanguageInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/SetDefaultLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSetDefaultLanguage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSetDefaultLanguage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSetDefaultLanguage(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 获取语言翻译
     * @maxResultCount 结果数量(页大小)
     * @skipCount 跳过数量(页大小 * 页码)
     * @sorting 排序字段(eg : Key Desc )
     * @sourceName 源名称(eg:Xiaoyuyue,AbpZero,Abp)
     * @baseLanguageName 基础语言名称
     * @targetLanguageName 目标语言名称
     * @targetValueFilter 目标值过滤
     * @filterText 过滤文本
     * @return Success
     */
    getLanguageTexts(maxResultCount: number, skipCount: number, sorting: string, sourceName: string, baseLanguageName: string, targetLanguageName: string, targetValueFilter: string, filterText: string): Observable<PagedResultDtoOfLanguageTextListDto> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageTexts?";
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (sourceName !== undefined)
            url_ += "SourceName=" + encodeURIComponent("" + sourceName) + "&"; 
        if (baseLanguageName !== undefined)
            url_ += "BaseLanguageName=" + encodeURIComponent("" + baseLanguageName) + "&"; 
        if (targetLanguageName !== undefined)
            url_ += "TargetLanguageName=" + encodeURIComponent("" + targetLanguageName) + "&"; 
        if (targetValueFilter !== undefined)
            url_ += "TargetValueFilter=" + encodeURIComponent("" + targetValueFilter) + "&"; 
        if (filterText !== undefined)
            url_ += "FilterText=" + encodeURIComponent("" + filterText) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLanguageTexts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLanguageTexts(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfLanguageTextListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfLanguageTextListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLanguageTexts(response: Response): Observable<PagedResultDtoOfLanguageTextListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfLanguageTextListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfLanguageTextListDto.fromJS(resultData200) : new PagedResultDtoOfLanguageTextListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfLanguageTextListDto>(<any>null);
    }

    /**
     * 更新语言翻译
     * @return Success
     */
    updateLanguageText(input: UpdateLanguageTextInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/UpdateLanguageText";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateLanguageText(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateLanguageText(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateLanguageText(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MessageServiceServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取可用指令
     * @return Success
     */
    getAvailableTokenList(): Observable<TokensListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/MessageService/GetAvailableTokenList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAvailableTokenList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAvailableTokenList(response_);
                } catch (e) {
                    return <Observable<TokensListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<TokensListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetAvailableTokenList(response: Response): Observable<TokensListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: TokensListDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(TokensListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<TokensListDto[]>(<any>null);
    }
}

@Injectable()
export class NotificationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取用户通知
     * @state 通知状态（可空）
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getUserNotifications(state: State, maxResultCount: number, skipCount: number): Observable<GetNotificationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Notification/GetUserNotifications?";
        if (state !== undefined)
            url_ += "State=" + encodeURIComponent("" + state) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserNotifications(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserNotifications(response_);
                } catch (e) {
                    return <Observable<GetNotificationsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNotificationsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetUserNotifications(response: Response): Observable<GetNotificationsOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetNotificationsOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNotificationsOutput.fromJS(resultData200) : new GetNotificationsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetNotificationsOutput>(<any>null);
    }

    /**
     * 设置所有通知为已读
     * @return Success
     */
    setAllNotificationsAsRead(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/SetAllNotificationsAsRead";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSetAllNotificationsAsRead(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSetAllNotificationsAsRead(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSetAllNotificationsAsRead(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 设置通知为已读
     * @return Success
     */
    setNotificationAsRead(input: EntityDtoOfGuid): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/SetNotificationAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSetNotificationAsRead(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSetNotificationAsRead(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSetNotificationAsRead(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 获取通知设置
     * @return Success
     */
    getNotificationSettings(): Observable<GetNotificationSettingsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Notification/GetNotificationSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNotificationSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNotificationSettings(response_);
                } catch (e) {
                    return <Observable<GetNotificationSettingsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNotificationSettingsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetNotificationSettings(response: Response): Observable<GetNotificationSettingsOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetNotificationSettingsOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNotificationSettingsOutput.fromJS(resultData200) : new GetNotificationSettingsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetNotificationSettingsOutput>(<any>null);
    }

    /**
     * 更新通知设置
     * @return Success
     */
    updateNotificationSettings(input: UpdateNotificationSettingsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/UpdateNotificationSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateNotificationSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateNotificationSettings(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateNotificationSettings(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class OrganizationUnitServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取组织单位
     * @return Success
     */
    getOrganizationUnits(): Observable<ListResultDtoOfOrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnits";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOrganizationUnits(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOrganizationUnits(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfOrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfOrganizationUnitDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrganizationUnits(response: Response): Observable<ListResultDtoOfOrganizationUnitDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: ListResultDtoOfOrganizationUnitDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfOrganizationUnitDto.fromJS(resultData200) : new ListResultDtoOfOrganizationUnitDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfOrganizationUnitDto>(<any>null);
    }

    /**
     * 获取组织单位成员
     * @id 组织单位Id(大于0)
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getOrganizationUnitUsers(id: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfOrganizationUnitUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnitUsers?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOrganizationUnitUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOrganizationUnitUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfOrganizationUnitUserListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfOrganizationUnitUserListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrganizationUnitUsers(response: Response): Observable<PagedResultDtoOfOrganizationUnitUserListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfOrganizationUnitUserListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfOrganizationUnitUserListDto.fromJS(resultData200) : new PagedResultDtoOfOrganizationUnitUserListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfOrganizationUnitUserListDto>(<any>null);
    }

    /**
     * 创建组织单位
     * @return Success
     */
    createOrganizationUnit(input: CreateOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/CreateOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrganizationUnit(response: Response): Observable<OrganizationUnitDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: OrganizationUnitDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<OrganizationUnitDto>(<any>null);
    }

    /**
     * 更新组织单位
     * @return Success
     */
    updateOrganizationUnit(input: UpdateOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/UpdateOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateOrganizationUnit(response: Response): Observable<OrganizationUnitDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: OrganizationUnitDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<OrganizationUnitDto>(<any>null);
    }

    /**
     * 移动组织单位
     * @return Success
     */
    moveOrganizationUnit(input: MoveOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/MoveOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processMoveOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processMoveOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response_);
        });
    }

    protected processMoveOrganizationUnit(response: Response): Observable<OrganizationUnitDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: OrganizationUnitDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<OrganizationUnitDto>(<any>null);
    }

    /**
     * 删除组织单位
     * @return Success
     */
    deleteOrganizationUnit(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/DeleteOrganizationUnit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteOrganizationUnit(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 添加成员到组织单位
     * @return Success
     */
    addUsersToOrganizationUnit(input: UsersToOrganizationUnitInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/AddUsersToOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processAddUsersToOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAddUsersToOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processAddUsersToOrganizationUnit(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 把成员从组织单位移除
     * @userId 用户 Id(大于0)
     * @organizationUnitId 组织单位 Id(大于0)
     * @return Success
     */
    removeUserFromOrganizationUnit(userId: number, organizationUnitId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/RemoveUserFromOrganizationUnit?";
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (organizationUnitId !== undefined)
            url_ += "OrganizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processRemoveUserFromOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRemoveUserFromOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processRemoveUserFromOrganizationUnit(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 查找组织机构用户
     * @return Success
     */
    findUsers(input: FindOrganizationUnitUsersInput): Observable<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/FindUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processFindUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processFindUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(response_);
        });
    }

    protected processFindUsers(response: Response): Observable<PagedResultDtoOfNameValueDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfNameValueDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNameValueDto.fromJS(resultData200) : new PagedResultDtoOfNameValueDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfNameValueDto>(<any>null);
    }
}

@Injectable()
export class OrgBookingServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有预约
     * @name 预约名称
     * @outletId 门店Id
     * @isActive 是否激活
     * @startCreationTime 开始创建时间
     * @endCreationTime 结束创建时间
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getBookings(name: string, outletId: number, isActive: boolean, startCreationTime: Moment, endCreationTime: Moment, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfBookingListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrgBooking/GetBookings?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (outletId !== undefined)
            url_ += "OutletId=" + encodeURIComponent("" + outletId) + "&"; 
        if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&"; 
        if (startCreationTime !== undefined)
            url_ += "StartCreationTime=" + encodeURIComponent(startCreationTime ? "" + startCreationTime.toJSON() : "null") + "&"; 
        if (endCreationTime !== undefined)
            url_ += "EndCreationTime=" + encodeURIComponent(endCreationTime ? "" + endCreationTime.toJSON() : "null") + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetBookings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBookings(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfBookingListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfBookingListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetBookings(response: Response): Observable<PagedResultDtoOfBookingListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfBookingListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfBookingListDto.fromJS(resultData200) : new PagedResultDtoOfBookingListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfBookingListDto>(<any>null);
    }

    /**
     * 获取可用预约日期和时间(下拉框)
     * @return Success
     */
    getAvailableBookingDateAndTime(id: number): Observable<GetBookingDateAndTimeOutput> {
        let url_ = this.baseUrl + "/api/services/app/OrgBooking/GetAvailableBookingDateAndTime?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAvailableBookingDateAndTime(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAvailableBookingDateAndTime(response_);
                } catch (e) {
                    return <Observable<GetBookingDateAndTimeOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetBookingDateAndTimeOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetAvailableBookingDateAndTime(response: Response): Observable<GetBookingDateAndTimeOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetBookingDateAndTimeOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetBookingDateAndTimeOutput.fromJS(resultData200) : new GetBookingDateAndTimeOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetBookingDateAndTimeOutput>(<any>null);
    }

    /**
     * 获取预约详情(编辑)
     * @return Success
     */
    getBookingForEdit(id: number): Observable<GetBookingForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/OrgBooking/GetBookingForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetBookingForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBookingForEdit(response_);
                } catch (e) {
                    return <Observable<GetBookingForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetBookingForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetBookingForEdit(response: Response): Observable<GetBookingForEditOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetBookingForEditOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetBookingForEditOutput.fromJS(resultData200) : new GetBookingForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetBookingForEditOutput>(<any>null);
    }

    /**
     * 获取预约详情
     * @return Success
     */
    getBookingDetail(id: number): Observable<GetBookingDetailOutput> {
        let url_ = this.baseUrl + "/api/services/app/OrgBooking/GetBookingDetail?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetBookingDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBookingDetail(response_);
                } catch (e) {
                    return <Observable<GetBookingDetailOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetBookingDetailOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetBookingDetail(response: Response): Observable<GetBookingDetailOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetBookingDetailOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetBookingDetailOutput.fromJS(resultData200) : new GetBookingDetailOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetBookingDetailOutput>(<any>null);
    }

    /**
     * 获取可用预约(下拉框)
     * @return Success
     */
    getBookingSelectList(): Observable<SelectListItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/OrgBooking/GetBookingSelectList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetBookingSelectList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBookingSelectList(response_);
                } catch (e) {
                    return <Observable<SelectListItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SelectListItemDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetBookingSelectList(response: Response): Observable<SelectListItemDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: SelectListItemDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SelectListItemDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SelectListItemDto[]>(<any>null);
    }

    /**
     * 创建或更新预约
     * @return Success
     */
    createOrUpdateBooking(input: CreateOrUpdateBookingInput): Observable<EntityDtoOfInt64> {
        let url_ = this.baseUrl + "/api/services/app/OrgBooking/CreateOrUpdateBooking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateBooking(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateBooking(response_);
                } catch (e) {
                    return <Observable<EntityDtoOfInt64>><any>Observable.throw(e);
                }
            } else
                return <Observable<EntityDtoOfInt64>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateBooking(response: Response): Observable<EntityDtoOfInt64> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: EntityDtoOfInt64 = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EntityDtoOfInt64.fromJS(resultData200) : new EntityDtoOfInt64();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<EntityDtoOfInt64>(<any>null);
    }

    /**
     * 激活/禁用 预约
     * @return Success
     */
    activedOrDisableBooking(input: ActiveOrDisableInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrgBooking/ActivedOrDisableBooking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processActivedOrDisableBooking(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processActivedOrDisableBooking(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processActivedOrDisableBooking(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 删除预约
     * @return Success
     */
    deleteBooking(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrgBooking/DeleteBooking?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteBooking(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteBooking(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteBooking(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 获取时间
     * @return Success
     */
    getItemDatetime(tenantId: number, name: string, description: string, hint: string, templateId: number, contactorId: number, contactor_Name: string, contactor_PhoneNum: string, contactor_WechatQrcodeUrl: string, contactor_TenantId: number, contactor_OutletId: number, contactor_IsDefault: boolean, contactor_IsDeleted: boolean, contactor_DeleterUserId: number, contactor_DeletionTime: Moment, contactor_LastModificationTime: Moment, contactor_LastModifierUserId: number, contactor_CreationTime: Moment, contactor_CreatorUserId: number, contactor_Id: number, outletId: number, outlet_TenantId: number, outlet_Name: string, outlet_Longitude: string, outlet_PhoneNum: string, outlet_BusinessHours: string, outlet_Province: string, outlet_ProvinceId: number, outlet_City: string, outlet_CityId: number, outlet_District: string, outlet_DistrictId: number, outlet_DetailAddress: string, outlet_PictureId: number, outlet_IsActive: boolean, outlet_Contactors: any[], outlet_IsDeleted: boolean, outlet_DeleterUserId: number, outlet_DeletionTime: Moment, outlet_LastModificationTime: Moment, outlet_LastModifierUserId: number, outlet_CreationTime: Moment, outlet_CreatorUserId: number, outlet_Id: number, needGender: boolean, needAge: boolean, needEmail: boolean, sticked: boolean, isActive: boolean, pV: number, uV: number, items: any[], pictures: any[], isDeleted: boolean, deleterUserId: number, deletionTime: Moment, lastModificationTime: Moment, lastModifierUserId: number, creationTime: Moment, creatorUserId: number, id: number): Observable<string[]> {
        let url_ = this.baseUrl + "/api/services/app/OrgBooking/GetItemDatetime?";
        if (tenantId !== undefined)
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&"; 
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (description !== undefined)
            url_ += "Description=" + encodeURIComponent("" + description) + "&"; 
        if (hint !== undefined)
            url_ += "Hint=" + encodeURIComponent("" + hint) + "&"; 
        if (templateId !== undefined)
            url_ += "TemplateId=" + encodeURIComponent("" + templateId) + "&"; 
        if (contactorId !== undefined)
            url_ += "ContactorId=" + encodeURIComponent("" + contactorId) + "&"; 
        if (contactor_Name !== undefined)
            url_ += "Contactor.Name=" + encodeURIComponent("" + contactor_Name) + "&"; 
        if (contactor_PhoneNum !== undefined)
            url_ += "Contactor.PhoneNum=" + encodeURIComponent("" + contactor_PhoneNum) + "&"; 
        if (contactor_WechatQrcodeUrl !== undefined)
            url_ += "Contactor.WechatQrcodeUrl=" + encodeURIComponent("" + contactor_WechatQrcodeUrl) + "&"; 
        if (contactor_TenantId !== undefined)
            url_ += "Contactor.TenantId=" + encodeURIComponent("" + contactor_TenantId) + "&"; 
        if (contactor_OutletId !== undefined)
            url_ += "Contactor.OutletId=" + encodeURIComponent("" + contactor_OutletId) + "&"; 
        if (contactor_IsDefault !== undefined)
            url_ += "Contactor.IsDefault=" + encodeURIComponent("" + contactor_IsDefault) + "&"; 
        if (contactor_IsDeleted !== undefined)
            url_ += "Contactor.IsDeleted=" + encodeURIComponent("" + contactor_IsDeleted) + "&"; 
        if (contactor_DeleterUserId !== undefined)
            url_ += "Contactor.DeleterUserId=" + encodeURIComponent("" + contactor_DeleterUserId) + "&"; 
        if (contactor_DeletionTime !== undefined)
            url_ += "Contactor.DeletionTime=" + encodeURIComponent(contactor_DeletionTime ? "" + contactor_DeletionTime.toJSON() : "null") + "&"; 
        if (contactor_LastModificationTime !== undefined)
            url_ += "Contactor.LastModificationTime=" + encodeURIComponent(contactor_LastModificationTime ? "" + contactor_LastModificationTime.toJSON() : "null") + "&"; 
        if (contactor_LastModifierUserId !== undefined)
            url_ += "Contactor.LastModifierUserId=" + encodeURIComponent("" + contactor_LastModifierUserId) + "&"; 
        if (contactor_CreationTime !== undefined)
            url_ += "Contactor.CreationTime=" + encodeURIComponent(contactor_CreationTime ? "" + contactor_CreationTime.toJSON() : "null") + "&"; 
        if (contactor_CreatorUserId !== undefined)
            url_ += "Contactor.CreatorUserId=" + encodeURIComponent("" + contactor_CreatorUserId) + "&"; 
        if (contactor_Id !== undefined)
            url_ += "Contactor.Id=" + encodeURIComponent("" + contactor_Id) + "&"; 
        if (outletId !== undefined)
            url_ += "OutletId=" + encodeURIComponent("" + outletId) + "&"; 
        if (outlet_TenantId !== undefined)
            url_ += "Outlet.TenantId=" + encodeURIComponent("" + outlet_TenantId) + "&"; 
        if (outlet_Name !== undefined)
            url_ += "Outlet.Name=" + encodeURIComponent("" + outlet_Name) + "&"; 
        if (outlet_Longitude !== undefined)
            url_ += "Outlet.Longitude=" + encodeURIComponent("" + outlet_Longitude) + "&"; 
        if (outlet_PhoneNum !== undefined)
            url_ += "Outlet.PhoneNum=" + encodeURIComponent("" + outlet_PhoneNum) + "&"; 
        if (outlet_BusinessHours !== undefined)
            url_ += "Outlet.BusinessHours=" + encodeURIComponent("" + outlet_BusinessHours) + "&"; 
        if (outlet_Province !== undefined)
            url_ += "Outlet.Province=" + encodeURIComponent("" + outlet_Province) + "&"; 
        if (outlet_ProvinceId !== undefined)
            url_ += "Outlet.ProvinceId=" + encodeURIComponent("" + outlet_ProvinceId) + "&"; 
        if (outlet_City !== undefined)
            url_ += "Outlet.City=" + encodeURIComponent("" + outlet_City) + "&"; 
        if (outlet_CityId !== undefined)
            url_ += "Outlet.CityId=" + encodeURIComponent("" + outlet_CityId) + "&"; 
        if (outlet_District !== undefined)
            url_ += "Outlet.District=" + encodeURIComponent("" + outlet_District) + "&"; 
        if (outlet_DistrictId !== undefined)
            url_ += "Outlet.DistrictId=" + encodeURIComponent("" + outlet_DistrictId) + "&"; 
        if (outlet_DetailAddress !== undefined)
            url_ += "Outlet.DetailAddress=" + encodeURIComponent("" + outlet_DetailAddress) + "&"; 
        if (outlet_PictureId !== undefined)
            url_ += "Outlet.PictureId=" + encodeURIComponent("" + outlet_PictureId) + "&"; 
        if (outlet_IsActive !== undefined)
            url_ += "Outlet.IsActive=" + encodeURIComponent("" + outlet_IsActive) + "&"; 
        if (outlet_Contactors !== undefined)
            outlet_Contactors && outlet_Contactors.forEach((item, index) => { 
                for (let attr in item)
                    url_ += "Outlet.Contactors[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        if (outlet_IsDeleted !== undefined)
            url_ += "Outlet.IsDeleted=" + encodeURIComponent("" + outlet_IsDeleted) + "&"; 
        if (outlet_DeleterUserId !== undefined)
            url_ += "Outlet.DeleterUserId=" + encodeURIComponent("" + outlet_DeleterUserId) + "&"; 
        if (outlet_DeletionTime !== undefined)
            url_ += "Outlet.DeletionTime=" + encodeURIComponent(outlet_DeletionTime ? "" + outlet_DeletionTime.toJSON() : "null") + "&"; 
        if (outlet_LastModificationTime !== undefined)
            url_ += "Outlet.LastModificationTime=" + encodeURIComponent(outlet_LastModificationTime ? "" + outlet_LastModificationTime.toJSON() : "null") + "&"; 
        if (outlet_LastModifierUserId !== undefined)
            url_ += "Outlet.LastModifierUserId=" + encodeURIComponent("" + outlet_LastModifierUserId) + "&"; 
        if (outlet_CreationTime !== undefined)
            url_ += "Outlet.CreationTime=" + encodeURIComponent(outlet_CreationTime ? "" + outlet_CreationTime.toJSON() : "null") + "&"; 
        if (outlet_CreatorUserId !== undefined)
            url_ += "Outlet.CreatorUserId=" + encodeURIComponent("" + outlet_CreatorUserId) + "&"; 
        if (outlet_Id !== undefined)
            url_ += "Outlet.Id=" + encodeURIComponent("" + outlet_Id) + "&"; 
        if (needGender !== undefined)
            url_ += "NeedGender=" + encodeURIComponent("" + needGender) + "&"; 
        if (needAge !== undefined)
            url_ += "NeedAge=" + encodeURIComponent("" + needAge) + "&"; 
        if (needEmail !== undefined)
            url_ += "NeedEmail=" + encodeURIComponent("" + needEmail) + "&"; 
        if (sticked !== undefined)
            url_ += "Sticked=" + encodeURIComponent("" + sticked) + "&"; 
        if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&"; 
        if (pV !== undefined)
            url_ += "PV=" + encodeURIComponent("" + pV) + "&"; 
        if (uV !== undefined)
            url_ += "UV=" + encodeURIComponent("" + uV) + "&"; 
        if (items !== undefined)
            items && items.forEach((item, index) => { 
                for (let attr in item)
                    url_ += "Items[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        if (pictures !== undefined)
            pictures && pictures.forEach((item, index) => { 
                for (let attr in item)
                    url_ += "Pictures[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
            });
        if (isDeleted !== undefined)
            url_ += "IsDeleted=" + encodeURIComponent("" + isDeleted) + "&"; 
        if (deleterUserId !== undefined)
            url_ += "DeleterUserId=" + encodeURIComponent("" + deleterUserId) + "&"; 
        if (deletionTime !== undefined)
            url_ += "DeletionTime=" + encodeURIComponent(deletionTime ? "" + deletionTime.toJSON() : "null") + "&"; 
        if (lastModificationTime !== undefined)
            url_ += "LastModificationTime=" + encodeURIComponent(lastModificationTime ? "" + lastModificationTime.toJSON() : "null") + "&"; 
        if (lastModifierUserId !== undefined)
            url_ += "LastModifierUserId=" + encodeURIComponent("" + lastModifierUserId) + "&"; 
        if (creationTime !== undefined)
            url_ += "CreationTime=" + encodeURIComponent(creationTime ? "" + creationTime.toJSON() : "null") + "&"; 
        if (creatorUserId !== undefined)
            url_ += "CreatorUserId=" + encodeURIComponent("" + creatorUserId) + "&"; 
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetItemDatetime(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetItemDatetime(response_);
                } catch (e) {
                    return <Observable<string[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<string[]>><any>Observable.throw(response_);
        });
    }

    protected processGetItemDatetime(response: Response): Observable<string[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: string[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<string[]>(<any>null);
    }
}

@Injectable()
export class OrgBookingOrderServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有预约订单
     * @bookingId 预约Id
     * @bookingName 预约名称
     * @customerName 客户名称
     * @bookingDate 预约开始时间
     * @hourOfDay 预约时间(eg: 10:00-12:00)
     * @startMinute 预约开始时间
     * @endMinute 预约结束时间
     * @phoneNumber 电话号码
     * @gender 性别
     * @creationStartDate 创建开始日期
     * @creationEndDate 创建结束日期
     * @status 预约状态
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getOrders(bookingId: number, bookingName: string, customerName: string, bookingDate: Moment, hourOfDay: string, startMinute: number, endMinute: number, phoneNumber: string, gender: Gender, creationStartDate: Moment, creationEndDate: Moment, status: Status[], sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfOrgBookingOrderListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrgBookingOrder/GetOrders?";
        if (bookingId !== undefined)
            url_ += "BookingId=" + encodeURIComponent("" + bookingId) + "&"; 
        if (bookingName !== undefined)
            url_ += "BookingName=" + encodeURIComponent("" + bookingName) + "&"; 
        if (customerName !== undefined)
            url_ += "CustomerName=" + encodeURIComponent("" + customerName) + "&"; 
        if (bookingDate !== undefined)
            url_ += "BookingDate=" + encodeURIComponent(bookingDate ? "" + bookingDate.toJSON() : "null") + "&"; 
        if (hourOfDay !== undefined)
            url_ += "HourOfDay=" + encodeURIComponent("" + hourOfDay) + "&"; 
        if (startMinute !== undefined)
            url_ += "StartMinute=" + encodeURIComponent("" + startMinute) + "&"; 
        if (endMinute !== undefined)
            url_ += "EndMinute=" + encodeURIComponent("" + endMinute) + "&"; 
        if (phoneNumber !== undefined)
            url_ += "PhoneNumber=" + encodeURIComponent("" + phoneNumber) + "&"; 
        if (gender !== undefined)
            url_ += "Gender=" + encodeURIComponent("" + gender) + "&"; 
        if (creationStartDate !== undefined)
            url_ += "CreationStartDate=" + encodeURIComponent(creationStartDate ? "" + creationStartDate.toJSON() : "null") + "&"; 
        if (creationEndDate !== undefined)
            url_ += "CreationEndDate=" + encodeURIComponent(creationEndDate ? "" + creationEndDate.toJSON() : "null") + "&"; 
        if (status !== undefined)
            status && status.forEach(item => { url_ += "Status=" + encodeURIComponent("" + item) + "&"; });
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOrders(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOrders(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfOrgBookingOrderListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfOrgBookingOrderListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrders(response: Response): Observable<PagedResultDtoOfOrgBookingOrderListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfOrgBookingOrderListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfOrgBookingOrderListDto.fromJS(resultData200) : new PagedResultDtoOfOrgBookingOrderListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfOrgBookingOrderListDto>(<any>null);
    }

    /**
     * 获取预约订单详情
     * @return Success
     */
    getOrderDetail(id: number): Observable<OrgBookingOrderInfolDto> {
        let url_ = this.baseUrl + "/api/services/app/OrgBookingOrder/GetOrderDetail?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOrderDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOrderDetail(response_);
                } catch (e) {
                    return <Observable<OrgBookingOrderInfolDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrgBookingOrderInfolDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderDetail(response: Response): Observable<OrgBookingOrderInfolDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: OrgBookingOrderInfolDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrgBookingOrderInfolDto.fromJS(resultData200) : new OrgBookingOrderInfolDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<OrgBookingOrderInfolDto>(<any>null);
    }

    /**
     * 批量确认预约订单
     * @return Success
     */
    batchConfirmBookingOrder(input: BatchConfirmInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrgBookingOrder/BatchConfirmBookingOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processBatchConfirmBookingOrder(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processBatchConfirmBookingOrder(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processBatchConfirmBookingOrder(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 确认预约订单
     * @return Success
     */
    confirmBookingOrder(input: EntityDtoOfInt64): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrgBookingOrder/ConfirmBookingOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processConfirmBookingOrder(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processConfirmBookingOrder(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processConfirmBookingOrder(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 预约订单完成
     * @return Success
     */
    complateBookingOrder(input: EntityDtoOfInt64): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrgBookingOrder/ComplateBookingOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processComplateBookingOrder(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processComplateBookingOrder(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processComplateBookingOrder(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 备注订单
     * @return Success
     */
    remarkBookingOrder(input: RemarkBookingOrderInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrgBookingOrder/RemarkBookingOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processRemarkBookingOrder(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRemarkBookingOrder(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processRemarkBookingOrder(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class OutletServiceServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有门店
     * @name 名称
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getOutlets(name: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfOutletListDto> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/GetOutlets?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOutlets(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOutlets(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfOutletListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfOutletListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOutlets(response: Response): Observable<PagedResultDtoOfOutletListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfOutletListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfOutletListDto.fromJS(resultData200) : new PagedResultDtoOfOutletListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfOutletListDto>(<any>null);
    }

    /**
     * 获取可用门店(下拉框)
     * @return Success
     */
    getOutletSelectList(): Observable<SelectListItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/GetOutletSelectList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOutletSelectList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOutletSelectList(response_);
                } catch (e) {
                    return <Observable<SelectListItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SelectListItemDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetOutletSelectList(response: Response): Observable<SelectListItemDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: SelectListItemDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SelectListItemDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SelectListItemDto[]>(<any>null);
    }

    /**
     * 获取门店详情
     * @return Success
     */
    getOutletForEdit(id: number): Observable<GetOutletForEditDto> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/GetOutletForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOutletForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOutletForEdit(response_);
                } catch (e) {
                    return <Observable<GetOutletForEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetOutletForEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOutletForEdit(response: Response): Observable<GetOutletForEditDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetOutletForEditDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetOutletForEditDto.fromJS(resultData200) : new GetOutletForEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetOutletForEditDto>(<any>null);
    }

    /**
     * 创建或更新门店
     * @return Success
     */
    createOrUpdateOutlet(input: CreateOrUpdateOutletInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/CreateOrUpdateOutlet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateOutlet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateOutlet(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateOutlet(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 删除门店
     * @return Success
     */
    deleteOutlet(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/DeleteOutlet?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteOutlet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteOutlet(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteOutlet(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 获取可用联系人(下拉框)
     * @return Success
     */
    getContactorSelectList(outletId: number): Observable<SelectListItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/GetContactorSelectList?";
        if (outletId !== undefined)
            url_ += "outletId=" + encodeURIComponent("" + outletId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContactorSelectList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContactorSelectList(response_);
                } catch (e) {
                    return <Observable<SelectListItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SelectListItemDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetContactorSelectList(response: Response): Observable<SelectListItemDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: SelectListItemDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SelectListItemDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SelectListItemDto[]>(<any>null);
    }

    /**
     * 创建或更新联系人
     * @return Success
     */
    createOrUpdateContactor(input: ContactorEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/CreateOrUpdateContactor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateContactor(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateContactor(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateContactor(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 删除联系人
     * @return Success
     */
    deleteContactor(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/DeleteContactor?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteContactor(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteContactor(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteContactor(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 创建门店
     * @return Success
     */
    createOutlet(input: CreateOrUpdateOutletInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/CreateOutlet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOutlet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOutlet(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOutlet(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 更新门店
     * @return Success
     */
    updateOutlet(input: CreateOrUpdateOutletInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/UpdateOutlet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateOutlet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateOutlet(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateOutlet(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 创建联系人
     * @return Success
     */
    createContactor(input: ContactorEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/CreateContactor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateContactor(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateContactor(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateContactor(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 更新联系人
     * @return Success
     */
    updateContactor(input: ContactorEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OutletService/UpdateContactor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateContactor(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateContactor(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateContactor(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class PaymentServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getPaymentInfo(upgradeEditionId: number): Observable<PaymentInfoDto> {
        let url_ = this.baseUrl + "/api/services/app/Payment/GetPaymentInfo?";
        if (upgradeEditionId !== undefined)
            url_ += "UpgradeEditionId=" + encodeURIComponent("" + upgradeEditionId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPaymentInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPaymentInfo(response_);
                } catch (e) {
                    return <Observable<PaymentInfoDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PaymentInfoDto>><any>Observable.throw(response_);
        });
    }

    protected processGetPaymentInfo(response: Response): Observable<PaymentInfoDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PaymentInfoDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PaymentInfoDto.fromJS(resultData200) : new PaymentInfoDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PaymentInfoDto>(<any>null);
    }

    /**
     * @return Success
     */
    createPayment(input: CreatePaymentDto): Observable<any> {
        let url_ = this.baseUrl + "/api/services/app/Payment/CreatePayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreatePayment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreatePayment(response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processCreatePayment(response: Response): Observable<any> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<any>(<any>null);
    }

    /**
     * @return Success
     */
    executePayment(input: ExecutePaymentDto): Observable<any> {
        let url_ = this.baseUrl + "/api/services/app/Payment/ExecutePayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processExecutePayment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processExecutePayment(response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processExecutePayment(response: Response): Observable<any> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<any>(<any>null);
    }

    /**
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getPaymentHistory(sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfSubscriptionPaymentListDto> {
        let url_ = this.baseUrl + "/api/services/app/Payment/GetPaymentHistory?";
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPaymentHistory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPaymentHistory(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfSubscriptionPaymentListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfSubscriptionPaymentListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetPaymentHistory(response: Response): Observable<PagedResultDtoOfSubscriptionPaymentListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfSubscriptionPaymentListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfSubscriptionPaymentListDto.fromJS(resultData200) : new PagedResultDtoOfSubscriptionPaymentListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfSubscriptionPaymentListDto>(<any>null);
    }
}

@Injectable()
export class PerBookingOrderServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取预约时间线
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getBookingTimeline(startDataTime: Moment, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfBookingTimelineDto> {
        let url_ = this.baseUrl + "/api/services/app/PerBookingOrder/GetBookingTimeline?";
        if (startDataTime !== undefined)
            url_ += "StartDataTime=" + encodeURIComponent(startDataTime ? "" + startDataTime.toJSON() : "null") + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetBookingTimeline(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBookingTimeline(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfBookingTimelineDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfBookingTimelineDto>><any>Observable.throw(response_);
        });
    }

    protected processGetBookingTimeline(response: Response): Observable<PagedResultDtoOfBookingTimelineDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfBookingTimelineDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfBookingTimelineDto.fromJS(resultData200) : new PagedResultDtoOfBookingTimelineDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfBookingTimelineDto>(<any>null);
    }

    /**
     * 获取所有预约订单
     * @bookingName 预约名称
     * @status 预约状态
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getBookingOrders(bookingName: string, status: Status2[], sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfBookingOrderListDto> {
        let url_ = this.baseUrl + "/api/services/app/PerBookingOrder/GetBookingOrders?";
        if (bookingName !== undefined)
            url_ += "BookingName=" + encodeURIComponent("" + bookingName) + "&"; 
        if (status !== undefined)
            status && status.forEach(item => { url_ += "Status=" + encodeURIComponent("" + item) + "&"; });
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetBookingOrders(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBookingOrders(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfBookingOrderListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfBookingOrderListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetBookingOrders(response: Response): Observable<PagedResultDtoOfBookingOrderListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfBookingOrderListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfBookingOrderListDto.fromJS(resultData200) : new PagedResultDtoOfBookingOrderListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfBookingOrderListDto>(<any>null);
    }

    /**
     * 获取预约订单详情
     * @return Success
     */
    getBookingOrderForEdit(id: number): Observable<GetPersonBookingOrderOutput> {
        let url_ = this.baseUrl + "/api/services/app/PerBookingOrder/GetBookingOrderForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetBookingOrderForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetBookingOrderForEdit(response_);
                } catch (e) {
                    return <Observable<GetPersonBookingOrderOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetPersonBookingOrderOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetBookingOrderForEdit(response: Response): Observable<GetPersonBookingOrderOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetPersonBookingOrderOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetPersonBookingOrderOutput.fromJS(resultData200) : new GetPersonBookingOrderOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetPersonBookingOrderOutput>(<any>null);
    }

    /**
     * 取消订单
     * @return Success
     */
    cancelBookingOrder(input: CancelBookingOrderInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/PerBookingOrder/CancelBookingOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCancelBookingOrder(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCancelBookingOrder(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCancelBookingOrder(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 置顶预约订单
     * @return Success
     */
    stickedBookingOrder(input: StickedInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/PerBookingOrder/StickedBookingOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processStickedBookingOrder(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processStickedBookingOrder(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processStickedBookingOrder(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class PermissionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有权限
     * @return Success
     */
    getAllPermissions(): Observable<ListResultDtoOfFlatPermissionWithLevelDto> {
        let url_ = this.baseUrl + "/api/services/app/Permission/GetAllPermissions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllPermissions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllPermissions(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfFlatPermissionWithLevelDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfFlatPermissionWithLevelDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllPermissions(response: Response): Observable<ListResultDtoOfFlatPermissionWithLevelDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: ListResultDtoOfFlatPermissionWithLevelDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfFlatPermissionWithLevelDto.fromJS(resultData200) : new ListResultDtoOfFlatPermissionWithLevelDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfFlatPermissionWithLevelDto>(<any>null);
    }
}

@Injectable()
export class PictureServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取分组下的图片
     * @groupId 图片分组Id，-1 获取全部
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getPictureAsync(groupId: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfPictureListDto> {
        let url_ = this.baseUrl + "/api/services/app/Picture/GetPictureAsync?";
        if (groupId !== undefined)
            url_ += "GroupId=" + encodeURIComponent("" + groupId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPictureAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPictureAsync(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfPictureListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfPictureListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetPictureAsync(response: Response): Observable<PagedResultDtoOfPictureListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfPictureListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfPictureListDto.fromJS(resultData200) : new PagedResultDtoOfPictureListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfPictureListDto>(<any>null);
    }

    /**
     * 获取当前用户上传图片凭证
     * @return Success
     */
    getPictureUploadToken(): Observable<UploadTokenOutput> {
        let url_ = this.baseUrl + "/api/services/app/Picture/GetPictureUploadToken";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPictureUploadToken(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPictureUploadToken(response_);
                } catch (e) {
                    return <Observable<UploadTokenOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<UploadTokenOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetPictureUploadToken(response: Response): Observable<UploadTokenOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: UploadTokenOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UploadTokenOutput.fromJS(resultData200) : new UploadTokenOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<UploadTokenOutput>(<any>null);
    }

    /**
     * 上传图片
     * @return Success
     */
    uploadAsync(groupId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/UploadAsync?";
        if (groupId !== undefined)
            url_ += "groupId=" + encodeURIComponent("" + groupId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUploadAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUploadAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUploadAsync(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 创建或更新图片
     * @return Success
     */
    createOrUpdatePicture(input: CreateOrUpdatePictureInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/CreateOrUpdatePicture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdatePicture(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdatePicture(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdatePicture(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 删除图片
     * @return Success
     */
    deleteAsync(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/DeleteAsync?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteAsync(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 获取所有的图片分组
     * @return Success
     */
    getPictureGroupAsync(): Observable<PictureGroupListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Picture/GetPictureGroupAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPictureGroupAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPictureGroupAsync(response_);
                } catch (e) {
                    return <Observable<PictureGroupListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<PictureGroupListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetPictureGroupAsync(response: Response): Observable<PictureGroupListDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PictureGroupListDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PictureGroupListDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PictureGroupListDto[]>(<any>null);
    }

    /**
     * 创建或更新图片分组
     * @return Success
     */
    createOrUpdatePictureGroup(input: CreateOrUpdatePictureGroupInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/CreateOrUpdatePictureGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdatePictureGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdatePictureGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdatePictureGroup(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 删除图片分组
     * @return Success
     */
    deleteGroupAsync(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/DeleteGroupAsync?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteGroupAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteGroupAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteGroupAsync(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ProfileServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取当前用户资料
     * @return Success
     */
    getCurrentUserProfileForEdit(): Observable<CurrentUserProfileEditDto> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetCurrentUserProfileForEdit";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCurrentUserProfileForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCurrentUserProfileForEdit(response_);
                } catch (e) {
                    return <Observable<CurrentUserProfileEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<CurrentUserProfileEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCurrentUserProfileForEdit(response: Response): Observable<CurrentUserProfileEditDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: CurrentUserProfileEditDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CurrentUserProfileEditDto.fromJS(resultData200) : new CurrentUserProfileEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<CurrentUserProfileEditDto>(<any>null);
    }

    /**
     * 更新当前用户资料
     * @return Success
     */
    updateCurrentUserProfile(input: CurrentUserProfileEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateCurrentUserProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateCurrentUserProfile(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateCurrentUserProfile(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateCurrentUserProfile(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 修改密码
     * @return Success
     */
    changePassword(input: ChangePasswordInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processChangePassword(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangePassword(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processChangePassword(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 使用手机修改密码
     * @return Success
     */
    changePasswordByPhone(input: ChangePasswordByPhoneInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangePasswordByPhone";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processChangePasswordByPhone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangePasswordByPhone(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processChangePasswordByPhone(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 绑定手机
     * @return Success
     */
    bindingPhoneNum(input: BindingPhoneNumInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/BindingPhoneNum";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processBindingPhoneNum(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processBindingPhoneNum(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processBindingPhoneNum(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 修改绑定手机
     * @return Success
     */
    changeBindingPhoneNum(input: ChangeBindingPhoneNumInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangeBindingPhoneNum";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processChangeBindingPhoneNum(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangeBindingPhoneNum(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processChangeBindingPhoneNum(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 解绑手机
     * @return Success
     */
    unBindingPhoneNum(code: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UnBindingPhoneNum?";
        if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUnBindingPhoneNum(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnBindingPhoneNum(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnBindingPhoneNum(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 更新头像
     * @return Success
     */
    updateProfilePicture(input: UpdateProfilePictureInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateProfilePicture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateProfilePicture(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProfilePicture(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProfilePicture(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 获取密码复杂性
     * @return Success
     */
    getPasswordComplexitySetting(): Observable<GetPasswordComplexitySettingOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetPasswordComplexitySetting";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPasswordComplexitySetting(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPasswordComplexitySetting(response_);
                } catch (e) {
                    return <Observable<GetPasswordComplexitySettingOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetPasswordComplexitySettingOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetPasswordComplexitySetting(response: Response): Observable<GetPasswordComplexitySettingOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetPasswordComplexitySettingOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetPasswordComplexitySettingOutput.fromJS(resultData200) : new GetPasswordComplexitySettingOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetPasswordComplexitySettingOutput>(<any>null);
    }

    /**
     * 获取当前用户头像
     * @return Success
     */
    getProfilePicture(): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetProfilePicture";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProfilePicture(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProfilePicture(response_);
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetProfilePicture(response: Response): Observable<GetProfilePictureOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetProfilePictureOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetProfilePictureOutput>(<any>null);
    }

    /**
     * 根据Id获取好友头像
     * @profilePictureId 图片Id
     * @userId 用户Id
     * @tenantId 租户Id
     * @return Success
     */
    getFriendProfilePictureById(profilePictureId: number, userId: number, tenantId: number): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetFriendProfilePictureById?";
        if (profilePictureId !== undefined)
            url_ += "ProfilePictureId=" + encodeURIComponent("" + profilePictureId) + "&"; 
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (tenantId !== undefined)
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetFriendProfilePictureById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetFriendProfilePictureById(response_);
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetFriendProfilePictureById(response: Response): Observable<GetProfilePictureOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetProfilePictureOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetProfilePictureOutput>(<any>null);
    }

    /**
     * 根据 Id 获取头像
     * @profilePictureId 头像文件Id
     * @return Success
     */
    getProfilePictureById(profilePictureId: number): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetProfilePictureById?";
        if (profilePictureId !== undefined)
            url_ += "profilePictureId=" + encodeURIComponent("" + profilePictureId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProfilePictureById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProfilePictureById(response_);
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetProfilePictureById(response: Response): Observable<GetProfilePictureOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetProfilePictureOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetProfilePictureOutput>(<any>null);
    }

    /**
     * 修改语言
     * @return Success
     */
    changeLanguage(input: ChangeUserLanguageDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangeLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processChangeLanguage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangeLanguage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processChangeLanguage(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 获取当前用户安全信息
     * @return Success
     */
    getCurrentUserSecurityInfo(): Observable<UserSecurityInfoDto> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetCurrentUserSecurityInfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCurrentUserSecurityInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCurrentUserSecurityInfo(response_);
                } catch (e) {
                    return <Observable<UserSecurityInfoDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<UserSecurityInfoDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCurrentUserSecurityInfo(response: Response): Observable<UserSecurityInfoDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: UserSecurityInfoDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserSecurityInfoDto.fromJS(resultData200) : new UserSecurityInfoDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<UserSecurityInfoDto>(<any>null);
    }
}

@Injectable()
export class RoleServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有角色
     * @displayName 显示名
     * @permission 权限
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getRoles(displayName: string, permission: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfRoleListDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoles?";
        if (displayName !== undefined)
            url_ += "DisplayName=" + encodeURIComponent("" + displayName) + "&"; 
        if (permission !== undefined)
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRoles(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRoles(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRoleListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfRoleListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetRoles(response: Response): Observable<PagedResultDtoOfRoleListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfRoleListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfRoleListDto.fromJS(resultData200) : new PagedResultDtoOfRoleListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfRoleListDto>(<any>null);
    }

    /**
     * 获取角色详情
     * @return Success
     */
    getRoleForEdit(id: number): Observable<GetRoleForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoleForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRoleForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRoleForEdit(response_);
                } catch (e) {
                    return <Observable<GetRoleForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetRoleForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetRoleForEdit(response: Response): Observable<GetRoleForEditOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetRoleForEditOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetRoleForEditOutput.fromJS(resultData200) : new GetRoleForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetRoleForEditOutput>(<any>null);
    }

    /**
     * 创建或更新角色
     * @return Success
     */
    createOrUpdateRole(input: CreateOrUpdateRoleInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/CreateOrUpdateRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateRole(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateRole(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateRole(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 删除角色
     * @return Success
     */
    deleteRole(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/DeleteRole?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteRole(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteRole(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteRole(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class SessionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取最近登录信息
     * @return Success
     */
    getCurrentLoginInformations(): Observable<GetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCurrentLoginInformations(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCurrentLoginInformations(response_);
                } catch (e) {
                    return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetCurrentLoginInformations(response: Response): Observable<GetCurrentLoginInformationsOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetCurrentLoginInformationsOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrentLoginInformationsOutput.fromJS(resultData200) : new GetCurrentLoginInformationsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetCurrentLoginInformationsOutput>(<any>null);
    }
}

@Injectable()
export class SMSServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 发送(通知/内容)短信 (暂未实现)
     * @return Success
     */
    batchSendAsync(input: BatchSendSMSInput): Observable<SendResult> {
        let url_ = this.baseUrl + "/api/services/app/SMS/BatchSendAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processBatchSendAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processBatchSendAsync(response_);
                } catch (e) {
                    return <Observable<SendResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<SendResult>><any>Observable.throw(response_);
        });
    }

    protected processBatchSendAsync(response: Response): Observable<SendResult> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: SendResult = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SendResult.fromJS(resultData200) : new SendResult();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SendResult>(<any>null);
    }

    /**
     * 给当前用户发送验证码
     * @return Success
     */
    sendCodeByCurrentUserAsync(input: UserCodeSendInput): Observable<SendResult> {
        let url_ = this.baseUrl + "/api/services/app/SMS/SendCodeByCurrentUserAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendCodeByCurrentUserAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendCodeByCurrentUserAsync(response_);
                } catch (e) {
                    return <Observable<SendResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<SendResult>><any>Observable.throw(response_);
        });
    }

    protected processSendCodeByCurrentUserAsync(response: Response): Observable<SendResult> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: SendResult = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SendResult.fromJS(resultData200) : new SendResult();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SendResult>(<any>null);
    }

    /**
     * 发送验证码
     * @return Success
     */
    sendCodeAsync(input: CodeSendInput): Observable<SendResult> {
        let url_ = this.baseUrl + "/api/services/app/SMS/SendCodeAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendCodeAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendCodeAsync(response_);
                } catch (e) {
                    return <Observable<SendResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<SendResult>><any>Observable.throw(response_);
        });
    }

    protected processSendCodeAsync(response: Response): Observable<SendResult> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: SendResult = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SendResult.fromJS(resultData200) : new SendResult();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SendResult>(<any>null);
    }

    /**
     * 验证当前用户的验证码
     * @return Success
     */
    checkCodeByCurrentUserAsync(input: CheckUserCodeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SMS/CheckCodeByCurrentUserAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCheckCodeByCurrentUserAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCheckCodeByCurrentUserAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCheckCodeByCurrentUserAsync(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class SMSTemplateServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有短信模板
     * @name 短信模板名称
     * @templateCode 短信模板编码
     * @providerName 短信模板供应商
     * @isActived 是否激活(Null代表所有)
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getSMSTemplates(name: string, templateCode: string, providerName: string, isActived: boolean, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfSMSTemplateListDto> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/GetSMSTemplates?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (templateCode !== undefined)
            url_ += "TemplateCode=" + encodeURIComponent("" + templateCode) + "&"; 
        if (providerName !== undefined)
            url_ += "ProviderName=" + encodeURIComponent("" + providerName) + "&"; 
        if (isActived !== undefined)
            url_ += "IsActived=" + encodeURIComponent("" + isActived) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSMSTemplates(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSMSTemplates(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfSMSTemplateListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfSMSTemplateListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetSMSTemplates(response: Response): Observable<PagedResultDtoOfSMSTemplateListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfSMSTemplateListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfSMSTemplateListDto.fromJS(resultData200) : new PagedResultDtoOfSMSTemplateListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfSMSTemplateListDto>(<any>null);
    }

    /**
     * 获取所有可用短信模板(下拉框)
     * @return Success
     */
    getAvailableSMSTemplates(): Observable<SelectListItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/GetAvailableSMSTemplates";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAvailableSMSTemplates(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAvailableSMSTemplates(response_);
                } catch (e) {
                    return <Observable<SelectListItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SelectListItemDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetAvailableSMSTemplates(response: Response): Observable<SelectListItemDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: SelectListItemDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SelectListItemDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SelectListItemDto[]>(<any>null);
    }

    /**
     * 获取短信模板详情
     * @return Success
     */
    getSMSTemplateForEdit(id: number): Observable<GetSMSTemplateForEditDto> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/GetSMSTemplateForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSMSTemplateForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSMSTemplateForEdit(response_);
                } catch (e) {
                    return <Observable<GetSMSTemplateForEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetSMSTemplateForEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetSMSTemplateForEdit(response: Response): Observable<GetSMSTemplateForEditDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetSMSTemplateForEditDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetSMSTemplateForEditDto.fromJS(resultData200) : new GetSMSTemplateForEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetSMSTemplateForEditDto>(<any>null);
    }

    /**
     * 新建/更新短信模板
     * @return Success
     */
    createOrUpdate(input: CreateOrUpdateSMSTemplateInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdate(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdate(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 删除短信模板
     * @return Success
     */
    deleteAsync(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/DeleteAsync?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteAsync(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 获取可用短信供应商
     * @return Success
     */
    getSMSProviders(): Observable<SMSProviderInfoDto[]> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/GetSMSProviders";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSMSProviders(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSMSProviders(response_);
                } catch (e) {
                    return <Observable<SMSProviderInfoDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SMSProviderInfoDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetSMSProviders(response: Response): Observable<SMSProviderInfoDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: SMSProviderInfoDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SMSProviderInfoDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SMSProviderInfoDto[]>(<any>null);
    }
}

@Injectable()
export class StateServiceServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有省份
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getProvinces(sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfProvinceListDto> {
        let url_ = this.baseUrl + "/api/services/app/StateService/GetProvinces?";
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProvinces(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProvinces(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfProvinceListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfProvinceListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProvinces(response: Response): Observable<PagedResultDtoOfProvinceListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfProvinceListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfProvinceListDto.fromJS(resultData200) : new PagedResultDtoOfProvinceListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfProvinceListDto>(<any>null);
    }

    /**
     * 获取所有可用省份(下拉框)
     * @return Success
     */
    getProvinceSelectList(): Observable<SelectListItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/StateService/GetProvinceSelectList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProvinceSelectList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProvinceSelectList(response_);
                } catch (e) {
                    return <Observable<SelectListItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SelectListItemDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetProvinceSelectList(response: Response): Observable<SelectListItemDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: SelectListItemDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SelectListItemDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SelectListItemDto[]>(<any>null);
    }

    /**
     * 创建或更新省份
     * @return Success
     */
    createOrUpdateProvince(input: CreateOrUpdateProvinceInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/StateService/CreateOrUpdateProvince";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateProvince(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateProvince(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateProvince(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 删除省份
     * @return Success
     */
    deleteProvince(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/StateService/DeleteProvince?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteProvince(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteProvince(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteProvince(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 获取所有城市
     * @provinceId 省份Id(必须大于0)
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getCitys(provinceId: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfCityListDto> {
        let url_ = this.baseUrl + "/api/services/app/StateService/GetCitys?";
        if (provinceId !== undefined)
            url_ += "ProvinceId=" + encodeURIComponent("" + provinceId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCitys(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCitys(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfCityListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfCityListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCitys(response: Response): Observable<PagedResultDtoOfCityListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfCityListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfCityListDto.fromJS(resultData200) : new PagedResultDtoOfCityListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfCityListDto>(<any>null);
    }

    /**
     * 获取所有可用城市(下拉框)
     * @provinceId 省份id
     * @return Success
     */
    getCitySelectList(provinceId: number): Observable<SelectListItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/StateService/GetCitySelectList?";
        if (provinceId !== undefined)
            url_ += "provinceId=" + encodeURIComponent("" + provinceId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCitySelectList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCitySelectList(response_);
                } catch (e) {
                    return <Observable<SelectListItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SelectListItemDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetCitySelectList(response: Response): Observable<SelectListItemDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: SelectListItemDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SelectListItemDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SelectListItemDto[]>(<any>null);
    }

    /**
     * 创建或更新城市
     * @return Success
     */
    createOrUpdateCity(input: CreateOrUpdateCityInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/StateService/CreateOrUpdateCity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateCity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateCity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateCity(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 删除城市
     * @return Success
     */
    deleteCity(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/StateService/DeleteCity?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteCity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteCity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteCity(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 获取所有区域
     * @ctyId 城市Id(必须大于0)
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getDistricts(ctyId: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfDistrictListDto> {
        let url_ = this.baseUrl + "/api/services/app/StateService/GetDistricts?";
        if (ctyId !== undefined)
            url_ += "CtyId=" + encodeURIComponent("" + ctyId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDistricts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDistricts(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfDistrictListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfDistrictListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetDistricts(response: Response): Observable<PagedResultDtoOfDistrictListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfDistrictListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfDistrictListDto.fromJS(resultData200) : new PagedResultDtoOfDistrictListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfDistrictListDto>(<any>null);
    }

    /**
     * 获取所有可用区域(下拉框)
     * @cityId 城市id
     * @return Success
     */
    getDistrictSelectList(cityId: number): Observable<SelectListItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/StateService/GetDistrictSelectList?";
        if (cityId !== undefined)
            url_ += "cityId=" + encodeURIComponent("" + cityId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDistrictSelectList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDistrictSelectList(response_);
                } catch (e) {
                    return <Observable<SelectListItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SelectListItemDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetDistrictSelectList(response: Response): Observable<SelectListItemDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: SelectListItemDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SelectListItemDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SelectListItemDto[]>(<any>null);
    }

    /**
     * 创建或更新区域
     * @return Success
     */
    createOrUpdateDistrict(input: CreateOrUpdateDistrictInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/StateService/CreateOrUpdateDistrict";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateDistrict(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateDistrict(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateDistrict(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 删除区域
     * @return Success
     */
    deleteDistrict(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/StateService/DeleteDistrict?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteDistrict(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteDistrict(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteDistrict(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TenantServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有租户
     * @tenancyName 租户系统名称
     * @name 租户名称
     * @subscriptionEndDateStart 订阅(购买)时间-开始
     * @subscriptionEndDateEnd 订阅(购买)时间-结束
     * @creationDateStart 创建时间-开始
     * @creationDateEnd 创建时间-结束
     * @editionId 版本
     * @editionIdSpecified 指定版本
     * @isActive 是否启用(空代表全部)
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getTenants(tenancyName: string, name: string, subscriptionEndDateStart: Moment, subscriptionEndDateEnd: Moment, creationDateStart: Moment, creationDateEnd: Moment, editionId: number, editionIdSpecified: boolean, isActive: boolean, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfTenantListDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenants?";
        if (tenancyName !== undefined)
            url_ += "TenancyName=" + encodeURIComponent("" + tenancyName) + "&"; 
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (subscriptionEndDateStart !== undefined)
            url_ += "SubscriptionEndDateStart=" + encodeURIComponent(subscriptionEndDateStart ? "" + subscriptionEndDateStart.toJSON() : "null") + "&"; 
        if (subscriptionEndDateEnd !== undefined)
            url_ += "SubscriptionEndDateEnd=" + encodeURIComponent(subscriptionEndDateEnd ? "" + subscriptionEndDateEnd.toJSON() : "null") + "&"; 
        if (creationDateStart !== undefined)
            url_ += "CreationDateStart=" + encodeURIComponent(creationDateStart ? "" + creationDateStart.toJSON() : "null") + "&"; 
        if (creationDateEnd !== undefined)
            url_ += "CreationDateEnd=" + encodeURIComponent(creationDateEnd ? "" + creationDateEnd.toJSON() : "null") + "&"; 
        if (editionId !== undefined)
            url_ += "EditionId=" + encodeURIComponent("" + editionId) + "&"; 
        if (editionIdSpecified !== undefined)
            url_ += "EditionIdSpecified=" + encodeURIComponent("" + editionIdSpecified) + "&"; 
        if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTenants(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenants(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTenantListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfTenantListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenants(response: Response): Observable<PagedResultDtoOfTenantListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfTenantListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTenantListDto.fromJS(resultData200) : new PagedResultDtoOfTenantListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfTenantListDto>(<any>null);
    }

    /**
     * 创建租户
     * @return Success
     */
    createTenant(input: CreateTenantInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/CreateTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateTenant(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateTenant(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 获取租户详情
     * @return Success
     */
    getTenantForEdit(id: number): Observable<GetTenantForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTenantForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenantForEdit(response_);
                } catch (e) {
                    return <Observable<GetTenantForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetTenantForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantForEdit(response: Response): Observable<GetTenantForEditOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetTenantForEditOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTenantForEditOutput.fromJS(resultData200) : new GetTenantForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetTenantForEditOutput>(<any>null);
    }

    /**
     * 更新租户
     * @return Success
     */
    updateTenant(input: TenantEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UpdateTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTenant(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTenant(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 删除租户
     * @return Success
     */
    deleteTenant(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/DeleteTenant?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteTenant(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteTenant(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 获取租户特性详情
     * @return Success
     */
    getTenantFeaturesForEdit(id: number): Observable<GetTenantFeaturesEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantFeaturesForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTenantFeaturesForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenantFeaturesForEdit(response_);
                } catch (e) {
                    return <Observable<GetTenantFeaturesEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetTenantFeaturesEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantFeaturesForEdit(response: Response): Observable<GetTenantFeaturesEditOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetTenantFeaturesEditOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTenantFeaturesEditOutput.fromJS(resultData200) : new GetTenantFeaturesEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetTenantFeaturesEditOutput>(<any>null);
    }

    /**
     * 更新租户特性
     * @return Success
     */
    updateTenantFeatures(input: UpdateTenantFeaturesInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UpdateTenantFeatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateTenantFeatures(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTenantFeatures(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTenantFeatures(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 重置租户详情
     * @return Success
     */
    resetTenantSpecificFeatures(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/ResetTenantSpecificFeatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processResetTenantSpecificFeatures(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processResetTenantSpecificFeatures(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processResetTenantSpecificFeatures(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 解锁租户
     * @return Success
     */
    unlockTenantAdmin(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UnlockTenantAdmin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUnlockTenantAdmin(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnlockTenantAdmin(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnlockTenantAdmin(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TenantDashboardServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getMemberActivity(): Observable<GetMemberActivityOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetMemberActivity";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMemberActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMemberActivity(response_);
                } catch (e) {
                    return <Observable<GetMemberActivityOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMemberActivityOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetMemberActivity(response: Response): Observable<GetMemberActivityOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetMemberActivityOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetMemberActivityOutput.fromJS(resultData200) : new GetMemberActivityOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetMemberActivityOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getDashboardData(salesSummaryDatePeriod: SalesSummaryDatePeriod): Observable<GetDashboardDataOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetDashboardData?";
        if (salesSummaryDatePeriod !== undefined)
            url_ += "SalesSummaryDatePeriod=" + encodeURIComponent("" + salesSummaryDatePeriod) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDashboardData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDashboardData(response_);
                } catch (e) {
                    return <Observable<GetDashboardDataOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDashboardDataOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetDashboardData(response: Response): Observable<GetDashboardDataOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetDashboardDataOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDashboardDataOutput.fromJS(resultData200) : new GetDashboardDataOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetDashboardDataOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesSummary(salesSummaryDatePeriod: SalesSummaryDatePeriod2): Observable<GetSalesSummaryOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetSalesSummary?";
        if (salesSummaryDatePeriod !== undefined)
            url_ += "SalesSummaryDatePeriod=" + encodeURIComponent("" + salesSummaryDatePeriod) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesSummary(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesSummary(response_);
                } catch (e) {
                    return <Observable<GetSalesSummaryOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetSalesSummaryOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesSummary(response: Response): Observable<GetSalesSummaryOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetSalesSummaryOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetSalesSummaryOutput.fromJS(resultData200) : new GetSalesSummaryOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetSalesSummaryOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getWorldMap(input: any): Observable<GetWorldMapOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetWorldMap?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetWorldMap(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetWorldMap(response_);
                } catch (e) {
                    return <Observable<GetWorldMapOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetWorldMapOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetWorldMap(response: Response): Observable<GetWorldMapOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetWorldMapOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetWorldMapOutput.fromJS(resultData200) : new GetWorldMapOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetWorldMapOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getServerStats(input: any): Observable<GetServerStatsOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetServerStats?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetServerStats(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetServerStats(response_);
                } catch (e) {
                    return <Observable<GetServerStatsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetServerStatsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetServerStats(response: Response): Observable<GetServerStatsOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetServerStatsOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetServerStatsOutput.fromJS(resultData200) : new GetServerStatsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetServerStatsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getGeneralStats(input: any): Observable<GetGeneralStatsOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetGeneralStats?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetGeneralStats(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetGeneralStats(response_);
                } catch (e) {
                    return <Observable<GetGeneralStatsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetGeneralStatsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetGeneralStats(response: Response): Observable<GetGeneralStatsOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetGeneralStatsOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetGeneralStatsOutput.fromJS(resultData200) : new GetGeneralStatsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetGeneralStatsOutput>(<any>null);
    }
}

@Injectable()
export class TenantInfoServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取租户基本信息
     * @return Success
     */
    getTenantInfoForEdit(): Observable<TenantInfoEditDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantInfo/GetTenantInfoForEdit";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTenantInfoForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenantInfoForEdit(response_);
                } catch (e) {
                    return <Observable<TenantInfoEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantInfoEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantInfoForEdit(response: Response): Observable<TenantInfoEditDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: TenantInfoEditDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantInfoEditDto.fromJS(resultData200) : new TenantInfoEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<TenantInfoEditDto>(<any>null);
    }

    /**
     * 更新租户资料
     * @return Success
     */
    updateTenantInfo(input: TenantInfoEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantInfo/UpdateTenantInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateTenantInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTenantInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTenantInfo(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TenantRegistrationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 租户注册
     * @return Success
     */
    registerTenant(input: RegisterTenantInput): Observable<RegisterTenantOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/RegisterTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processRegisterTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRegisterTenant(response_);
                } catch (e) {
                    return <Observable<RegisterTenantOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RegisterTenantOutput>><any>Observable.throw(response_);
        });
    }

    protected processRegisterTenant(response: Response): Observable<RegisterTenantOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: RegisterTenantOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterTenantOutput.fromJS(resultData200) : new RegisterTenantOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<RegisterTenantOutput>(<any>null);
    }

    /**
     * 权限重置
     * @return Success
     */
    grantAllPermissionsAsync(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/GrantAllPermissionsAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGrantAllPermissionsAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGrantAllPermissionsAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGrantAllPermissionsAsync(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TenantSettingsServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有设置
     * @return Success
     */
    getAllSettings(): Observable<TenantSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllSettings(response_);
                } catch (e) {
                    return <Observable<TenantSettingsEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantSettingsEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllSettings(response: Response): Observable<TenantSettingsEditDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: TenantSettingsEditDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantSettingsEditDto.fromJS(resultData200) : new TenantSettingsEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<TenantSettingsEditDto>(<any>null);
    }

    /**
     * 更新设置
     * @return Success
     */
    updateAllSettings(input: TenantSettingsEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateAllSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateAllSettings(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateAllSettings(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 清除Logo
     * @return Success
     */
    clearLogo(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/ClearLogo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processClearLogo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processClearLogo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processClearLogo(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 清除 Backgroud
     * @return Success
     */
    clearBackgroundPicture(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/ClearBackgroundPicture";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processClearBackgroundPicture(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processClearBackgroundPicture(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processClearBackgroundPicture(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 发送测试邮件
     * @return Success
     */
    sendTestEmail(input: SendTestEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendTestEmail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendTestEmail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendTestEmail(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TimingServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有时区
     * @defaultTimezoneScope 默认时区有效范围
     * @return Success
     */
    getTimezones(defaultTimezoneScope: DefaultTimezoneScope): Observable<ListResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/Timing/GetTimezones?";
        if (defaultTimezoneScope !== undefined)
            url_ += "DefaultTimezoneScope=" + encodeURIComponent("" + defaultTimezoneScope) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTimezones(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTimezones(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfNameValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfNameValueDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTimezones(response: Response): Observable<ListResultDtoOfNameValueDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: ListResultDtoOfNameValueDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfNameValueDto.fromJS(resultData200) : new ListResultDtoOfNameValueDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfNameValueDto>(<any>null);
    }

    /**
     * 获取所有时区(下拉框)
     * @selectedTimezoneId 选择时区Id
     * @return Success
     */
    getTimezoneComboboxItems(selectedTimezoneId: string): Observable<ComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Timing/GetTimezoneComboboxItems?";
        if (selectedTimezoneId !== undefined)
            url_ += "SelectedTimezoneId=" + encodeURIComponent("" + selectedTimezoneId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTimezoneComboboxItems(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTimezoneComboboxItems(response_);
                } catch (e) {
                    return <Observable<ComboboxItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ComboboxItemDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetTimezoneComboboxItems(response: Response): Observable<ComboboxItemDto[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: ComboboxItemDto[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ComboboxItemDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ComboboxItemDto[]>(<any>null);
    }
}

@Injectable()
export class TokenAuthServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 认证登陆
     * @return Success
     */
    authenticate(model: AuthenticateModel): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAuthenticate(response_);
                } catch (e) {
                    return <Observable<AuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processAuthenticate(response: Response): Observable<AuthenticateResultModel> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: AuthenticateResultModel = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<AuthenticateResultModel>(<any>null);
    }

    /**
     * 手机验证码认证登陆
     * @return Success
     */
    phoneNumAuthenticate(model: PhoneAuthenticateModel): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/PhoneNumAuthenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPhoneNumAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPhoneNumAuthenticate(response_);
                } catch (e) {
                    return <Observable<AuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processPhoneNumAuthenticate(response: Response): Observable<AuthenticateResultModel> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: AuthenticateResultModel = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<AuthenticateResultModel>(<any>null);
    }

    /**
     * 发送双重认证码
     * @return Success
     */
    sendTwoFactorAuthCode(model: SendTwoFactorAuthCodeModel): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/SendTwoFactorAuthCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendTwoFactorAuthCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendTwoFactorAuthCode(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendTwoFactorAuthCode(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 模拟(用户)认证
     * @return Success
     */
    impersonatedAuthenticate(impersonationToken: string): Observable<ImpersonatedAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ImpersonatedAuthenticate?";
        if (impersonationToken !== undefined)
            url_ += "impersonationToken=" + encodeURIComponent("" + impersonationToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processImpersonatedAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processImpersonatedAuthenticate(response_);
                } catch (e) {
                    return <Observable<ImpersonatedAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonatedAuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processImpersonatedAuthenticate(response: Response): Observable<ImpersonatedAuthenticateResultModel> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: ImpersonatedAuthenticateResultModel = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonatedAuthenticateResultModel.fromJS(resultData200) : new ImpersonatedAuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ImpersonatedAuthenticateResultModel>(<any>null);
    }

    /**
     * 关联用户认证
     * @return Success
     */
    linkedAccountAuthenticate(switchAccountToken: string): Observable<SwitchedAccountAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/LinkedAccountAuthenticate?";
        if (switchAccountToken !== undefined)
            url_ += "switchAccountToken=" + encodeURIComponent("" + switchAccountToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processLinkedAccountAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLinkedAccountAuthenticate(response_);
                } catch (e) {
                    return <Observable<SwitchedAccountAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<SwitchedAccountAuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processLinkedAccountAuthenticate(response: Response): Observable<SwitchedAccountAuthenticateResultModel> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: SwitchedAccountAuthenticateResultModel = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SwitchedAccountAuthenticateResultModel.fromJS(resultData200) : new SwitchedAccountAuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SwitchedAccountAuthenticateResultModel>(<any>null);
    }

    /**
     * 获取第三方登陆供应商
     * @return Success
     */
    getExternalAuthenticationProviders(): Observable<ExternalLoginProviderInfoModel[]> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetExternalAuthenticationProviders(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetExternalAuthenticationProviders(response_);
                } catch (e) {
                    return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(response_);
        });
    }

    protected processGetExternalAuthenticationProviders(response: Response): Observable<ExternalLoginProviderInfoModel[]> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: ExternalLoginProviderInfoModel[] = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ExternalLoginProviderInfoModel.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ExternalLoginProviderInfoModel[]>(<any>null);
    }

    /**
     * 第三方登陆认证
     * @return Success
     */
    externalAuthenticate(model: ExternalAuthenticateModel): Observable<ExternalAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processExternalAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processExternalAuthenticate(response_);
                } catch (e) {
                    return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processExternalAuthenticate(response: Response): Observable<ExternalAuthenticateResultModel> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: ExternalAuthenticateResultModel = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ExternalAuthenticateResultModel.fromJS(resultData200) : new ExternalAuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ExternalAuthenticateResultModel>(<any>null);
    }

    /**
     * 第三方账号绑定
     * @return Success
     */
    externalBinding(model: ExternalBindingModel): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalBinding";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processExternalBinding(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processExternalBinding(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processExternalBinding(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 第三方账号解绑
     * @return Success
     */
    externalUnBinding(model: ExternalUnBindingModel): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalUnBinding";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processExternalUnBinding(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processExternalUnBinding(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processExternalUnBinding(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 补充注册(机构用户,需要登录)
     * @return Success
     */
    supplementAuth(model: SupplementAuthModel): Observable<SupplementAuthResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/SupplementAuth";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSupplementAuth(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSupplementAuth(response_);
                } catch (e) {
                    return <Observable<SupplementAuthResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<SupplementAuthResultModel>><any>Observable.throw(response_);
        });
    }

    protected processSupplementAuth(response: Response): Observable<SupplementAuthResultModel> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: SupplementAuthResultModel = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SupplementAuthResultModel.fromJS(resultData200) : new SupplementAuthResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<SupplementAuthResultModel>(<any>null);
    }

    /**
     * 测试通知
     * @message 通知内容
     * @severity 通知类型
     * @return Success
     */
    testNotification(message: string, severity: string): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/TestNotification?";
        if (message !== undefined)
            url_ += "message=" + encodeURIComponent("" + message) + "&"; 
        if (severity !== undefined)
            url_ += "severity=" + encodeURIComponent("" + severity) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processTestNotification(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processTestNotification(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processTestNotification(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有用户
     * @userName 用户名称
     * @surname 姓
     * @email 邮箱
     * @isEmailConfirmed 是否确认邮箱(可空)
     * @phoneNumber 电话号码
     * @isPhoneConfirmed 是否确认手机(可空)
     * @isActive 激活(可空)
     * @permission 权限
     * @roleIds 角色
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getUsers(userName: string, surname: string, email: string, isEmailConfirmed: boolean, phoneNumber: string, isPhoneConfirmed: boolean, isActive: boolean, permission: string, roleIds: number[], sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsers?";
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (surname !== undefined)
            url_ += "Surname=" + encodeURIComponent("" + surname) + "&"; 
        if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&"; 
        if (isEmailConfirmed !== undefined)
            url_ += "IsEmailConfirmed=" + encodeURIComponent("" + isEmailConfirmed) + "&"; 
        if (phoneNumber !== undefined)
            url_ += "PhoneNumber=" + encodeURIComponent("" + phoneNumber) + "&"; 
        if (isPhoneConfirmed !== undefined)
            url_ += "IsPhoneConfirmed=" + encodeURIComponent("" + isPhoneConfirmed) + "&"; 
        if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&"; 
        if (permission !== undefined)
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&"; 
        if (roleIds !== undefined)
            roleIds && roleIds.forEach(item => { url_ += "RoleIds=" + encodeURIComponent("" + item) + "&"; });
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfUserListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfUserListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUsers(response: Response): Observable<PagedResultDtoOfUserListDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfUserListDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfUserListDto.fromJS(resultData200) : new PagedResultDtoOfUserListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfUserListDto>(<any>null);
    }

    /**
     * 导出用户到Excel
     * @return Success
     */
    getUsersToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsersToExcel";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUsersToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUsersToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUsersToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * 获取用户详情
     * @return Success
     */
    getUserForEdit(id: number): Observable<GetUserForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserForEdit(response_);
                } catch (e) {
                    return <Observable<GetUserForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetUserForEdit(response: Response): Observable<GetUserForEditOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetUserForEditOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserForEditOutput.fromJS(resultData200) : new GetUserForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetUserForEditOutput>(<any>null);
    }

    /**
     * 获取用户权限详情
     * @return Success
     */
    getUserPermissionsForEdit(id: number): Observable<GetUserPermissionsForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserPermissionsForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserPermissionsForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserPermissionsForEdit(response_);
                } catch (e) {
                    return <Observable<GetUserPermissionsForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserPermissionsForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetUserPermissionsForEdit(response: Response): Observable<GetUserPermissionsForEditOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetUserPermissionsForEditOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserPermissionsForEditOutput.fromJS(resultData200) : new GetUserPermissionsForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetUserPermissionsForEditOutput>(<any>null);
    }

    /**
     * 重置用户权限
     * @return Success
     */
    resetUserSpecificPermissions(input: EntityDtoOfInt64): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetUserSpecificPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processResetUserSpecificPermissions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processResetUserSpecificPermissions(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processResetUserSpecificPermissions(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 更新用户权限
     * @return Success
     */
    updateUserPermissions(input: UpdateUserPermissionsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UpdateUserPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateUserPermissions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateUserPermissions(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateUserPermissions(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 创建/更新用户
     * @return Success
     */
    createOrUpdateUser(input: CreateOrUpdateUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/CreateOrUpdateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateUser(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 删除用户
     * @return Success
     */
    deleteUser(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/DeleteUser?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteUser(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 解锁用户
     * @return Success
     */
    unlockUser(input: EntityDtoOfInt64): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UnlockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUnlockUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnlockUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnlockUser(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class UserConfigurationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有设置
     * @return Success
     */
    getAll(sourceName: string): Observable<void> {
        let url_ = this.baseUrl + "/api/UserConfiguration/GetAll?";
        if (sourceName !== undefined)
            url_ += "sourceName=" + encodeURIComponent("" + sourceName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAll(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAll(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetAll(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class UserLinkServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 关联用户
     * @return Success
     */
    linkToUser(input: LinkToUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/LinkToUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processLinkToUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLinkToUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processLinkToUser(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 获取所有关联用户
     * @sorting 排序字段 (eg:Id DESC)
     * @maxResultCount 最大结果数量(等同:PageSize)
     * @skipCount 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getLinkedUsers(sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfLinkedUserDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/GetLinkedUsers?";
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLinkedUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLinkedUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfLinkedUserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfLinkedUserDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLinkedUsers(response: Response): Observable<PagedResultDtoOfLinkedUserDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: PagedResultDtoOfLinkedUserDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfLinkedUserDto.fromJS(resultData200) : new PagedResultDtoOfLinkedUserDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<PagedResultDtoOfLinkedUserDto>(<any>null);
    }

    /**
     * 获取当前用户的关联用户列表
     * @return Success
     */
    getRecentlyUsedLinkedUsers(): Observable<ListResultDtoOfLinkedUserDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/GetRecentlyUsedLinkedUsers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRecentlyUsedLinkedUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRecentlyUsedLinkedUsers(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfLinkedUserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfLinkedUserDto>><any>Observable.throw(response_);
        });
    }

    protected processGetRecentlyUsedLinkedUsers(response: Response): Observable<ListResultDtoOfLinkedUserDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: ListResultDtoOfLinkedUserDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfLinkedUserDto.fromJS(resultData200) : new ListResultDtoOfLinkedUserDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfLinkedUserDto>(<any>null);
    }

    /**
     * 取消关联
     * @return Success
     */
    unlinkUser(input: UnlinkUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/UnlinkUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUnlinkUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnlinkUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnlinkUser(response: Response): Observable<void> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class UserLoginServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取最近登录尝试
     * @return Success
     */
    getRecentUserLoginAttempts(): Observable<ListResultDtoOfUserLoginAttemptDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLogin/GetRecentUserLoginAttempts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRecentUserLoginAttempts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRecentUserLoginAttempts(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfUserLoginAttemptDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfUserLoginAttemptDto>><any>Observable.throw(response_);
        });
    }

    protected processGetRecentUserLoginAttempts(response: Response): Observable<ListResultDtoOfUserLoginAttemptDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: ListResultDtoOfUserLoginAttemptDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfUserLoginAttemptDto.fromJS(resultData200) : new ListResultDtoOfUserLoginAttemptDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<ListResultDtoOfUserLoginAttemptDto>(<any>null);
    }
}

@Injectable()
export class WebLogServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取最近日志
     * @return Success
     */
    getLatestWebLogs(): Observable<GetLatestWebLogsOutput> {
        let url_ = this.baseUrl + "/api/services/app/WebLog/GetLatestWebLogs";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLatestWebLogs(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLatestWebLogs(response_);
                } catch (e) {
                    return <Observable<GetLatestWebLogsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLatestWebLogsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetLatestWebLogs(response: Response): Observable<GetLatestWebLogsOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetLatestWebLogsOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLatestWebLogsOutput.fromJS(resultData200) : new GetLatestWebLogsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetLatestWebLogsOutput>(<any>null);
    }

    /**
     * 下载日志
     * @return Success
     */
    downloadWebLogs(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/WebLog/DownloadWebLogs";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDownloadWebLogs(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDownloadWebLogs(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processDownloadWebLogs(response: Response): Observable<FileDto> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class WeChatJSServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取Js-sdk签名
     * @sourceUrl 当前页面Url
     * @nonceStr 随机字符串
     * @timestamp 时间戳
     * @return Success
     */
    getJsApiSignature(sourceUrl: string, nonceStr: string, timestamp: string): Observable<GetJsApiSignatureOutput> {
        let url_ = this.baseUrl + "/api/services/app/WeChatJS/GetJsApiSignature?";
        if (sourceUrl !== undefined)
            url_ += "SourceUrl=" + encodeURIComponent("" + sourceUrl) + "&"; 
        if (nonceStr !== undefined)
            url_ += "NonceStr=" + encodeURIComponent("" + nonceStr) + "&"; 
        if (timestamp !== undefined)
            url_ += "Timestamp=" + encodeURIComponent("" + timestamp) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetJsApiSignature(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetJsApiSignature(response_);
                } catch (e) {
                    return <Observable<GetJsApiSignatureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetJsApiSignatureOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetJsApiSignature(response: Response): Observable<GetJsApiSignatureOutput> {
        const status = response.status; 

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: GetJsApiSignatureOutput = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetJsApiSignatureOutput.fromJS(resultData200) : new GetJsApiSignatureOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<GetJsApiSignatureOutput>(<any>null);
    }
}

export class IsTenantAvailableInput implements IIsTenantAvailableInput {
    /** 租户系统名称 */
    tenancyName: string;

    constructor(data?: IIsTenantAvailableInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): IsTenantAvailableInput {
        let result = new IsTenantAvailableInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        return data; 
    }
}

export interface IIsTenantAvailableInput {
    /** 租户系统名称 */
    tenancyName: string;
}

export class IsTenantAvailableOutput implements IIsTenantAvailableOutput {
    /** 状态 */
    state: IsTenantAvailableOutputState;
    /** 租户Id */
    tenantId: number;

    constructor(data?: IIsTenantAvailableOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.state = data["state"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): IsTenantAvailableOutput {
        let result = new IsTenantAvailableOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IIsTenantAvailableOutput {
    /** 状态 */
    state: IsTenantAvailableOutputState;
    /** 租户Id */
    tenantId: number;
}

export class RegisterInput implements IRegisterInput {
    /** 名称 */
    name: string;
    /** 手机号码 */
    phoneNumber: string;
    /** 注册验证码 */
    registerCode: string;
    /** 密码 */
    password: string;

    constructor(data?: IRegisterInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.phoneNumber = data["phoneNumber"];
            this.registerCode = data["registerCode"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): RegisterInput {
        let result = new RegisterInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["registerCode"] = this.registerCode;
        data["password"] = this.password;
        return data; 
    }
}

export interface IRegisterInput {
    /** 名称 */
    name: string;
    /** 手机号码 */
    phoneNumber: string;
    /** 注册验证码 */
    registerCode: string;
    /** 密码 */
    password: string;
}

export class RegisterOutput implements IRegisterOutput {
    /** 能否登陆 */
    canLogin: boolean;

    constructor(data?: IRegisterOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.canLogin = data["canLogin"];
        }
    }

    static fromJS(data: any): RegisterOutput {
        let result = new RegisterOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        return data; 
    }
}

export interface IRegisterOutput {
    /** 能否登陆 */
    canLogin: boolean;
}

export class SendPasswordResetCodeInput implements ISendPasswordResetCodeInput {
    /** 需要重置密码的账号邮箱 */
    emailAddress: string;

    constructor(data?: ISendPasswordResetCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): SendPasswordResetCodeInput {
        let result = new SendPasswordResetCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

export interface ISendPasswordResetCodeInput {
    /** 需要重置密码的账号邮箱 */
    emailAddress: string;
}

export class ResetPasswordInput implements IResetPasswordInput {
    /** 用户Id */
    userId: number;
    /** 重置密码 Code */
    resetCode: string;
    /** 新密码 */
    password: string;

    constructor(data?: IResetPasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.resetCode = data["resetCode"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): ResetPasswordInput {
        let result = new ResetPasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["resetCode"] = this.resetCode;
        data["password"] = this.password;
        return data; 
    }
}

export interface IResetPasswordInput {
    /** 用户Id */
    userId: number;
    /** 重置密码 Code */
    resetCode: string;
    /** 新密码 */
    password: string;
}

export class ResetPasswordOutput implements IResetPasswordOutput {
    /** 能否登陆 */
    canLogin: boolean;
    /** 用户名 */
    userName: string;

    constructor(data?: IResetPasswordOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.canLogin = data["canLogin"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): ResetPasswordOutput {
        let result = new ResetPasswordOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface IResetPasswordOutput {
    /** 能否登陆 */
    canLogin: boolean;
    /** 用户名 */
    userName: string;
}

export class SendEmailActivationLinkInput implements ISendEmailActivationLinkInput {
    /** 待激活账号邮箱地址 */
    emailAddress: string;

    constructor(data?: ISendEmailActivationLinkInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): SendEmailActivationLinkInput {
        let result = new SendEmailActivationLinkInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

export interface ISendEmailActivationLinkInput {
    /** 待激活账号邮箱地址 */
    emailAddress: string;
}

export class ActivateEmailInput implements IActivateEmailInput {
    /** 用户Id */
    userId: number;
    /** 确认码 */
    confirmationCode: string;

    constructor(data?: IActivateEmailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.confirmationCode = data["confirmationCode"];
        }
    }

    static fromJS(data: any): ActivateEmailInput {
        let result = new ActivateEmailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["confirmationCode"] = this.confirmationCode;
        return data; 
    }
}

export interface IActivateEmailInput {
    /** 用户Id */
    userId: number;
    /** 确认码 */
    confirmationCode: string;
}

export class ImpersonateInput implements IImpersonateInput {
    /** 租户Id(可空) */
    tenantId: number;
    /** 用户Id(大于0) */
    userId: number;

    constructor(data?: IImpersonateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): ImpersonateInput {
        let result = new ImpersonateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IImpersonateInput {
    /** 租户Id(可空) */
    tenantId: number;
    /** 用户Id(大于0) */
    userId: number;
}

export class ImpersonateOutput implements IImpersonateOutput {
    /** 模拟登陆凭证 */
    impersonationToken: string;
    /** 租户系统名称 */
    tenancyName: string;

    constructor(data?: IImpersonateOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.impersonationToken = data["impersonationToken"];
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): ImpersonateOutput {
        let result = new ImpersonateOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["impersonationToken"] = this.impersonationToken;
        data["tenancyName"] = this.tenancyName;
        return data; 
    }
}

export interface IImpersonateOutput {
    /** 模拟登陆凭证 */
    impersonationToken: string;
    /** 租户系统名称 */
    tenancyName: string;
}

export class SwitchToLinkedAccountInput implements ISwitchToLinkedAccountInput {
    /** 租户Id(可空) */
    targetTenantId: number;
    /** 目标用户Id(大于0) */
    targetUserId: number;

    constructor(data?: ISwitchToLinkedAccountInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.targetTenantId = data["targetTenantId"];
            this.targetUserId = data["targetUserId"];
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountInput {
        let result = new SwitchToLinkedAccountInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetTenantId"] = this.targetTenantId;
        data["targetUserId"] = this.targetUserId;
        return data; 
    }
}

export interface ISwitchToLinkedAccountInput {
    /** 租户Id(可空) */
    targetTenantId: number;
    /** 目标用户Id(大于0) */
    targetUserId: number;
}

export class SwitchToLinkedAccountOutput implements ISwitchToLinkedAccountOutput {
    /** 切换账户令牌 */
    switchAccountToken: string;
    /** 租户系统名称 */
    tenancyName: string;

    constructor(data?: ISwitchToLinkedAccountOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.switchAccountToken = data["switchAccountToken"];
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountOutput {
        let result = new SwitchToLinkedAccountOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["switchAccountToken"] = this.switchAccountToken;
        data["tenancyName"] = this.tenancyName;
        return data; 
    }
}

export interface ISwitchToLinkedAccountOutput {
    /** 切换账户令牌 */
    switchAccountToken: string;
    /** 租户系统名称 */
    tenancyName: string;
}

export class PagedResultDtoOfAuditLogListDto implements IPagedResultDtoOfAuditLogListDto {
    totalCount: number;
    items: AuditLogListDto[];

    constructor(data?: IPagedResultDtoOfAuditLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(AuditLogListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfAuditLogListDto {
        let result = new PagedResultDtoOfAuditLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfAuditLogListDto {
    totalCount: number;
    items: AuditLogListDto[];
}

export class AuditLogListDto implements IAuditLogListDto {
    /** 用户Id */
    userId: number;
    /** 用户名 */
    userName: string;
    /** 模拟登陆租户Id */
    impersonatorTenantId: number;
    /** 模拟登陆用户Id */
    impersonatorUserId: number;
    /** 服务名 */
    serviceName: string;
    /** Api名 */
    methodName: string;
    /** 参数 */
    parameters: string;
    /** 执行时间 */
    executionTime: Moment;
    /** 执行时长 */
    executionDuration: number;
    /** 客户端地址 */
    clientIpAddress: string;
    /** 客户端名称 */
    clientName: string;
    /** 浏览器信息 */
    browserInfo: string;
    /** 异常 */
    exception: string;
    /** 自定义数据 */
    customData: string;
    id: number;

    constructor(data?: IAuditLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.userName = data["userName"];
            this.impersonatorTenantId = data["impersonatorTenantId"];
            this.impersonatorUserId = data["impersonatorUserId"];
            this.serviceName = data["serviceName"];
            this.methodName = data["methodName"];
            this.parameters = data["parameters"];
            this.executionTime = data["executionTime"] ? moment(data["executionTime"].toString()) : <any>undefined;
            this.executionDuration = data["executionDuration"];
            this.clientIpAddress = data["clientIpAddress"];
            this.clientName = data["clientName"];
            this.browserInfo = data["browserInfo"];
            this.exception = data["exception"];
            this.customData = data["customData"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): AuditLogListDto {
        let result = new AuditLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["impersonatorTenantId"] = this.impersonatorTenantId;
        data["impersonatorUserId"] = this.impersonatorUserId;
        data["serviceName"] = this.serviceName;
        data["methodName"] = this.methodName;
        data["parameters"] = this.parameters;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : <any>undefined;
        data["executionDuration"] = this.executionDuration;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["exception"] = this.exception;
        data["customData"] = this.customData;
        data["id"] = this.id;
        return data; 
    }
}

export interface IAuditLogListDto {
    /** 用户Id */
    userId: number;
    /** 用户名 */
    userName: string;
    /** 模拟登陆租户Id */
    impersonatorTenantId: number;
    /** 模拟登陆用户Id */
    impersonatorUserId: number;
    /** 服务名 */
    serviceName: string;
    /** Api名 */
    methodName: string;
    /** 参数 */
    parameters: string;
    /** 执行时间 */
    executionTime: Moment;
    /** 执行时长 */
    executionDuration: number;
    /** 客户端地址 */
    clientIpAddress: string;
    /** 客户端名称 */
    clientName: string;
    /** 浏览器信息 */
    browserInfo: string;
    /** 异常 */
    exception: string;
    /** 自定义数据 */
    customData: string;
    id: number;
}

export class FileDto implements IFileDto {
    /** 文件名称 */
    fileName: string;
    /** 文件类型 */
    fileType: string;
    /** 文件 Token */
    fileToken: string;

    constructor(data?: IFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["fileName"];
            this.fileType = data["fileType"];
            this.fileToken = data["fileToken"];
        }
    }

    static fromJS(data: any): FileDto {
        let result = new FileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileType"] = this.fileType;
        data["fileToken"] = this.fileToken;
        return data; 
    }
}

export interface IFileDto {
    /** 文件名称 */
    fileName: string;
    /** 文件类型 */
    fileType: string;
    /** 文件 Token */
    fileToken: string;
}

export class JoinBookingOutput implements IJoinBookingOutput {
    /** 机构信息 */
    organizationInfo: OrganizationInfoDto;
    /** 预约信息 */
    bookingInfo: JoinBookingInfoDto;
    /** 可预约时间 */
    availableDateItem: JoinBookingDataInfo[];

    constructor(data?: IJoinBookingOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationInfo = data["organizationInfo"] ? OrganizationInfoDto.fromJS(data["organizationInfo"]) : <any>undefined;
            this.bookingInfo = data["bookingInfo"] ? JoinBookingInfoDto.fromJS(data["bookingInfo"]) : <any>undefined;
            if (data["availableDateItem"] && data["availableDateItem"].constructor === Array) {
                this.availableDateItem = [];
                for (let item of data["availableDateItem"])
                    this.availableDateItem.push(JoinBookingDataInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JoinBookingOutput {
        let result = new JoinBookingOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationInfo"] = this.organizationInfo ? this.organizationInfo.toJSON() : <any>undefined;
        data["bookingInfo"] = this.bookingInfo ? this.bookingInfo.toJSON() : <any>undefined;
        if (this.availableDateItem && this.availableDateItem.constructor === Array) {
            data["availableDateItem"] = [];
            for (let item of this.availableDateItem)
                data["availableDateItem"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IJoinBookingOutput {
    /** 机构信息 */
    organizationInfo: OrganizationInfoDto;
    /** 预约信息 */
    bookingInfo: JoinBookingInfoDto;
    /** 可预约时间 */
    availableDateItem: JoinBookingDataInfo[];
}

/** 机构信息 */
export class OrganizationInfoDto implements IOrganizationInfoDto {
    /** 机构名称 */
    name: string;
    /** 描述/机构宣传语 */
    description: string;
    /** 宣传语 */
    tagline: string;
    /** logo */
    logoUrl: string;
    /** 背景图片 Id */
    backgroundPictureUrl: string;
    /** 门店图片地址 */
    outletPictureUrl: string;

    constructor(data?: IOrganizationInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.description = data["description"];
            this.tagline = data["tagline"];
            this.logoUrl = data["logoUrl"];
            this.backgroundPictureUrl = data["backgroundPictureUrl"];
            this.outletPictureUrl = data["outletPictureUrl"];
        }
    }

    static fromJS(data: any): OrganizationInfoDto {
        let result = new OrganizationInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["tagline"] = this.tagline;
        data["logoUrl"] = this.logoUrl;
        data["backgroundPictureUrl"] = this.backgroundPictureUrl;
        data["outletPictureUrl"] = this.outletPictureUrl;
        return data; 
    }
}

/** 机构信息 */
export interface IOrganizationInfoDto {
    /** 机构名称 */
    name: string;
    /** 描述/机构宣传语 */
    description: string;
    /** 宣传语 */
    tagline: string;
    /** logo */
    logoUrl: string;
    /** 背景图片 Id */
    backgroundPictureUrl: string;
    /** 门店图片地址 */
    outletPictureUrl: string;
}

export class JoinBookingInfoDto implements IJoinBookingInfoDto {
    orgName: string;
    /** 项目名称 */
    name: string;
    /** 项目描述 */
    description: string;
    /** 图片集合 */
    pictures: string[];
    /** 视频Url */
    videoUrl: string;
    /** 联系人名称 */
    contactorName: string;
    /** 联系人电话 */
    contactorPhoneNum: string;
    /** 联系人微信 */
    contactorWechatUrl: string;
    /** 门店名称 */
    outletName: string;
    /** 门店地址 */
    outletAddress: string;
    /** 门店经纬度 */
    outletLongitude: string;
    /** 是否需要填写性别 */
    needGender: boolean;
    /** 需要年龄 */
    needAge: boolean;
    /** 需要邮箱 */
    needEmail: boolean;

    constructor(data?: IJoinBookingInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orgName = data["orgName"];
            this.name = data["name"];
            this.description = data["description"];
            if (data["pictures"] && data["pictures"].constructor === Array) {
                this.pictures = [];
                for (let item of data["pictures"])
                    this.pictures.push(item);
            }
            this.videoUrl = data["videoUrl"];
            this.contactorName = data["contactorName"];
            this.contactorPhoneNum = data["contactorPhoneNum"];
            this.contactorWechatUrl = data["contactorWechatUrl"];
            this.outletName = data["outletName"];
            this.outletAddress = data["outletAddress"];
            this.outletLongitude = data["outletLongitude"];
            this.needGender = data["needGender"];
            this.needAge = data["needAge"];
            this.needEmail = data["needEmail"];
        }
    }

    static fromJS(data: any): JoinBookingInfoDto {
        let result = new JoinBookingInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orgName"] = this.orgName;
        data["name"] = this.name;
        data["description"] = this.description;
        if (this.pictures && this.pictures.constructor === Array) {
            data["pictures"] = [];
            for (let item of this.pictures)
                data["pictures"].push(item);
        }
        data["videoUrl"] = this.videoUrl;
        data["contactorName"] = this.contactorName;
        data["contactorPhoneNum"] = this.contactorPhoneNum;
        data["contactorWechatUrl"] = this.contactorWechatUrl;
        data["outletName"] = this.outletName;
        data["outletAddress"] = this.outletAddress;
        data["outletLongitude"] = this.outletLongitude;
        data["needGender"] = this.needGender;
        data["needAge"] = this.needAge;
        data["needEmail"] = this.needEmail;
        return data; 
    }
}

export interface IJoinBookingInfoDto {
    orgName: string;
    /** 项目名称 */
    name: string;
    /** 项目描述 */
    description: string;
    /** 图片集合 */
    pictures: string[];
    /** 视频Url */
    videoUrl: string;
    /** 联系人名称 */
    contactorName: string;
    /** 联系人电话 */
    contactorPhoneNum: string;
    /** 联系人微信 */
    contactorWechatUrl: string;
    /** 门店名称 */
    outletName: string;
    /** 门店地址 */
    outletAddress: string;
    /** 门店经纬度 */
    outletLongitude: string;
    /** 是否需要填写性别 */
    needGender: boolean;
    /** 需要年龄 */
    needAge: boolean;
    /** 需要邮箱 */
    needEmail: boolean;
}

/** 日期信息 */
export class JoinBookingDataInfo implements IJoinBookingDataInfo {
    /** 日期 */
    date: Moment;
    /** 可预约时间 */
    times: JoinBookingTimeInfo[];

    constructor(data?: IJoinBookingDataInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.date = data["date"] ? moment(data["date"].toString()) : <any>undefined;
            if (data["times"] && data["times"].constructor === Array) {
                this.times = [];
                for (let item of data["times"])
                    this.times.push(JoinBookingTimeInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JoinBookingDataInfo {
        let result = new JoinBookingDataInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        if (this.times && this.times.constructor === Array) {
            data["times"] = [];
            for (let item of this.times)
                data["times"].push(item.toJSON());
        }
        return data; 
    }
}

/** 日期信息 */
export interface IJoinBookingDataInfo {
    /** 日期 */
    date: Moment;
    /** 可预约时间 */
    times: JoinBookingTimeInfo[];
}

/** 时间信息 */
export class JoinBookingTimeInfo implements IJoinBookingTimeInfo {
    /** 时间 */
    hourOfDay: string;
    /** 最大可预约人数 */
    maxBookingNum: number;
    /** 最大可排队人数 */
    maxQueueNum: number;
    id: number;

    constructor(data?: IJoinBookingTimeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hourOfDay = data["hourOfDay"];
            this.maxBookingNum = data["maxBookingNum"];
            this.maxQueueNum = data["maxQueueNum"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): JoinBookingTimeInfo {
        let result = new JoinBookingTimeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hourOfDay"] = this.hourOfDay;
        data["maxBookingNum"] = this.maxBookingNum;
        data["maxQueueNum"] = this.maxQueueNum;
        data["id"] = this.id;
        return data; 
    }
}

/** 时间信息 */
export interface IJoinBookingTimeInfo {
    /** 时间 */
    hourOfDay: string;
    /** 最大可预约人数 */
    maxBookingNum: number;
    /** 最大可排队人数 */
    maxQueueNum: number;
    id: number;
}

export class JoinBookingInput implements IJoinBookingInput {
    /** 日期 */
    date: Moment;
    /** 时间项Id */
    bookingItemId: number;
    /** 姓名 */
    name: string;
    /** 手机号码 */
    phoneNumber: string;
    /** 邮箱地址 */
    emailAddress: string;
    /** 性别 */
    gender: JoinBookingInputGender;
    /** 年龄 */
    age: number;
    /** 预约人数 */
    subscriberNum: number;
    /** 预约来源 */
    source: JoinBookingInputSource;

    constructor(data?: IJoinBookingInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.date = data["date"] ? moment(data["date"].toString()) : <any>undefined;
            this.bookingItemId = data["bookingItemId"];
            this.name = data["name"];
            this.phoneNumber = data["phoneNumber"];
            this.emailAddress = data["emailAddress"];
            this.gender = data["gender"];
            this.age = data["age"];
            this.subscriberNum = data["subscriberNum"];
            this.source = data["source"];
        }
    }

    static fromJS(data: any): JoinBookingInput {
        let result = new JoinBookingInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["bookingItemId"] = this.bookingItemId;
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["emailAddress"] = this.emailAddress;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["subscriberNum"] = this.subscriberNum;
        data["source"] = this.source;
        return data; 
    }
}

export interface IJoinBookingInput {
    /** 日期 */
    date: Moment;
    /** 时间项Id */
    bookingItemId: number;
    /** 姓名 */
    name: string;
    /** 手机号码 */
    phoneNumber: string;
    /** 邮箱地址 */
    emailAddress: string;
    /** 性别 */
    gender: JoinBookingInputGender;
    /** 年龄 */
    age: number;
    /** 预约人数 */
    subscriberNum: number;
    /** 预约来源 */
    source: JoinBookingInputSource;
}

export class JoinBookingResultDto implements IJoinBookingResultDto {
    /** 预约项目名称 */
    bookingName: string;
    /** 预约客户 */
    bookingCustomer: string;
    /** 预约日期 */
    bookingDate: Moment;
    /** 预约时间 */
    hourOfDay: string;

    constructor(data?: IJoinBookingResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bookingName = data["bookingName"];
            this.bookingCustomer = data["bookingCustomer"];
            this.bookingDate = data["bookingDate"] ? moment(data["bookingDate"].toString()) : <any>undefined;
            this.hourOfDay = data["hourOfDay"];
        }
    }

    static fromJS(data: any): JoinBookingResultDto {
        let result = new JoinBookingResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingName"] = this.bookingName;
        data["bookingCustomer"] = this.bookingCustomer;
        data["bookingDate"] = this.bookingDate ? this.bookingDate.toISOString() : <any>undefined;
        data["hourOfDay"] = this.hourOfDay;
        return data; 
    }
}

export interface IJoinBookingResultDto {
    /** 预约项目名称 */
    bookingName: string;
    /** 预约客户 */
    bookingCustomer: string;
    /** 预约日期 */
    bookingDate: Moment;
    /** 预约时间 */
    hourOfDay: string;
}

export class BusCenterDataStatisticsDto implements IBusCenterDataStatisticsDto {
    bookingData: BookingDataStatisticsDto;
    bookingConverRates: BookingConverRateDto[];
    bookingAccessTimes: BookingAccessChannelDto[];
    bookingAccessSources: GetBookingAccessSourceOutput;
    bookingAccessRegions: BookingAccessRegionDto[];

    constructor(data?: IBusCenterDataStatisticsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bookingData = data["bookingData"] ? BookingDataStatisticsDto.fromJS(data["bookingData"]) : <any>undefined;
            if (data["bookingConverRates"] && data["bookingConverRates"].constructor === Array) {
                this.bookingConverRates = [];
                for (let item of data["bookingConverRates"])
                    this.bookingConverRates.push(BookingConverRateDto.fromJS(item));
            }
            if (data["bookingAccessTimes"] && data["bookingAccessTimes"].constructor === Array) {
                this.bookingAccessTimes = [];
                for (let item of data["bookingAccessTimes"])
                    this.bookingAccessTimes.push(BookingAccessChannelDto.fromJS(item));
            }
            this.bookingAccessSources = data["bookingAccessSources"] ? GetBookingAccessSourceOutput.fromJS(data["bookingAccessSources"]) : <any>undefined;
            if (data["bookingAccessRegions"] && data["bookingAccessRegions"].constructor === Array) {
                this.bookingAccessRegions = [];
                for (let item of data["bookingAccessRegions"])
                    this.bookingAccessRegions.push(BookingAccessRegionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BusCenterDataStatisticsDto {
        let result = new BusCenterDataStatisticsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingData"] = this.bookingData ? this.bookingData.toJSON() : <any>undefined;
        if (this.bookingConverRates && this.bookingConverRates.constructor === Array) {
            data["bookingConverRates"] = [];
            for (let item of this.bookingConverRates)
                data["bookingConverRates"].push(item.toJSON());
        }
        if (this.bookingAccessTimes && this.bookingAccessTimes.constructor === Array) {
            data["bookingAccessTimes"] = [];
            for (let item of this.bookingAccessTimes)
                data["bookingAccessTimes"].push(item.toJSON());
        }
        data["bookingAccessSources"] = this.bookingAccessSources ? this.bookingAccessSources.toJSON() : <any>undefined;
        if (this.bookingAccessRegions && this.bookingAccessRegions.constructor === Array) {
            data["bookingAccessRegions"] = [];
            for (let item of this.bookingAccessRegions)
                data["bookingAccessRegions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBusCenterDataStatisticsDto {
    bookingData: BookingDataStatisticsDto;
    bookingConverRates: BookingConverRateDto[];
    bookingAccessTimes: BookingAccessChannelDto[];
    bookingAccessSources: GetBookingAccessSourceOutput;
    bookingAccessRegions: BookingAccessRegionDto[];
}

export class BookingDataStatisticsDto implements IBookingDataStatisticsDto {
    /** 今日数据统计 */
    today: DailyDataStatistics;
    /** 历史数据统计 */
    history: DailyDataStatistics;

    constructor(data?: IBookingDataStatisticsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.today = data["today"] ? DailyDataStatistics.fromJS(data["today"]) : <any>undefined;
            this.history = data["history"] ? DailyDataStatistics.fromJS(data["history"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BookingDataStatisticsDto {
        let result = new BookingDataStatisticsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["today"] = this.today ? this.today.toJSON() : <any>undefined;
        data["history"] = this.history ? this.history.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBookingDataStatisticsDto {
    /** 今日数据统计 */
    today: DailyDataStatistics;
    /** 历史数据统计 */
    history: DailyDataStatistics;
}

export class BookingConverRateDto implements IBookingConverRateDto {
    /** 名称 */
    name: string;
    /** 应约人数 */
    bookingOrderNum: number;
    /** 访问量 */
    accessNum: number;

    constructor(data?: IBookingConverRateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.bookingOrderNum = data["bookingOrderNum"];
            this.accessNum = data["accessNum"];
        }
    }

    static fromJS(data: any): BookingConverRateDto {
        let result = new BookingConverRateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["bookingOrderNum"] = this.bookingOrderNum;
        data["accessNum"] = this.accessNum;
        return data; 
    }
}

export interface IBookingConverRateDto {
    /** 名称 */
    name: string;
    /** 应约人数 */
    bookingOrderNum: number;
    /** 访问量 */
    accessNum: number;
}

export class BookingAccessChannelDto implements IBookingAccessChannelDto {
    /** 渠道名称 */
    name: string;
    times: BookingAccessTimeDto[];

    constructor(data?: IBookingAccessChannelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["times"] && data["times"].constructor === Array) {
                this.times = [];
                for (let item of data["times"])
                    this.times.push(BookingAccessTimeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BookingAccessChannelDto {
        let result = new BookingAccessChannelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.times && this.times.constructor === Array) {
            data["times"] = [];
            for (let item of this.times)
                data["times"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBookingAccessChannelDto {
    /** 渠道名称 */
    name: string;
    times: BookingAccessTimeDto[];
}

export class GetBookingAccessSourceOutput implements IGetBookingAccessSourceOutput {
    /** 访问总量 */
    subAccessNum: number;
    /** 渠道 */
    channels: BookingAccessSourceDto[];

    constructor(data?: IGetBookingAccessSourceOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.subAccessNum = data["subAccessNum"];
            if (data["channels"] && data["channels"].constructor === Array) {
                this.channels = [];
                for (let item of data["channels"])
                    this.channels.push(BookingAccessSourceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetBookingAccessSourceOutput {
        let result = new GetBookingAccessSourceOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subAccessNum"] = this.subAccessNum;
        if (this.channels && this.channels.constructor === Array) {
            data["channels"] = [];
            for (let item of this.channels)
                data["channels"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetBookingAccessSourceOutput {
    /** 访问总量 */
    subAccessNum: number;
    /** 渠道 */
    channels: BookingAccessSourceDto[];
}

export class BookingAccessRegionDto implements IBookingAccessRegionDto {
    /** 地区名称 */
    name: string;
    /** 比例 */
    num: number;

    constructor(data?: IBookingAccessRegionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.num = data["num"];
        }
    }

    static fromJS(data: any): BookingAccessRegionDto {
        let result = new BookingAccessRegionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["num"] = this.num;
        return data; 
    }
}

export interface IBookingAccessRegionDto {
    /** 地区名称 */
    name: string;
    /** 比例 */
    num: number;
}

export class DailyDataStatistics implements IDailyDataStatistics {
    /** 查看人数 */
    uv: number;
    /** 查看次数 */
    pv: number;
    /** 预约数 */
    bookingNum: number;
    /** 分享数 */
    shareBookingNum: number;
    /** 预约人数 */
    bookingSubscriberNum: number;
    /** 已确认数 */
    confirmNum: number;
    /** 待确认数 */
    waitConfirmNum: number;
    /** 完成数 */
    complateNum: number;
    /** 取消数 */
    cancelNum: number;

    constructor(data?: IDailyDataStatistics) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.uv = data["uv"];
            this.pv = data["pv"];
            this.bookingNum = data["bookingNum"];
            this.shareBookingNum = data["shareBookingNum"];
            this.bookingSubscriberNum = data["bookingSubscriberNum"];
            this.confirmNum = data["confirmNum"];
            this.waitConfirmNum = data["waitConfirmNum"];
            this.complateNum = data["complateNum"];
            this.cancelNum = data["cancelNum"];
        }
    }

    static fromJS(data: any): DailyDataStatistics {
        let result = new DailyDataStatistics();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uv"] = this.uv;
        data["pv"] = this.pv;
        data["bookingNum"] = this.bookingNum;
        data["shareBookingNum"] = this.shareBookingNum;
        data["bookingSubscriberNum"] = this.bookingSubscriberNum;
        data["confirmNum"] = this.confirmNum;
        data["waitConfirmNum"] = this.waitConfirmNum;
        data["complateNum"] = this.complateNum;
        data["cancelNum"] = this.cancelNum;
        return data; 
    }
}

export interface IDailyDataStatistics {
    /** 查看人数 */
    uv: number;
    /** 查看次数 */
    pv: number;
    /** 预约数 */
    bookingNum: number;
    /** 分享数 */
    shareBookingNum: number;
    /** 预约人数 */
    bookingSubscriberNum: number;
    /** 已确认数 */
    confirmNum: number;
    /** 待确认数 */
    waitConfirmNum: number;
    /** 完成数 */
    complateNum: number;
    /** 取消数 */
    cancelNum: number;
}

export class BookingAccessTimeDto implements IBookingAccessTimeDto {
    /** 时间 */
    hour: string;
    /** 数量 */
    num: number;

    constructor(data?: IBookingAccessTimeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hour = data["hour"];
            this.num = data["num"];
        }
    }

    static fromJS(data: any): BookingAccessTimeDto {
        let result = new BookingAccessTimeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hour"] = this.hour;
        data["num"] = this.num;
        return data; 
    }
}

export interface IBookingAccessTimeDto {
    /** 时间 */
    hour: string;
    /** 数量 */
    num: number;
}

export class BookingAccessSourceDto implements IBookingAccessSourceDto {
    /** 渠道名称 */
    name: string;
    /** 比例 */
    num: number;

    constructor(data?: IBookingAccessSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.num = data["num"];
        }
    }

    static fromJS(data: any): BookingAccessSourceDto {
        let result = new BookingAccessSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["num"] = this.num;
        return data; 
    }
}

export interface IBookingAccessSourceDto {
    /** 渠道名称 */
    name: string;
    /** 比例 */
    num: number;
}

export class CurrentlyBookingDataDto implements ICurrentlyBookingDataDto {
    /** 日期 */
    date: string;
    /** 预约数量 */
    bookingNum: number;

    constructor(data?: ICurrentlyBookingDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.date = data["date"];
            this.bookingNum = data["bookingNum"];
        }
    }

    static fromJS(data: any): CurrentlyBookingDataDto {
        let result = new CurrentlyBookingDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["bookingNum"] = this.bookingNum;
        return data; 
    }
}

export interface ICurrentlyBookingDataDto {
    /** 日期 */
    date: string;
    /** 预约数量 */
    bookingNum: number;
}

export class GetBookingSaturationOutput implements IGetBookingSaturationOutput {
    /** 可预约总数 */
    subMaxBookingNum: number;
    /** 新预约人数 */
    subBookingNum: number;
    /** 预约 */
    bookings: OutletBookingListDto[];

    constructor(data?: IGetBookingSaturationOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.subMaxBookingNum = data["subMaxBookingNum"];
            this.subBookingNum = data["subBookingNum"];
            if (data["bookings"] && data["bookings"].constructor === Array) {
                this.bookings = [];
                for (let item of data["bookings"])
                    this.bookings.push(OutletBookingListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetBookingSaturationOutput {
        let result = new GetBookingSaturationOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subMaxBookingNum"] = this.subMaxBookingNum;
        data["subBookingNum"] = this.subBookingNum;
        if (this.bookings && this.bookings.constructor === Array) {
            data["bookings"] = [];
            for (let item of this.bookings)
                data["bookings"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetBookingSaturationOutput {
    /** 可预约总数 */
    subMaxBookingNum: number;
    /** 新预约人数 */
    subBookingNum: number;
    /** 预约 */
    bookings: OutletBookingListDto[];
}

/** 预约列表 */
export class OutletBookingListDto implements IOutletBookingListDto {
    /** 预约名称 */
    name: string;
    /** 最大预约人数(事项汇总) */
    subBookingNum: number;
    /** 最大可预约人数(事项汇总) */
    subMaxBookingNum: number;
    /** 排队人数(事项汇总) */
    subQueueNum: number;
    /** 已预约人数(事项汇总) */
    subBookedNum: number;
    id: number;

    constructor(data?: IOutletBookingListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.subBookingNum = data["subBookingNum"];
            this.subMaxBookingNum = data["subMaxBookingNum"];
            this.subQueueNum = data["subQueueNum"];
            this.subBookedNum = data["subBookedNum"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OutletBookingListDto {
        let result = new OutletBookingListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["subBookingNum"] = this.subBookingNum;
        data["subMaxBookingNum"] = this.subMaxBookingNum;
        data["subQueueNum"] = this.subQueueNum;
        data["subBookedNum"] = this.subBookedNum;
        data["id"] = this.id;
        return data; 
    }
}

/** 预约列表 */
export interface IOutletBookingListDto {
    /** 预约名称 */
    name: string;
    /** 最大预约人数(事项汇总) */
    subBookingNum: number;
    /** 最大可预约人数(事项汇总) */
    subMaxBookingNum: number;
    /** 排队人数(事项汇总) */
    subQueueNum: number;
    /** 已预约人数(事项汇总) */
    subBookedNum: number;
    id: number;
}

export class BookingHeatDto implements IBookingHeatDto {
    /** 时间 */
    hourOfDay: string;
    /** 预约数量 */
    bookingOrderNum: number;
    /** 预约订单比例 */
    bookingOrderRate: number;

    constructor(data?: IBookingHeatDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hourOfDay = data["hourOfDay"];
            this.bookingOrderNum = data["bookingOrderNum"];
            this.bookingOrderRate = data["bookingOrderRate"];
        }
    }

    static fromJS(data: any): BookingHeatDto {
        let result = new BookingHeatDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hourOfDay"] = this.hourOfDay;
        data["bookingOrderNum"] = this.bookingOrderNum;
        data["bookingOrderRate"] = this.bookingOrderRate;
        return data; 
    }
}

export interface IBookingHeatDto {
    /** 时间 */
    hourOfDay: string;
    /** 预约数量 */
    bookingOrderNum: number;
    /** 预约订单比例 */
    bookingOrderRate: number;
}

export class BookingAccessRecordInput implements IBookingAccessRecordInput {
    /** 是否是每天首次 */
    firstTimeOfDay: boolean;
    /** 访问Url */
    accessUrl: string;
    /** 预约Id */
    bookingId: number;
    /** 客户端操作系统名称 */
    osName: string;
    /** 设备品牌 */
    deviceBrand: string;
    /** 来源 */
    source: BookingAccessRecordInputSource;
    /** 微信内来源 */
    weChatSource: BookingAccessRecordInputWeChatSource;
    /** 是否是手机 */
    isWap: boolean;
    /** 停留时间 */
    standingTime: number;

    constructor(data?: IBookingAccessRecordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.firstTimeOfDay = data["firstTimeOfDay"];
            this.accessUrl = data["accessUrl"];
            this.bookingId = data["bookingId"];
            this.osName = data["osName"];
            this.deviceBrand = data["deviceBrand"];
            this.source = data["source"];
            this.weChatSource = data["weChatSource"];
            this.isWap = data["isWap"];
            this.standingTime = data["standingTime"];
        }
    }

    static fromJS(data: any): BookingAccessRecordInput {
        let result = new BookingAccessRecordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstTimeOfDay"] = this.firstTimeOfDay;
        data["accessUrl"] = this.accessUrl;
        data["bookingId"] = this.bookingId;
        data["osName"] = this.osName;
        data["deviceBrand"] = this.deviceBrand;
        data["source"] = this.source;
        data["weChatSource"] = this.weChatSource;
        data["isWap"] = this.isWap;
        data["standingTime"] = this.standingTime;
        return data; 
    }
}

export interface IBookingAccessRecordInput {
    /** 是否是每天首次 */
    firstTimeOfDay: boolean;
    /** 访问Url */
    accessUrl: string;
    /** 预约Id */
    bookingId: number;
    /** 客户端操作系统名称 */
    osName: string;
    /** 设备品牌 */
    deviceBrand: string;
    /** 来源 */
    source: BookingAccessRecordInputSource;
    /** 微信内来源 */
    weChatSource: BookingAccessRecordInputWeChatSource;
    /** 是否是手机 */
    isWap: boolean;
    /** 停留时间 */
    standingTime: number;
}

/** 分享预约记录 */
export class BookingShareRecordInput implements IBookingShareRecordInput {
    /** 预约Id */
    bookingId: number;
    /** 分享Url */
    shareUrl: string;
    /** 分享目标 */
    target: BookingShareRecordInputTarget;

    constructor(data?: IBookingShareRecordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bookingId = data["bookingId"];
            this.shareUrl = data["shareUrl"];
            this.target = data["target"];
        }
    }

    static fromJS(data: any): BookingShareRecordInput {
        let result = new BookingShareRecordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingId"] = this.bookingId;
        data["shareUrl"] = this.shareUrl;
        data["target"] = this.target;
        return data; 
    }
}

/** 分享预约记录 */
export interface IBookingShareRecordInput {
    /** 预约Id */
    bookingId: number;
    /** 分享Url */
    shareUrl: string;
    /** 分享目标 */
    target: BookingShareRecordInputTarget;
}

export class ListResultDtoOfCacheDto implements IListResultDtoOfCacheDto {
    items: CacheDto[];

    constructor(data?: IListResultDtoOfCacheDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(CacheDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfCacheDto {
        let result = new ListResultDtoOfCacheDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfCacheDto {
    items: CacheDto[];
}

export class CacheDto implements ICacheDto {
    /** 缓存名称 */
    name: string;

    constructor(data?: ICacheDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CacheDto {
        let result = new CacheDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ICacheDto {
    /** 缓存名称 */
    name: string;
}

export class EntityDtoOfString implements IEntityDtoOfString {
    id: string;

    constructor(data?: IEntityDtoOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfString {
        let result = new EntityDtoOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfString {
    id: string;
}

export class GetUserChatFriendsWithSettingsOutput implements IGetUserChatFriendsWithSettingsOutput {
    /** 服务器时间 */
    serverTime: Moment;
    /** 好友集合 */
    friends: FriendDto[];

    constructor(data?: IGetUserChatFriendsWithSettingsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.serverTime = data["serverTime"] ? moment(data["serverTime"].toString()) : <any>undefined;
            if (data["friends"] && data["friends"].constructor === Array) {
                this.friends = [];
                for (let item of data["friends"])
                    this.friends.push(FriendDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserChatFriendsWithSettingsOutput {
        let result = new GetUserChatFriendsWithSettingsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serverTime"] = this.serverTime ? this.serverTime.toISOString() : <any>undefined;
        if (this.friends && this.friends.constructor === Array) {
            data["friends"] = [];
            for (let item of this.friends)
                data["friends"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetUserChatFriendsWithSettingsOutput {
    /** 服务器时间 */
    serverTime: Moment;
    /** 好友集合 */
    friends: FriendDto[];
}

export class FriendDto implements IFriendDto {
    friendUserId: number;
    friendTenantId: number;
    friendUserName: string;
    friendTenancyName: string;
    friendProfilePictureId: number;
    unreadMessageCount: number;
    isOnline: boolean;
    state: FriendDtoState;

    constructor(data?: IFriendDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.friendUserId = data["friendUserId"];
            this.friendTenantId = data["friendTenantId"];
            this.friendUserName = data["friendUserName"];
            this.friendTenancyName = data["friendTenancyName"];
            this.friendProfilePictureId = data["friendProfilePictureId"];
            this.unreadMessageCount = data["unreadMessageCount"];
            this.isOnline = data["isOnline"];
            this.state = data["state"];
        }
    }

    static fromJS(data: any): FriendDto {
        let result = new FriendDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["friendUserId"] = this.friendUserId;
        data["friendTenantId"] = this.friendTenantId;
        data["friendUserName"] = this.friendUserName;
        data["friendTenancyName"] = this.friendTenancyName;
        data["friendProfilePictureId"] = this.friendProfilePictureId;
        data["unreadMessageCount"] = this.unreadMessageCount;
        data["isOnline"] = this.isOnline;
        data["state"] = this.state;
        return data; 
    }
}

export interface IFriendDto {
    friendUserId: number;
    friendTenantId: number;
    friendUserName: string;
    friendTenancyName: string;
    friendProfilePictureId: number;
    unreadMessageCount: number;
    isOnline: boolean;
    state: FriendDtoState;
}

export class ListResultDtoOfChatMessageDto implements IListResultDtoOfChatMessageDto {
    items: ChatMessageDto[];

    constructor(data?: IListResultDtoOfChatMessageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ChatMessageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfChatMessageDto {
        let result = new ListResultDtoOfChatMessageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfChatMessageDto {
    items: ChatMessageDto[];
}

/** 会话消息 */
export class ChatMessageDto implements IChatMessageDto {
    /** 用户Id */
    userId: number;
    /** 租户Id */
    tenantId: number;
    /** 目标用户(接收者Id) */
    targetUserId: number;
    /** 目标租户Id */
    targetTenantId: number;
    /** 会话来源 */
    side: ChatMessageDtoSide;
    /** 读取状态 */
    readState: ChatMessageDtoReadState;
    /** 消息内容 */
    message: string;
    /** 创建时间 */
    creationTime: Moment;
    id: number;

    constructor(data?: IChatMessageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
            this.targetUserId = data["targetUserId"];
            this.targetTenantId = data["targetTenantId"];
            this.side = data["side"];
            this.readState = data["readState"];
            this.message = data["message"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ChatMessageDto {
        let result = new ChatMessageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        data["targetUserId"] = this.targetUserId;
        data["targetTenantId"] = this.targetTenantId;
        data["side"] = this.side;
        data["readState"] = this.readState;
        data["message"] = this.message;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

/** 会话消息 */
export interface IChatMessageDto {
    /** 用户Id */
    userId: number;
    /** 租户Id */
    tenantId: number;
    /** 目标用户(接收者Id) */
    targetUserId: number;
    /** 目标租户Id */
    targetTenantId: number;
    /** 会话来源 */
    side: ChatMessageDtoSide;
    /** 读取状态 */
    readState: ChatMessageDtoReadState;
    /** 消息内容 */
    message: string;
    /** 创建时间 */
    creationTime: Moment;
    id: number;
}

export class MarkAllUnreadMessagesOfUserAsReadInput implements IMarkAllUnreadMessagesOfUserAsReadInput {
    /** 租户Id */
    tenantId: number;
    /** 用户Id */
    userId: number;

    constructor(data?: IMarkAllUnreadMessagesOfUserAsReadInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): MarkAllUnreadMessagesOfUserAsReadInput {
        let result = new MarkAllUnreadMessagesOfUserAsReadInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IMarkAllUnreadMessagesOfUserAsReadInput {
    /** 租户Id */
    tenantId: number;
    /** 用户Id */
    userId: number;
}

export class ListResultDtoOfSubscribableEditionComboboxItemDto implements IListResultDtoOfSubscribableEditionComboboxItemDto {
    items: SubscribableEditionComboboxItemDto[];

    constructor(data?: IListResultDtoOfSubscribableEditionComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SubscribableEditionComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfSubscribableEditionComboboxItemDto {
        let result = new ListResultDtoOfSubscribableEditionComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfSubscribableEditionComboboxItemDto {
    items: SubscribableEditionComboboxItemDto[];
}

export class SubscribableEditionComboboxItemDto implements ISubscribableEditionComboboxItemDto {
    isFree: boolean;
    value: string;
    displayText: string;
    isSelected: boolean;

    constructor(data?: ISubscribableEditionComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isFree = data["isFree"];
            this.value = data["value"];
            this.displayText = data["displayText"];
            this.isSelected = data["isSelected"];
        }
    }

    static fromJS(data: any): SubscribableEditionComboboxItemDto {
        let result = new SubscribableEditionComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isFree"] = this.isFree;
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data; 
    }
}

export interface ISubscribableEditionComboboxItemDto {
    isFree: boolean;
    value: string;
    displayText: string;
    isSelected: boolean;
}

export class FindUsersInput implements IFindUsersInput {
    /** 租户Id */
    tenantId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;

    constructor(data?: IFindUsersInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
            this.filter = data["filter"];
        }
    }

    static fromJS(data: any): FindUsersInput {
        let result = new FindUsersInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["filter"] = this.filter;
        return data; 
    }
}

export interface IFindUsersInput {
    /** 租户Id */
    tenantId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;
}

export class PagedResultDtoOfNameValueDto implements IPagedResultDtoOfNameValueDto {
    totalCount: number;
    items: NameValueDto[];

    constructor(data?: IPagedResultDtoOfNameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfNameValueDto {
        let result = new PagedResultDtoOfNameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfNameValueDto {
    totalCount: number;
    items: NameValueDto[];
}

export class NameValueDto implements INameValueDto {
    name: string;
    value: string;

    constructor(data?: INameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): NameValueDto {
        let result = new NameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface INameValueDto {
    name: string;
    value: string;
}

export class GetDefaultEditionNameOutput implements IGetDefaultEditionNameOutput {
    name: string;

    constructor(data?: IGetDefaultEditionNameOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): GetDefaultEditionNameOutput {
        let result = new GetDefaultEditionNameOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface IGetDefaultEditionNameOutput {
    name: string;
}

export class SelectListItemDto implements ISelectListItemDto {
    text: string;
    value: string;

    constructor(data?: ISelectListItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.text = data["text"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): SelectListItemDto {
        let result = new SelectListItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["value"] = this.value;
        return data; 
    }
}

export interface ISelectListItemDto {
    text: string;
    value: string;
}

export class ListResultDtoOfEditionListDto implements IListResultDtoOfEditionListDto {
    items: EditionListDto[];

    constructor(data?: IListResultDtoOfEditionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(EditionListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfEditionListDto {
        let result = new ListResultDtoOfEditionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfEditionListDto {
    items: EditionListDto[];
}

export class EditionListDto implements IEditionListDto {
    name: string;
    displayName: string;
    creationTime: Moment;
    id: number;

    constructor(data?: IEditionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EditionListDto {
        let result = new EditionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IEditionListDto {
    name: string;
    displayName: string;
    creationTime: Moment;
    id: number;
}

export class GetEditionEditOutput implements IGetEditionEditOutput {
    edition: EditionEditDto;
    featureValues: NameValueDto[];
    features: FlatFeatureDto[];

    constructor(data?: IGetEditionEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionEditDto.fromJS(data["edition"]) : <any>undefined;
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEditionEditOutput {
        let result = new GetEditionEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEditionEditOutput {
    edition: EditionEditDto;
    featureValues: NameValueDto[];
    features: FlatFeatureDto[];
}

/** 版本信息编辑 DTO */
export class EditionEditDto implements IEditionEditDto {
    /** Id(可空) */
    id: number;
    /** 显示名称 */
    displayName: string;
    /** 月价格 */
    monthlyPrice: number;
    /** 年价格 */
    annualPrice: number;
    /** 试用天数 */
    trialDayCount: number;
    waitingDayAfterExpire: number;
    /** 过期后 */
    expiringEditionId: number;

    constructor(data?: IEditionEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.monthlyPrice = data["monthlyPrice"];
            this.annualPrice = data["annualPrice"];
            this.trialDayCount = data["trialDayCount"];
            this.waitingDayAfterExpire = data["waitingDayAfterExpire"];
            this.expiringEditionId = data["expiringEditionId"];
        }
    }

    static fromJS(data: any): EditionEditDto {
        let result = new EditionEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["monthlyPrice"] = this.monthlyPrice;
        data["annualPrice"] = this.annualPrice;
        data["trialDayCount"] = this.trialDayCount;
        data["waitingDayAfterExpire"] = this.waitingDayAfterExpire;
        data["expiringEditionId"] = this.expiringEditionId;
        return data; 
    }
}

/** 版本信息编辑 DTO */
export interface IEditionEditDto {
    /** Id(可空) */
    id: number;
    /** 显示名称 */
    displayName: string;
    /** 月价格 */
    monthlyPrice: number;
    /** 年价格 */
    annualPrice: number;
    /** 试用天数 */
    trialDayCount: number;
    waitingDayAfterExpire: number;
    /** 过期后 */
    expiringEditionId: number;
}

export class FlatFeatureDto implements IFlatFeatureDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    defaultValue: string;
    inputType: FeatureInputTypeDto;

    constructor(data?: IFlatFeatureDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.defaultValue = data["defaultValue"];
            this.inputType = data["inputType"] ? FeatureInputTypeDto.fromJS(data["inputType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FlatFeatureDto {
        let result = new FlatFeatureDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["defaultValue"] = this.defaultValue;
        data["inputType"] = this.inputType ? this.inputType.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IFlatFeatureDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    defaultValue: string;
    inputType: FeatureInputTypeDto;
}

export class FeatureInputTypeDto implements IFeatureInputTypeDto {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;
    itemSource: LocalizableComboboxItemSourceDto;

    constructor(data?: IFeatureInputTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key] !== undefined ? data["attributes"][key] : {};
                }
            }
            this.validator = data["validator"] ? IValueValidator.fromJS(data["validator"]) : <any>undefined;
            this.itemSource = data["itemSource"] ? LocalizableComboboxItemSourceDto.fromJS(data["itemSource"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FeatureInputTypeDto {
        let result = new FeatureInputTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        data["validator"] = this.validator ? this.validator.toJSON() : <any>undefined;
        data["itemSource"] = this.itemSource ? this.itemSource.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IFeatureInputTypeDto {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;
    itemSource: LocalizableComboboxItemSourceDto;
}

export class IValueValidator implements IIValueValidator {
    name: string;
    attributes: { [key: string] : any; };

    constructor(data?: IIValueValidator) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key] !== undefined ? data["attributes"][key] : {};
                }
            }
        }
    }

    static fromJS(data: any): IValueValidator {
        let result = new IValueValidator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        return data; 
    }
}

export interface IIValueValidator {
    name: string;
    attributes: { [key: string] : any; };
}

export class LocalizableComboboxItemSourceDto implements ILocalizableComboboxItemSourceDto {
    items: LocalizableComboboxItemDto[];

    constructor(data?: ILocalizableComboboxItemSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LocalizableComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LocalizableComboboxItemSourceDto {
        let result = new LocalizableComboboxItemSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILocalizableComboboxItemSourceDto {
    items: LocalizableComboboxItemDto[];
}

export class LocalizableComboboxItemDto implements ILocalizableComboboxItemDto {
    value: string;
    displayText: string;

    constructor(data?: ILocalizableComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.displayText = data["displayText"];
        }
    }

    static fromJS(data: any): LocalizableComboboxItemDto {
        let result = new LocalizableComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        return data; 
    }
}

export interface ILocalizableComboboxItemDto {
    value: string;
    displayText: string;
}

export class CreateOrUpdateEditionDto implements ICreateOrUpdateEditionDto {
    edition: EditionEditDto = new EditionEditDto();
    featureValues: NameValueDto[] = [];

    constructor(data?: ICreateOrUpdateEditionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionEditDto.fromJS(data["edition"]) : new EditionEditDto();
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateEditionDto {
        let result = new CreateOrUpdateEditionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateOrUpdateEditionDto {
    edition: EditionEditDto;
    featureValues: NameValueDto[];
}

export class EditionsSelectOutput implements IEditionsSelectOutput {
    allFeatures: FlatFeatureSelectDto[];
    editionsWithFeatures: EditionWithFeaturesDto[];
    tenantEditionId: number;

    constructor(data?: IEditionsSelectOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["allFeatures"] && data["allFeatures"].constructor === Array) {
                this.allFeatures = [];
                for (let item of data["allFeatures"])
                    this.allFeatures.push(FlatFeatureSelectDto.fromJS(item));
            }
            if (data["editionsWithFeatures"] && data["editionsWithFeatures"].constructor === Array) {
                this.editionsWithFeatures = [];
                for (let item of data["editionsWithFeatures"])
                    this.editionsWithFeatures.push(EditionWithFeaturesDto.fromJS(item));
            }
            this.tenantEditionId = data["tenantEditionId"];
        }
    }

    static fromJS(data: any): EditionsSelectOutput {
        let result = new EditionsSelectOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.allFeatures && this.allFeatures.constructor === Array) {
            data["allFeatures"] = [];
            for (let item of this.allFeatures)
                data["allFeatures"].push(item.toJSON());
        }
        if (this.editionsWithFeatures && this.editionsWithFeatures.constructor === Array) {
            data["editionsWithFeatures"] = [];
            for (let item of this.editionsWithFeatures)
                data["editionsWithFeatures"].push(item.toJSON());
        }
        data["tenantEditionId"] = this.tenantEditionId;
        return data; 
    }
}

export interface IEditionsSelectOutput {
    allFeatures: FlatFeatureSelectDto[];
    editionsWithFeatures: EditionWithFeaturesDto[];
    tenantEditionId: number;
}

export class FlatFeatureSelectDto implements IFlatFeatureSelectDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    defaultValue: string;
    inputType: IInputType;
    textHtmlColor: string;

    constructor(data?: IFlatFeatureSelectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.defaultValue = data["defaultValue"];
            this.inputType = data["inputType"] ? IInputType.fromJS(data["inputType"]) : <any>undefined;
            this.textHtmlColor = data["textHtmlColor"];
        }
    }

    static fromJS(data: any): FlatFeatureSelectDto {
        let result = new FlatFeatureSelectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["defaultValue"] = this.defaultValue;
        data["inputType"] = this.inputType ? this.inputType.toJSON() : <any>undefined;
        data["textHtmlColor"] = this.textHtmlColor;
        return data; 
    }
}

export interface IFlatFeatureSelectDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    defaultValue: string;
    inputType: IInputType;
    textHtmlColor: string;
}

export class EditionWithFeaturesDto implements IEditionWithFeaturesDto {
    edition: EditionSelectDto;
    featureValues: NameValueDto[];

    constructor(data?: IEditionWithFeaturesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionSelectDto.fromJS(data["edition"]) : <any>undefined;
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EditionWithFeaturesDto {
        let result = new EditionWithFeaturesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEditionWithFeaturesDto {
    edition: EditionSelectDto;
    featureValues: NameValueDto[];
}

export class IInputType implements IIInputType {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;

    constructor(data?: IIInputType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key] !== undefined ? data["attributes"][key] : {};
                }
            }
            this.validator = data["validator"] ? IValueValidator.fromJS(data["validator"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IInputType {
        let result = new IInputType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        data["validator"] = this.validator ? this.validator.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIInputType {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;
}

export class EditionSelectDto implements IEditionSelectDto {
    id: number;
    /** 版本名称 */
    name: string;
    /** 显示名称 */
    displayName: string;
    /** 过期版本 */
    expiringEditionId: number;
    /** 月价格 */
    monthlyPrice: number;
    /** 年价格 */
    annualPrice: number;
    /** 试用天数 */
    trialDayCount: number;
    /** 过期后等待天数 */
    waitingDayAfterExpire: number;
    /** 是否免费 */
    isFree: boolean;
    additionalData: AdditionalData;

    constructor(data?: IEditionSelectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.expiringEditionId = data["expiringEditionId"];
            this.monthlyPrice = data["monthlyPrice"];
            this.annualPrice = data["annualPrice"];
            this.trialDayCount = data["trialDayCount"];
            this.waitingDayAfterExpire = data["waitingDayAfterExpire"];
            this.isFree = data["isFree"];
            this.additionalData = data["additionalData"] ? AdditionalData.fromJS(data["additionalData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EditionSelectDto {
        let result = new EditionSelectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["expiringEditionId"] = this.expiringEditionId;
        data["monthlyPrice"] = this.monthlyPrice;
        data["annualPrice"] = this.annualPrice;
        data["trialDayCount"] = this.trialDayCount;
        data["waitingDayAfterExpire"] = this.waitingDayAfterExpire;
        data["isFree"] = this.isFree;
        data["additionalData"] = this.additionalData ? this.additionalData.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEditionSelectDto {
    id: number;
    /** 版本名称 */
    name: string;
    /** 显示名称 */
    displayName: string;
    /** 过期版本 */
    expiringEditionId: number;
    /** 月价格 */
    monthlyPrice: number;
    /** 年价格 */
    annualPrice: number;
    /** 试用天数 */
    trialDayCount: number;
    /** 过期后等待天数 */
    waitingDayAfterExpire: number;
    /** 是否免费 */
    isFree: boolean;
    additionalData: AdditionalData;
}

/** 上传图片回调参数 */
export class UploadPictureInput implements IUploadPictureInput {
    /** 空间名 */
    bucket: string;
    /** 名称 */
    name: string;
    /** 图片 Key */
    key: string;
    /** 创建者id (回调用,必须大于0) */
    creatorUserId: number;
    /** 租户Id */
    tenantId: number;
    /** 分组Id */
    groupId: number;

    constructor(data?: IUploadPictureInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bucket = data["bucket"];
            this.name = data["name"];
            this.key = data["key"];
            this.creatorUserId = data["creatorUserId"];
            this.tenantId = data["tenantId"];
            this.groupId = data["groupId"];
        }
    }

    static fromJS(data: any): UploadPictureInput {
        let result = new UploadPictureInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bucket"] = this.bucket;
        data["name"] = this.name;
        data["key"] = this.key;
        data["creatorUserId"] = this.creatorUserId;
        data["tenantId"] = this.tenantId;
        data["groupId"] = this.groupId;
        return data; 
    }
}

/** 上传图片回调参数 */
export interface IUploadPictureInput {
    /** 空间名 */
    bucket: string;
    /** 名称 */
    name: string;
    /** 图片 Key */
    key: string;
    /** 创建者id (回调用,必须大于0) */
    creatorUserId: number;
    /** 租户Id */
    tenantId: number;
    /** 分组Id */
    groupId: number;
}

export class UploadPictureOutput implements IUploadPictureOutput {
    pictureId: number;
    originalUrl: string;

    constructor(data?: IUploadPictureOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.pictureId = data["pictureId"];
            this.originalUrl = data["originalUrl"];
        }
    }

    static fromJS(data: any): UploadPictureOutput {
        let result = new UploadPictureOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pictureId"] = this.pictureId;
        data["originalUrl"] = this.originalUrl;
        return data; 
    }
}

export interface IUploadPictureOutput {
    pictureId: number;
    originalUrl: string;
}

export class CreateFriendshipRequestInput implements ICreateFriendshipRequestInput {
    userId: number;
    tenantId: number;

    constructor(data?: ICreateFriendshipRequestInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreateFriendshipRequestInput {
        let result = new CreateFriendshipRequestInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreateFriendshipRequestInput {
    userId: number;
    tenantId: number;
}

export class CreateFriendshipRequestByUserNameInput implements ICreateFriendshipRequestByUserNameInput {
    tenancyName: string;
    userName: string;

    constructor(data?: ICreateFriendshipRequestByUserNameInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): CreateFriendshipRequestByUserNameInput {
        let result = new CreateFriendshipRequestByUserNameInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface ICreateFriendshipRequestByUserNameInput {
    tenancyName: string;
    userName: string;
}

export class BlockUserInput implements IBlockUserInput {
    userId: number;
    tenantId: number;

    constructor(data?: IBlockUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): BlockUserInput {
        let result = new BlockUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IBlockUserInput {
    userId: number;
    tenantId: number;
}

export class UnblockUserInput implements IUnblockUserInput {
    userId: number;
    tenantId: number;

    constructor(data?: IUnblockUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): UnblockUserInput {
        let result = new UnblockUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IUnblockUserInput {
    userId: number;
    tenantId: number;
}

export class AcceptFriendshipRequestInput implements IAcceptFriendshipRequestInput {
    userId: number;
    tenantId: number;

    constructor(data?: IAcceptFriendshipRequestInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): AcceptFriendshipRequestInput {
        let result = new AcceptFriendshipRequestInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IAcceptFriendshipRequestInput {
    userId: number;
    tenantId: number;
}

export class HostDashboardData implements IHostDashboardData {
    newTenantsCount: number;
    newSubscriptionAmount: number;
    dashboardPlaceholder1: number;
    dashboardPlaceholder2: number;
    incomeStatistics: IncomeStastistic[];
    editionStatistics: TenantEdition[];
    expiringTenants: ExpiringTenant[];
    recentTenants: RecentTenant[];
    maxExpiringTenantsShownCount: number;
    maxRecentTenantsShownCount: number;
    subscriptionEndAlertDayCount: number;
    recentTenantsDayCount: number;
    subscriptionEndDateStart: Moment;
    subscriptionEndDateEnd: Moment;
    tenantCreationStartDate: Moment;

    constructor(data?: IHostDashboardData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.newTenantsCount = data["newTenantsCount"];
            this.newSubscriptionAmount = data["newSubscriptionAmount"];
            this.dashboardPlaceholder1 = data["dashboardPlaceholder1"];
            this.dashboardPlaceholder2 = data["dashboardPlaceholder2"];
            if (data["incomeStatistics"] && data["incomeStatistics"].constructor === Array) {
                this.incomeStatistics = [];
                for (let item of data["incomeStatistics"])
                    this.incomeStatistics.push(IncomeStastistic.fromJS(item));
            }
            if (data["editionStatistics"] && data["editionStatistics"].constructor === Array) {
                this.editionStatistics = [];
                for (let item of data["editionStatistics"])
                    this.editionStatistics.push(TenantEdition.fromJS(item));
            }
            if (data["expiringTenants"] && data["expiringTenants"].constructor === Array) {
                this.expiringTenants = [];
                for (let item of data["expiringTenants"])
                    this.expiringTenants.push(ExpiringTenant.fromJS(item));
            }
            if (data["recentTenants"] && data["recentTenants"].constructor === Array) {
                this.recentTenants = [];
                for (let item of data["recentTenants"])
                    this.recentTenants.push(RecentTenant.fromJS(item));
            }
            this.maxExpiringTenantsShownCount = data["maxExpiringTenantsShownCount"];
            this.maxRecentTenantsShownCount = data["maxRecentTenantsShownCount"];
            this.subscriptionEndAlertDayCount = data["subscriptionEndAlertDayCount"];
            this.recentTenantsDayCount = data["recentTenantsDayCount"];
            this.subscriptionEndDateStart = data["subscriptionEndDateStart"] ? moment(data["subscriptionEndDateStart"].toString()) : <any>undefined;
            this.subscriptionEndDateEnd = data["subscriptionEndDateEnd"] ? moment(data["subscriptionEndDateEnd"].toString()) : <any>undefined;
            this.tenantCreationStartDate = data["tenantCreationStartDate"] ? moment(data["tenantCreationStartDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HostDashboardData {
        let result = new HostDashboardData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newTenantsCount"] = this.newTenantsCount;
        data["newSubscriptionAmount"] = this.newSubscriptionAmount;
        data["dashboardPlaceholder1"] = this.dashboardPlaceholder1;
        data["dashboardPlaceholder2"] = this.dashboardPlaceholder2;
        if (this.incomeStatistics && this.incomeStatistics.constructor === Array) {
            data["incomeStatistics"] = [];
            for (let item of this.incomeStatistics)
                data["incomeStatistics"].push(item.toJSON());
        }
        if (this.editionStatistics && this.editionStatistics.constructor === Array) {
            data["editionStatistics"] = [];
            for (let item of this.editionStatistics)
                data["editionStatistics"].push(item.toJSON());
        }
        if (this.expiringTenants && this.expiringTenants.constructor === Array) {
            data["expiringTenants"] = [];
            for (let item of this.expiringTenants)
                data["expiringTenants"].push(item.toJSON());
        }
        if (this.recentTenants && this.recentTenants.constructor === Array) {
            data["recentTenants"] = [];
            for (let item of this.recentTenants)
                data["recentTenants"].push(item.toJSON());
        }
        data["maxExpiringTenantsShownCount"] = this.maxExpiringTenantsShownCount;
        data["maxRecentTenantsShownCount"] = this.maxRecentTenantsShownCount;
        data["subscriptionEndAlertDayCount"] = this.subscriptionEndAlertDayCount;
        data["recentTenantsDayCount"] = this.recentTenantsDayCount;
        data["subscriptionEndDateStart"] = this.subscriptionEndDateStart ? this.subscriptionEndDateStart.toISOString() : <any>undefined;
        data["subscriptionEndDateEnd"] = this.subscriptionEndDateEnd ? this.subscriptionEndDateEnd.toISOString() : <any>undefined;
        data["tenantCreationStartDate"] = this.tenantCreationStartDate ? this.tenantCreationStartDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IHostDashboardData {
    newTenantsCount: number;
    newSubscriptionAmount: number;
    dashboardPlaceholder1: number;
    dashboardPlaceholder2: number;
    incomeStatistics: IncomeStastistic[];
    editionStatistics: TenantEdition[];
    expiringTenants: ExpiringTenant[];
    recentTenants: RecentTenant[];
    maxExpiringTenantsShownCount: number;
    maxRecentTenantsShownCount: number;
    subscriptionEndAlertDayCount: number;
    recentTenantsDayCount: number;
    subscriptionEndDateStart: Moment;
    subscriptionEndDateEnd: Moment;
    tenantCreationStartDate: Moment;
}

export class IncomeStastistic implements IIncomeStastistic {
    label: string;
    date: Moment;
    amount: number;

    constructor(data?: IIncomeStastistic) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.label = data["label"];
            this.date = data["date"] ? moment(data["date"].toString()) : <any>undefined;
            this.amount = data["amount"];
        }
    }

    static fromJS(data: any): IncomeStastistic {
        let result = new IncomeStastistic();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IIncomeStastistic {
    label: string;
    date: Moment;
    amount: number;
}

export class TenantEdition implements ITenantEdition {
    label: string;
    value: number;

    constructor(data?: ITenantEdition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.label = data["label"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): TenantEdition {
        let result = new TenantEdition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        return data; 
    }
}

export interface ITenantEdition {
    label: string;
    value: number;
}

export class ExpiringTenant implements IExpiringTenant {
    tenantName: string;
    remainingDayCount: number;

    constructor(data?: IExpiringTenant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantName = data["tenantName"];
            this.remainingDayCount = data["remainingDayCount"];
        }
    }

    static fromJS(data: any): ExpiringTenant {
        let result = new ExpiringTenant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantName"] = this.tenantName;
        data["remainingDayCount"] = this.remainingDayCount;
        return data; 
    }
}

export interface IExpiringTenant {
    tenantName: string;
    remainingDayCount: number;
}

export class RecentTenant implements IRecentTenant {
    id: number;
    name: string;
    creationTime: Moment;

    constructor(data?: IRecentTenant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RecentTenant {
        let result = new RecentTenant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IRecentTenant {
    id: number;
    name: string;
    creationTime: Moment;
}

export class GetIncomeStatisticsDataOutput implements IGetIncomeStatisticsDataOutput {
    incomeStatistics: IncomeStastistic[];

    constructor(data?: IGetIncomeStatisticsDataOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["incomeStatistics"] && data["incomeStatistics"].constructor === Array) {
                this.incomeStatistics = [];
                for (let item of data["incomeStatistics"])
                    this.incomeStatistics.push(IncomeStastistic.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetIncomeStatisticsDataOutput {
        let result = new GetIncomeStatisticsDataOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.incomeStatistics && this.incomeStatistics.constructor === Array) {
            data["incomeStatistics"] = [];
            for (let item of this.incomeStatistics)
                data["incomeStatistics"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetIncomeStatisticsDataOutput {
    incomeStatistics: IncomeStastistic[];
}

export class GetEditionTenantStatisticsOutput implements IGetEditionTenantStatisticsOutput {
    editionStatistics: TenantEdition[];

    constructor(data?: IGetEditionTenantStatisticsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["editionStatistics"] && data["editionStatistics"].constructor === Array) {
                this.editionStatistics = [];
                for (let item of data["editionStatistics"])
                    this.editionStatistics.push(TenantEdition.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEditionTenantStatisticsOutput {
        let result = new GetEditionTenantStatisticsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.editionStatistics && this.editionStatistics.constructor === Array) {
            data["editionStatistics"] = [];
            for (let item of this.editionStatistics)
                data["editionStatistics"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEditionTenantStatisticsOutput {
    editionStatistics: TenantEdition[];
}

export class HostSettingsEditDto implements IHostSettingsEditDto {
    /** 基本信息 */
    general: GeneralSettingsEditDto = new GeneralSettingsEditDto();
    /** 用户管理 */
    userManagement: HostUserManagementSettingsEditDto = new HostUserManagementSettingsEditDto();
    /** 邮件 */
    email: EmailSettingsEditDto = new EmailSettingsEditDto();
    /** 租户设置 */
    tenantManagement: TenantManagementSettingsEditDto = new TenantManagementSettingsEditDto();
    /** 安全 */
    security: SecuritySettingsEditDto = new SecuritySettingsEditDto();
    /** 第三方登陆 */
    externalAuthentication: ExternalAuthenticationEditDto = new ExternalAuthenticationEditDto();
    /** 短信设置 */
    smsSettings: SMSSettingsEditDto = new SMSSettingsEditDto();

    constructor(data?: IHostSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.general = data["general"] ? GeneralSettingsEditDto.fromJS(data["general"]) : new GeneralSettingsEditDto();
            this.userManagement = data["userManagement"] ? HostUserManagementSettingsEditDto.fromJS(data["userManagement"]) : new HostUserManagementSettingsEditDto();
            this.email = data["email"] ? EmailSettingsEditDto.fromJS(data["email"]) : new EmailSettingsEditDto();
            this.tenantManagement = data["tenantManagement"] ? TenantManagementSettingsEditDto.fromJS(data["tenantManagement"]) : new TenantManagementSettingsEditDto();
            this.security = data["security"] ? SecuritySettingsEditDto.fromJS(data["security"]) : new SecuritySettingsEditDto();
            this.externalAuthentication = data["externalAuthentication"] ? ExternalAuthenticationEditDto.fromJS(data["externalAuthentication"]) : new ExternalAuthenticationEditDto();
            this.smsSettings = data["smsSettings"] ? SMSSettingsEditDto.fromJS(data["smsSettings"]) : new SMSSettingsEditDto();
        }
    }

    static fromJS(data: any): HostSettingsEditDto {
        let result = new HostSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["general"] = this.general ? this.general.toJSON() : <any>undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJSON() : <any>undefined;
        data["email"] = this.email ? this.email.toJSON() : <any>undefined;
        data["tenantManagement"] = this.tenantManagement ? this.tenantManagement.toJSON() : <any>undefined;
        data["security"] = this.security ? this.security.toJSON() : <any>undefined;
        data["externalAuthentication"] = this.externalAuthentication ? this.externalAuthentication.toJSON() : <any>undefined;
        data["smsSettings"] = this.smsSettings ? this.smsSettings.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IHostSettingsEditDto {
    /** 基本信息 */
    general: GeneralSettingsEditDto;
    /** 用户管理 */
    userManagement: HostUserManagementSettingsEditDto;
    /** 邮件 */
    email: EmailSettingsEditDto;
    /** 租户设置 */
    tenantManagement: TenantManagementSettingsEditDto;
    /** 安全 */
    security: SecuritySettingsEditDto;
    /** 第三方登陆 */
    externalAuthentication: ExternalAuthenticationEditDto;
    /** 短信设置 */
    smsSettings: SMSSettingsEditDto;
}

export class GeneralSettingsEditDto implements IGeneralSettingsEditDto {
    /** 时区 */
    timezone: string;
    /** 这个值只用于比较用户默认时区 */
    timezoneForComparison: string;

    constructor(data?: IGeneralSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.timezone = data["timezone"];
            this.timezoneForComparison = data["timezoneForComparison"];
        }
    }

    static fromJS(data: any): GeneralSettingsEditDto {
        let result = new GeneralSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timezone"] = this.timezone;
        data["timezoneForComparison"] = this.timezoneForComparison;
        return data; 
    }
}

export interface IGeneralSettingsEditDto {
    /** 时区 */
    timezone: string;
    /** 这个值只用于比较用户默认时区 */
    timezoneForComparison: string;
}

export class HostUserManagementSettingsEditDto implements IHostUserManagementSettingsEditDto {
    /** 必须验证邮箱地址后才能登录 */
    isEmailConfirmationRequiredForLogin: boolean;

    constructor(data?: IHostUserManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"];
        }
    }

    static fromJS(data: any): HostUserManagementSettingsEditDto {
        let result = new HostUserManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin;
        return data; 
    }
}

export interface IHostUserManagementSettingsEditDto {
    /** 必须验证邮箱地址后才能登录 */
    isEmailConfirmationRequiredForLogin: boolean;
}

export class EmailSettingsEditDto implements IEmailSettingsEditDto {
    /** 默认发送邮箱 */
    defaultFromAddress: string;
    /** 默认发件人名字 */
    defaultFromDisplayName: string;
    /** SMTP 服务器地址 */
    smtpHost: string;
    /** SMTP 端口 */
    smtpPort: number;
    /** SMTP 用户名 */
    smtpUserName: string;
    /** SMTP 密码 */
    smtpPassword: string;
    /** SMTP 域名 */
    smtpDomain: string;
    /** 使用SSL */
    smtpEnableSsl: boolean;
    /** 默认身份验证 */
    smtpUseDefaultCredentials: boolean;

    constructor(data?: IEmailSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.defaultFromAddress = data["defaultFromAddress"];
            this.defaultFromDisplayName = data["defaultFromDisplayName"];
            this.smtpHost = data["smtpHost"];
            this.smtpPort = data["smtpPort"];
            this.smtpUserName = data["smtpUserName"];
            this.smtpPassword = data["smtpPassword"];
            this.smtpDomain = data["smtpDomain"];
            this.smtpEnableSsl = data["smtpEnableSsl"];
            this.smtpUseDefaultCredentials = data["smtpUseDefaultCredentials"];
        }
    }

    static fromJS(data: any): EmailSettingsEditDto {
        let result = new EmailSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultFromAddress"] = this.defaultFromAddress;
        data["defaultFromDisplayName"] = this.defaultFromDisplayName;
        data["smtpHost"] = this.smtpHost;
        data["smtpPort"] = this.smtpPort;
        data["smtpUserName"] = this.smtpUserName;
        data["smtpPassword"] = this.smtpPassword;
        data["smtpDomain"] = this.smtpDomain;
        data["smtpEnableSsl"] = this.smtpEnableSsl;
        data["smtpUseDefaultCredentials"] = this.smtpUseDefaultCredentials;
        return data; 
    }
}

export interface IEmailSettingsEditDto {
    /** 默认发送邮箱 */
    defaultFromAddress: string;
    /** 默认发件人名字 */
    defaultFromDisplayName: string;
    /** SMTP 服务器地址 */
    smtpHost: string;
    /** SMTP 端口 */
    smtpPort: number;
    /** SMTP 用户名 */
    smtpUserName: string;
    /** SMTP 密码 */
    smtpPassword: string;
    /** SMTP 域名 */
    smtpDomain: string;
    /** 使用SSL */
    smtpEnableSsl: boolean;
    /** 默认身份验证 */
    smtpUseDefaultCredentials: boolean;
}

/** 租户管理设置 */
export class TenantManagementSettingsEditDto implements ITenantManagementSettingsEditDto {
    /** 允许租户注册 */
    allowSelfRegistration: boolean;
    /** 新注册 */
    isNewRegisteredTenantActiveByDefault: boolean;
    useCaptchaOnRegistration: boolean;
    defaultEditionId: number;

    constructor(data?: ITenantManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.allowSelfRegistration = data["allowSelfRegistration"];
            this.isNewRegisteredTenantActiveByDefault = data["isNewRegisteredTenantActiveByDefault"];
            this.useCaptchaOnRegistration = data["useCaptchaOnRegistration"];
            this.defaultEditionId = data["defaultEditionId"];
        }
    }

    static fromJS(data: any): TenantManagementSettingsEditDto {
        let result = new TenantManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowSelfRegistration"] = this.allowSelfRegistration;
        data["isNewRegisteredTenantActiveByDefault"] = this.isNewRegisteredTenantActiveByDefault;
        data["useCaptchaOnRegistration"] = this.useCaptchaOnRegistration;
        data["defaultEditionId"] = this.defaultEditionId;
        return data; 
    }
}

/** 租户管理设置 */
export interface ITenantManagementSettingsEditDto {
    /** 允许租户注册 */
    allowSelfRegistration: boolean;
    /** 新注册 */
    isNewRegisteredTenantActiveByDefault: boolean;
    useCaptchaOnRegistration: boolean;
    defaultEditionId: number;
}

export class SecuritySettingsEditDto implements ISecuritySettingsEditDto {
    /** 使用默认设置 */
    useDefaultPasswordComplexitySettings: boolean;
    /** 密码复杂性 */
    passwordComplexity: PasswordComplexitySetting;
    /** 默认密码复杂性 */
    defaultPasswordComplexity: PasswordComplexitySetting;
    /** 用户锁定 */
    userLockOut: UserLockOutSettingsEditDto;
    /** 两步认证登录 */
    twoFactorLogin: TwoFactorLoginSettingsEditDto;
    /** 验证码设置 */
    verificationCode: VerificationCodeSettingsEditDto;

    constructor(data?: ISecuritySettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.useDefaultPasswordComplexitySettings = data["useDefaultPasswordComplexitySettings"];
            this.passwordComplexity = data["passwordComplexity"] ? PasswordComplexitySetting.fromJS(data["passwordComplexity"]) : <any>undefined;
            this.defaultPasswordComplexity = data["defaultPasswordComplexity"] ? PasswordComplexitySetting.fromJS(data["defaultPasswordComplexity"]) : <any>undefined;
            this.userLockOut = data["userLockOut"] ? UserLockOutSettingsEditDto.fromJS(data["userLockOut"]) : <any>undefined;
            this.twoFactorLogin = data["twoFactorLogin"] ? TwoFactorLoginSettingsEditDto.fromJS(data["twoFactorLogin"]) : <any>undefined;
            this.verificationCode = data["verificationCode"] ? VerificationCodeSettingsEditDto.fromJS(data["verificationCode"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SecuritySettingsEditDto {
        let result = new SecuritySettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["useDefaultPasswordComplexitySettings"] = this.useDefaultPasswordComplexitySettings;
        data["passwordComplexity"] = this.passwordComplexity ? this.passwordComplexity.toJSON() : <any>undefined;
        data["defaultPasswordComplexity"] = this.defaultPasswordComplexity ? this.defaultPasswordComplexity.toJSON() : <any>undefined;
        data["userLockOut"] = this.userLockOut ? this.userLockOut.toJSON() : <any>undefined;
        data["twoFactorLogin"] = this.twoFactorLogin ? this.twoFactorLogin.toJSON() : <any>undefined;
        data["verificationCode"] = this.verificationCode ? this.verificationCode.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISecuritySettingsEditDto {
    /** 使用默认设置 */
    useDefaultPasswordComplexitySettings: boolean;
    /** 密码复杂性 */
    passwordComplexity: PasswordComplexitySetting;
    /** 默认密码复杂性 */
    defaultPasswordComplexity: PasswordComplexitySetting;
    /** 用户锁定 */
    userLockOut: UserLockOutSettingsEditDto;
    /** 两步认证登录 */
    twoFactorLogin: TwoFactorLoginSettingsEditDto;
    /** 验证码设置 */
    verificationCode: VerificationCodeSettingsEditDto;
}

/** 第三方登陆配置 */
export class ExternalAuthenticationEditDto implements IExternalAuthenticationEditDto {
    /** 激活账号选项 Id Xiaoyuyue.Enums.UserActivationOption */
    userActivationId: number;
    /** 需要用户名 */
    requiredUserName: boolean;
    /** 需要邮箱 */
    requiredEmail: boolean;
    /** 需要手机 */
    requiredTelephone: boolean;
    /** 使用手机作为用户名 */
    useTelephoneforUsername: boolean;
    /** 第三方登陆供应商 */
    externalAuthenticationProviders: ExternalAuthenticationProviderEditDto[];

    constructor(data?: IExternalAuthenticationEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userActivationId = data["userActivationId"];
            this.requiredUserName = data["requiredUserName"];
            this.requiredEmail = data["requiredEmail"];
            this.requiredTelephone = data["requiredTelephone"];
            this.useTelephoneforUsername = data["useTelephoneforUsername"];
            if (data["externalAuthenticationProviders"] && data["externalAuthenticationProviders"].constructor === Array) {
                this.externalAuthenticationProviders = [];
                for (let item of data["externalAuthenticationProviders"])
                    this.externalAuthenticationProviders.push(ExternalAuthenticationProviderEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExternalAuthenticationEditDto {
        let result = new ExternalAuthenticationEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userActivationId"] = this.userActivationId;
        data["requiredUserName"] = this.requiredUserName;
        data["requiredEmail"] = this.requiredEmail;
        data["requiredTelephone"] = this.requiredTelephone;
        data["useTelephoneforUsername"] = this.useTelephoneforUsername;
        if (this.externalAuthenticationProviders && this.externalAuthenticationProviders.constructor === Array) {
            data["externalAuthenticationProviders"] = [];
            for (let item of this.externalAuthenticationProviders)
                data["externalAuthenticationProviders"].push(item.toJSON());
        }
        return data; 
    }
}

/** 第三方登陆配置 */
export interface IExternalAuthenticationEditDto {
    /** 激活账号选项 Id Xiaoyuyue.Enums.UserActivationOption */
    userActivationId: number;
    /** 需要用户名 */
    requiredUserName: boolean;
    /** 需要邮箱 */
    requiredEmail: boolean;
    /** 需要手机 */
    requiredTelephone: boolean;
    /** 使用手机作为用户名 */
    useTelephoneforUsername: boolean;
    /** 第三方登陆供应商 */
    externalAuthenticationProviders: ExternalAuthenticationProviderEditDto[];
}

export class SMSSettingsEditDto implements ISMSSettingsEditDto {
    /** 是否启用图形验证码 */
    useCaptchaToVerification: boolean;
    /** 注册模板 */
    registerVerificationTempId: number;
    /** 修改密码模板 */
    changePasswordVerificationTempId: number;
    /** 绑定手机模板 */
    unBindingPhoneVerificationTempId: number;
    /** 绑定手机模板 */
    bindingPhoneVerificationTempId: number;
    /** 登陆模板 */
    loginVerificationTempId: number;
    /** 手机验证模板 */
    phoneVerificationTempId: number;
    /** 可用短信模板 */
    availableSmsTemplates: SelectListItemDto[];

    constructor(data?: ISMSSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.useCaptchaToVerification = data["useCaptchaToVerification"];
            this.registerVerificationTempId = data["registerVerificationTempId"];
            this.changePasswordVerificationTempId = data["changePasswordVerificationTempId"];
            this.unBindingPhoneVerificationTempId = data["unBindingPhoneVerificationTempId"];
            this.bindingPhoneVerificationTempId = data["bindingPhoneVerificationTempId"];
            this.loginVerificationTempId = data["loginVerificationTempId"];
            this.phoneVerificationTempId = data["phoneVerificationTempId"];
            if (data["availableSmsTemplates"] && data["availableSmsTemplates"].constructor === Array) {
                this.availableSmsTemplates = [];
                for (let item of data["availableSmsTemplates"])
                    this.availableSmsTemplates.push(SelectListItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SMSSettingsEditDto {
        let result = new SMSSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["useCaptchaToVerification"] = this.useCaptchaToVerification;
        data["registerVerificationTempId"] = this.registerVerificationTempId;
        data["changePasswordVerificationTempId"] = this.changePasswordVerificationTempId;
        data["unBindingPhoneVerificationTempId"] = this.unBindingPhoneVerificationTempId;
        data["bindingPhoneVerificationTempId"] = this.bindingPhoneVerificationTempId;
        data["loginVerificationTempId"] = this.loginVerificationTempId;
        data["phoneVerificationTempId"] = this.phoneVerificationTempId;
        if (this.availableSmsTemplates && this.availableSmsTemplates.constructor === Array) {
            data["availableSmsTemplates"] = [];
            for (let item of this.availableSmsTemplates)
                data["availableSmsTemplates"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISMSSettingsEditDto {
    /** 是否启用图形验证码 */
    useCaptchaToVerification: boolean;
    /** 注册模板 */
    registerVerificationTempId: number;
    /** 修改密码模板 */
    changePasswordVerificationTempId: number;
    /** 绑定手机模板 */
    unBindingPhoneVerificationTempId: number;
    /** 绑定手机模板 */
    bindingPhoneVerificationTempId: number;
    /** 登陆模板 */
    loginVerificationTempId: number;
    /** 手机验证模板 */
    phoneVerificationTempId: number;
    /** 可用短信模板 */
    availableSmsTemplates: SelectListItemDto[];
}

export class PasswordComplexitySetting implements IPasswordComplexitySetting {
    requireDigit: boolean;
    requireLowercase: boolean;
    requireNonAlphanumeric: boolean;
    requireUppercase: boolean;
    requiredLength: number;

    constructor(data?: IPasswordComplexitySetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.requireDigit = data["requireDigit"];
            this.requireLowercase = data["requireLowercase"];
            this.requireNonAlphanumeric = data["requireNonAlphanumeric"];
            this.requireUppercase = data["requireUppercase"];
            this.requiredLength = data["requiredLength"];
        }
    }

    static fromJS(data: any): PasswordComplexitySetting {
        let result = new PasswordComplexitySetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requireDigit"] = this.requireDigit;
        data["requireLowercase"] = this.requireLowercase;
        data["requireNonAlphanumeric"] = this.requireNonAlphanumeric;
        data["requireUppercase"] = this.requireUppercase;
        data["requiredLength"] = this.requiredLength;
        return data; 
    }
}

export interface IPasswordComplexitySetting {
    requireDigit: boolean;
    requireLowercase: boolean;
    requireNonAlphanumeric: boolean;
    requireUppercase: boolean;
    requiredLength: number;
}

export class UserLockOutSettingsEditDto implements IUserLockOutSettingsEditDto {
    isEnabled: boolean;
    maxFailedAccessAttemptsBeforeLockout: number;
    defaultAccountLockoutSeconds: number;

    constructor(data?: IUserLockOutSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEnabled = data["isEnabled"];
            this.maxFailedAccessAttemptsBeforeLockout = data["maxFailedAccessAttemptsBeforeLockout"];
            this.defaultAccountLockoutSeconds = data["defaultAccountLockoutSeconds"];
        }
    }

    static fromJS(data: any): UserLockOutSettingsEditDto {
        let result = new UserLockOutSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled;
        data["maxFailedAccessAttemptsBeforeLockout"] = this.maxFailedAccessAttemptsBeforeLockout;
        data["defaultAccountLockoutSeconds"] = this.defaultAccountLockoutSeconds;
        return data; 
    }
}

export interface IUserLockOutSettingsEditDto {
    isEnabled: boolean;
    maxFailedAccessAttemptsBeforeLockout: number;
    defaultAccountLockoutSeconds: number;
}

export class TwoFactorLoginSettingsEditDto implements ITwoFactorLoginSettingsEditDto {
    isEnabledForApplication: boolean;
    isEnabled: boolean;
    isEmailProviderEnabled: boolean;
    isSmsProviderEnabled: boolean;
    isRememberBrowserEnabled: boolean;

    constructor(data?: ITwoFactorLoginSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEnabledForApplication = data["isEnabledForApplication"];
            this.isEnabled = data["isEnabled"];
            this.isEmailProviderEnabled = data["isEmailProviderEnabled"];
            this.isSmsProviderEnabled = data["isSmsProviderEnabled"];
            this.isRememberBrowserEnabled = data["isRememberBrowserEnabled"];
        }
    }

    static fromJS(data: any): TwoFactorLoginSettingsEditDto {
        let result = new TwoFactorLoginSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabledForApplication"] = this.isEnabledForApplication;
        data["isEnabled"] = this.isEnabled;
        data["isEmailProviderEnabled"] = this.isEmailProviderEnabled;
        data["isSmsProviderEnabled"] = this.isSmsProviderEnabled;
        data["isRememberBrowserEnabled"] = this.isRememberBrowserEnabled;
        return data; 
    }
}

export interface ITwoFactorLoginSettingsEditDto {
    isEnabledForApplication: boolean;
    isEnabled: boolean;
    isEmailProviderEnabled: boolean;
    isSmsProviderEnabled: boolean;
    isRememberBrowserEnabled: boolean;
}

export class VerificationCodeSettingsEditDto implements IVerificationCodeSettingsEditDto {
    /** 启用验证码 */
    isEnabled: boolean;
    /** 有效秒数 */
    availableSecond: number;
    /** 验证码最小发送间隔 */
    minimumSendInterval: number;

    constructor(data?: IVerificationCodeSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEnabled = data["isEnabled"];
            this.availableSecond = data["availableSecond"];
            this.minimumSendInterval = data["minimumSendInterval"];
        }
    }

    static fromJS(data: any): VerificationCodeSettingsEditDto {
        let result = new VerificationCodeSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled;
        data["availableSecond"] = this.availableSecond;
        data["minimumSendInterval"] = this.minimumSendInterval;
        return data; 
    }
}

export interface IVerificationCodeSettingsEditDto {
    /** 启用验证码 */
    isEnabled: boolean;
    /** 有效秒数 */
    availableSecond: number;
    /** 验证码最小发送间隔 */
    minimumSendInterval: number;
}

export class ExternalAuthenticationProviderEditDto implements IExternalAuthenticationProviderEditDto {
    /** 第三方登陆名称 */
    providerName: string;
    /** 启用 */
    isEnabled: boolean;
    /** App id */
    appId: string;
    /** App secret */
    appSecret: string;
    /** 在登录页面显示 */
    showOnLoginPage: boolean;

    constructor(data?: IExternalAuthenticationProviderEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.providerName = data["providerName"];
            this.isEnabled = data["isEnabled"];
            this.appId = data["appId"];
            this.appSecret = data["appSecret"];
            this.showOnLoginPage = data["showOnLoginPage"];
        }
    }

    static fromJS(data: any): ExternalAuthenticationProviderEditDto {
        let result = new ExternalAuthenticationProviderEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["providerName"] = this.providerName;
        data["isEnabled"] = this.isEnabled;
        data["appId"] = this.appId;
        data["appSecret"] = this.appSecret;
        data["showOnLoginPage"] = this.showOnLoginPage;
        return data; 
    }
}

export interface IExternalAuthenticationProviderEditDto {
    /** 第三方登陆名称 */
    providerName: string;
    /** 启用 */
    isEnabled: boolean;
    /** App id */
    appId: string;
    /** App secret */
    appSecret: string;
    /** 在登录页面显示 */
    showOnLoginPage: boolean;
}

export class SendTestEmailInput implements ISendTestEmailInput {
    /** 目标邮箱地址 */
    emailAddress: string;

    constructor(data?: ISendTestEmailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): SendTestEmailInput {
        let result = new SendTestEmailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

export interface ISendTestEmailInput {
    /** 目标邮箱地址 */
    emailAddress: string;
}

export class GetLanguagesOutput implements IGetLanguagesOutput {
    defaultLanguageName: string;
    items: ApplicationLanguageListDto[];

    constructor(data?: IGetLanguagesOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.defaultLanguageName = data["defaultLanguageName"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ApplicationLanguageListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLanguagesOutput {
        let result = new GetLanguagesOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultLanguageName"] = this.defaultLanguageName;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetLanguagesOutput {
    defaultLanguageName: string;
    items: ApplicationLanguageListDto[];
}

export class ApplicationLanguageListDto implements IApplicationLanguageListDto {
    tenantId: number;
    name: string;
    displayName: string;
    icon: string;
    isDisabled: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: Moment;
    lastModificationTime: Moment;
    lastModifierUserId: number;
    creationTime: Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: IApplicationLanguageListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.icon = data["icon"];
            this.isDisabled = data["isDisabled"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ApplicationLanguageListDto {
        let result = new ApplicationLanguageListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["icon"] = this.icon;
        data["isDisabled"] = this.isDisabled;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IApplicationLanguageListDto {
    tenantId: number;
    name: string;
    displayName: string;
    icon: string;
    isDisabled: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: Moment;
    lastModificationTime: Moment;
    lastModifierUserId: number;
    creationTime: Moment;
    creatorUserId: number;
    id: number;
}

export class GetLanguageForEditOutput implements IGetLanguageForEditOutput {
    language: ApplicationLanguageEditDto;
    languageNames: ComboboxItemDto[];
    flags: ComboboxItemDto[];

    constructor(data?: IGetLanguageForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.language = data["language"] ? ApplicationLanguageEditDto.fromJS(data["language"]) : <any>undefined;
            if (data["languageNames"] && data["languageNames"].constructor === Array) {
                this.languageNames = [];
                for (let item of data["languageNames"])
                    this.languageNames.push(ComboboxItemDto.fromJS(item));
            }
            if (data["flags"] && data["flags"].constructor === Array) {
                this.flags = [];
                for (let item of data["flags"])
                    this.flags.push(ComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLanguageForEditOutput {
        let result = new GetLanguageForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        if (this.languageNames && this.languageNames.constructor === Array) {
            data["languageNames"] = [];
            for (let item of this.languageNames)
                data["languageNames"].push(item.toJSON());
        }
        if (this.flags && this.flags.constructor === Array) {
            data["flags"] = [];
            for (let item of this.flags)
                data["flags"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetLanguageForEditOutput {
    language: ApplicationLanguageEditDto;
    languageNames: ComboboxItemDto[];
    flags: ComboboxItemDto[];
}

export class ApplicationLanguageEditDto implements IApplicationLanguageEditDto {
    id: number;
    name: string;
    icon: string;
    /** Mapped from Language.IsDisabled with using manual mapping in CustomDtoMapper.cs */
    isEnabled: boolean;

    constructor(data?: IApplicationLanguageEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.icon = data["icon"];
            this.isEnabled = data["isEnabled"];
        }
    }

    static fromJS(data: any): ApplicationLanguageEditDto {
        let result = new ApplicationLanguageEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["icon"] = this.icon;
        data["isEnabled"] = this.isEnabled;
        return data; 
    }
}

export interface IApplicationLanguageEditDto {
    id: number;
    name: string;
    icon: string;
    /** Mapped from Language.IsDisabled with using manual mapping in CustomDtoMapper.cs */
    isEnabled: boolean;
}

export class ComboboxItemDto implements IComboboxItemDto {
    value: string;
    displayText: string;
    isSelected: boolean;

    constructor(data?: IComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.displayText = data["displayText"];
            this.isSelected = data["isSelected"];
        }
    }

    static fromJS(data: any): ComboboxItemDto {
        let result = new ComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data; 
    }
}

export interface IComboboxItemDto {
    value: string;
    displayText: string;
    isSelected: boolean;
}

export class CreateOrUpdateLanguageInput implements ICreateOrUpdateLanguageInput {
    language: ApplicationLanguageEditDto = new ApplicationLanguageEditDto();

    constructor(data?: ICreateOrUpdateLanguageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.language = data["language"] ? ApplicationLanguageEditDto.fromJS(data["language"]) : new ApplicationLanguageEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateLanguageInput {
        let result = new CreateOrUpdateLanguageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateOrUpdateLanguageInput {
    language: ApplicationLanguageEditDto;
}

export class SetDefaultLanguageInput implements ISetDefaultLanguageInput {
    name: string;

    constructor(data?: ISetDefaultLanguageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): SetDefaultLanguageInput {
        let result = new SetDefaultLanguageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ISetDefaultLanguageInput {
    name: string;
}

export class PagedResultDtoOfLanguageTextListDto implements IPagedResultDtoOfLanguageTextListDto {
    totalCount: number;
    items: LanguageTextListDto[];

    constructor(data?: IPagedResultDtoOfLanguageTextListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LanguageTextListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLanguageTextListDto {
        let result = new PagedResultDtoOfLanguageTextListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfLanguageTextListDto {
    totalCount: number;
    items: LanguageTextListDto[];
}

export class LanguageTextListDto implements ILanguageTextListDto {
    key: string;
    baseValue: string;
    targetValue: string;

    constructor(data?: ILanguageTextListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.key = data["key"];
            this.baseValue = data["baseValue"];
            this.targetValue = data["targetValue"];
        }
    }

    static fromJS(data: any): LanguageTextListDto {
        let result = new LanguageTextListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["baseValue"] = this.baseValue;
        data["targetValue"] = this.targetValue;
        return data; 
    }
}

export interface ILanguageTextListDto {
    key: string;
    baseValue: string;
    targetValue: string;
}

export class UpdateLanguageTextInput implements IUpdateLanguageTextInput {
    /** 语言名称 */
    languageName: string;
    /** 源名称 */
    sourceName: string;
    /** 唯一标识符(Key) */
    key: string;
    /** 值 */
    value: string;

    constructor(data?: IUpdateLanguageTextInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.languageName = data["languageName"];
            this.sourceName = data["sourceName"];
            this.key = data["key"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): UpdateLanguageTextInput {
        let result = new UpdateLanguageTextInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        data["sourceName"] = this.sourceName;
        data["key"] = this.key;
        data["value"] = this.value;
        return data; 
    }
}

export interface IUpdateLanguageTextInput {
    /** 语言名称 */
    languageName: string;
    /** 源名称 */
    sourceName: string;
    /** 唯一标识符(Key) */
    key: string;
    /** 值 */
    value: string;
}

export class TokensListDto implements ITokensListDto {
    name: string;
    value: string;

    constructor(data?: ITokensListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): TokensListDto {
        let result = new TokensListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface ITokensListDto {
    name: string;
    value: string;
}

export class GetNotificationsOutput implements IGetNotificationsOutput {
    /** 唯独消息数量 */
    unreadCount: number;
    totalCount: number;
    items: UserNotification[];

    constructor(data?: IGetNotificationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unreadCount = data["unreadCount"];
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserNotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationsOutput {
        let result = new GetNotificationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unreadCount"] = this.unreadCount;
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetNotificationsOutput {
    /** 唯独消息数量 */
    unreadCount: number;
    totalCount: number;
    items: UserNotification[];
}

export class UserNotification implements IUserNotification {
    tenantId: number;
    userId: number;
    state: UserNotificationState;
    notification: TenantNotification;
    id: string;

    constructor(data?: IUserNotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.state = data["state"];
            this.notification = data["notification"] ? TenantNotification.fromJS(data["notification"]) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserNotification {
        let result = new UserNotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["state"] = this.state;
        data["notification"] = this.notification ? this.notification.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserNotification {
    tenantId: number;
    userId: number;
    state: UserNotificationState;
    notification: TenantNotification;
    id: string;
}

export class TenantNotification implements ITenantNotification {
    tenantId: number;
    notificationName: string;
    data: NotificationData;
    entityType: string;
    entityTypeName: string;
    entityId: any;
    severity: TenantNotificationSeverity;
    creationTime: Moment;
    id: string;

    constructor(data?: ITenantNotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.notificationName = data["notificationName"];
            this.data = data["data"] ? NotificationData.fromJS(data["data"]) : <any>undefined;
            this.entityType = data["entityType"];
            this.entityTypeName = data["entityTypeName"];
            if (data["entityId"]) {
                this.entityId = {};
                for (let key in data["entityId"]) {
                    if (data["entityId"].hasOwnProperty(key))
                        this.entityId[key] = data["entityId"][key];
                }
            }
            this.severity = data["severity"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantNotification {
        let result = new TenantNotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["notificationName"] = this.notificationName;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["entityType"] = this.entityType;
        data["entityTypeName"] = this.entityTypeName;
        if (this.entityId) {
            data["entityId"] = {};
            for (let key in this.entityId) {
                if (this.entityId.hasOwnProperty(key))
                    data["entityId"][key] = this.entityId[key];
            }
        }
        data["severity"] = this.severity;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantNotification {
    tenantId: number;
    notificationName: string;
    data: NotificationData;
    entityType: string;
    entityTypeName: string;
    entityId: any;
    severity: TenantNotificationSeverity;
    creationTime: Moment;
    id: string;
}

export class NotificationData implements INotificationData {
    type: string;
    properties: { [key: string] : any; };

    constructor(data?: INotificationData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            if (data["properties"]) {
                this.properties = {};
                for (let key in data["properties"]) {
                    if (data["properties"].hasOwnProperty(key))
                        this.properties[key] = data["properties"][key] !== undefined ? data["properties"][key] : {};
                }
            }
        }
    }

    static fromJS(data: any): NotificationData {
        let result = new NotificationData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    data["properties"][key] = this.properties[key];
            }
        }
        return data; 
    }
}

export interface INotificationData {
    type: string;
    properties: { [key: string] : any; };
}

export class EntityDtoOfGuid implements IEntityDtoOfGuid {
    id: string;

    constructor(data?: IEntityDtoOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfGuid {
        let result = new EntityDtoOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfGuid {
    id: string;
}

export class GetNotificationSettingsOutput implements IGetNotificationSettingsOutput {
    /** 是否订阅 */
    receiveNotifications: boolean;
    /** 订阅消息 */
    notifications: NotificationSubscriptionWithDisplayNameDto[];

    constructor(data?: IGetNotificationSettingsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.receiveNotifications = data["receiveNotifications"];
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [];
                for (let item of data["notifications"])
                    this.notifications.push(NotificationSubscriptionWithDisplayNameDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationSettingsOutput {
        let result = new GetNotificationSettingsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiveNotifications"] = this.receiveNotifications;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetNotificationSettingsOutput {
    /** 是否订阅 */
    receiveNotifications: boolean;
    /** 订阅消息 */
    notifications: NotificationSubscriptionWithDisplayNameDto[];
}

export class NotificationSubscriptionWithDisplayNameDto implements INotificationSubscriptionWithDisplayNameDto {
    /** 显示名称 */
    displayName: string;
    /** 描述 */
    description: string;
    /** 消息名称 */
    name: string;
    /** 是否订阅 */
    isSubscribed: boolean;

    constructor(data?: INotificationSubscriptionWithDisplayNameDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.name = data["name"];
            this.isSubscribed = data["isSubscribed"];
        }
    }

    static fromJS(data: any): NotificationSubscriptionWithDisplayNameDto {
        let result = new NotificationSubscriptionWithDisplayNameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["name"] = this.name;
        data["isSubscribed"] = this.isSubscribed;
        return data; 
    }
}

export interface INotificationSubscriptionWithDisplayNameDto {
    /** 显示名称 */
    displayName: string;
    /** 描述 */
    description: string;
    /** 消息名称 */
    name: string;
    /** 是否订阅 */
    isSubscribed: boolean;
}

export class UpdateNotificationSettingsInput implements IUpdateNotificationSettingsInput {
    /** 是否接受通知 */
    receiveNotifications: boolean;
    /** 通知订阅 */
    notifications: NotificationSubscriptionDto[];

    constructor(data?: IUpdateNotificationSettingsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.receiveNotifications = data["receiveNotifications"];
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [];
                for (let item of data["notifications"])
                    this.notifications.push(NotificationSubscriptionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateNotificationSettingsInput {
        let result = new UpdateNotificationSettingsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiveNotifications"] = this.receiveNotifications;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateNotificationSettingsInput {
    /** 是否接受通知 */
    receiveNotifications: boolean;
    /** 通知订阅 */
    notifications: NotificationSubscriptionDto[];
}

/** 消息订阅 */
export class NotificationSubscriptionDto implements INotificationSubscriptionDto {
    /** 消息名称 */
    name: string;
    /** 是否订阅 */
    isSubscribed: boolean;

    constructor(data?: INotificationSubscriptionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.isSubscribed = data["isSubscribed"];
        }
    }

    static fromJS(data: any): NotificationSubscriptionDto {
        let result = new NotificationSubscriptionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isSubscribed"] = this.isSubscribed;
        return data; 
    }
}

/** 消息订阅 */
export interface INotificationSubscriptionDto {
    /** 消息名称 */
    name: string;
    /** 是否订阅 */
    isSubscribed: boolean;
}

export class ListResultDtoOfOrganizationUnitDto implements IListResultDtoOfOrganizationUnitDto {
    items: OrganizationUnitDto[];

    constructor(data?: IListResultDtoOfOrganizationUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OrganizationUnitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfOrganizationUnitDto {
        let result = new ListResultDtoOfOrganizationUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfOrganizationUnitDto {
    items: OrganizationUnitDto[];
}

export class OrganizationUnitDto implements IOrganizationUnitDto {
    parentId: number;
    code: string;
    displayName: string;
    memberCount: number;
    lastModificationTime: Moment;
    lastModifierUserId: number;
    creationTime: Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: IOrganizationUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentId = data["parentId"];
            this.code = data["code"];
            this.displayName = data["displayName"];
            this.memberCount = data["memberCount"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrganizationUnitDto {
        let result = new OrganizationUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["code"] = this.code;
        data["displayName"] = this.displayName;
        data["memberCount"] = this.memberCount;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrganizationUnitDto {
    parentId: number;
    code: string;
    displayName: string;
    memberCount: number;
    lastModificationTime: Moment;
    lastModifierUserId: number;
    creationTime: Moment;
    creatorUserId: number;
    id: number;
}

export class PagedResultDtoOfOrganizationUnitUserListDto implements IPagedResultDtoOfOrganizationUnitUserListDto {
    totalCount: number;
    items: OrganizationUnitUserListDto[];

    constructor(data?: IPagedResultDtoOfOrganizationUnitUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OrganizationUnitUserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOrganizationUnitUserListDto {
        let result = new PagedResultDtoOfOrganizationUnitUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfOrganizationUnitUserListDto {
    totalCount: number;
    items: OrganizationUnitUserListDto[];
}

export class OrganizationUnitUserListDto implements IOrganizationUnitUserListDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    profilePictureId: number;
    addedTime: Moment;
    id: number;

    constructor(data?: IOrganizationUnitUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.profilePictureId = data["profilePictureId"];
            this.addedTime = data["addedTime"] ? moment(data["addedTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrganizationUnitUserListDto {
        let result = new OrganizationUnitUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["profilePictureId"] = this.profilePictureId;
        data["addedTime"] = this.addedTime ? this.addedTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrganizationUnitUserListDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    profilePictureId: number;
    addedTime: Moment;
    id: number;
}

export class CreateOrganizationUnitInput implements ICreateOrganizationUnitInput {
    /** 父节点Id(可空) */
    parentId: number;
    /** 显示名称 */
    displayName: string;

    constructor(data?: ICreateOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentId = data["parentId"];
            this.displayName = data["displayName"];
        }
    }

    static fromJS(data: any): CreateOrganizationUnitInput {
        let result = new CreateOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["displayName"] = this.displayName;
        return data; 
    }
}

export interface ICreateOrganizationUnitInput {
    /** 父节点Id(可空) */
    parentId: number;
    /** 显示名称 */
    displayName: string;
}

export class UpdateOrganizationUnitInput implements IUpdateOrganizationUnitInput {
    /** 组织单位Id(大于0) */
    id: number;
    /** 显示名称 */
    displayName: string;

    constructor(data?: IUpdateOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
        }
    }

    static fromJS(data: any): UpdateOrganizationUnitInput {
        let result = new UpdateOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        return data; 
    }
}

export interface IUpdateOrganizationUnitInput {
    /** 组织单位Id(大于0) */
    id: number;
    /** 显示名称 */
    displayName: string;
}

export class MoveOrganizationUnitInput implements IMoveOrganizationUnitInput {
    /** 组织单位Id(大于0) */
    id: number;
    /** 目标父节点Id(可空) */
    newParentId: number;

    constructor(data?: IMoveOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.newParentId = data["newParentId"];
        }
    }

    static fromJS(data: any): MoveOrganizationUnitInput {
        let result = new MoveOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["newParentId"] = this.newParentId;
        return data; 
    }
}

export interface IMoveOrganizationUnitInput {
    /** 组织单位Id(大于0) */
    id: number;
    /** 目标父节点Id(可空) */
    newParentId: number;
}

export class UsersToOrganizationUnitInput implements IUsersToOrganizationUnitInput {
    userIds: number[];
    organizationUnitId: number;

    constructor(data?: IUsersToOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["userIds"] && data["userIds"].constructor === Array) {
                this.userIds = [];
                for (let item of data["userIds"])
                    this.userIds.push(item);
            }
            this.organizationUnitId = data["organizationUnitId"];
        }
    }

    static fromJS(data: any): UsersToOrganizationUnitInput {
        let result = new UsersToOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.userIds && this.userIds.constructor === Array) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        data["organizationUnitId"] = this.organizationUnitId;
        return data; 
    }
}

export interface IUsersToOrganizationUnitInput {
    userIds: number[];
    organizationUnitId: number;
}

export class FindOrganizationUnitUsersInput implements IFindOrganizationUnitUsersInput {
    organizationUnitId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;

    constructor(data?: IFindOrganizationUnitUsersInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
            this.filter = data["filter"];
        }
    }

    static fromJS(data: any): FindOrganizationUnitUsersInput {
        let result = new FindOrganizationUnitUsersInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["filter"] = this.filter;
        return data; 
    }
}

export interface IFindOrganizationUnitUsersInput {
    organizationUnitId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;
}

export class PagedResultDtoOfBookingListDto implements IPagedResultDtoOfBookingListDto {
    totalCount: number;
    items: BookingListDto[];

    constructor(data?: IPagedResultDtoOfBookingListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(BookingListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfBookingListDto {
        let result = new PagedResultDtoOfBookingListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfBookingListDto {
    totalCount: number;
    items: BookingListDto[];
}

/** 预约列表 */
export class BookingListDto implements IBookingListDto {
    /** 预约名称 */
    name: string;
    /** 联系人 */
    contactor: string;
    /** 联系人电话 */
    contactorPhoneNum: string;
    /** 门店 */
    outlet: string;
    /** 门店 */
    outletAddress: string;
    /** 置顶 */
    sticked: boolean;
    /** 激活 */
    isActive: boolean;
    /** 查看次数 */
    pv: number;
    /** 查看人次 */
    uv: number;
    /** 最大预约人数(事项汇总) */
    subMaxBookingNum: number;
    /** 最大可预约人数 */
    subAvailBookingNum: number;
    /** 排队人数(事项汇总) */
    subQueueNum: number;
    /** 已预约人数(事项汇总) */
    subBookedNum: number;
    /** 待确认人数 */
    wait4ConfirmNum: number;
    /** 可用预约时间 */
    availableBookingTime: string[];
    /** 预约图片 */
    pictureUrl: string;
    id: number;

    constructor(data?: IBookingListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.contactor = data["contactor"];
            this.contactorPhoneNum = data["contactorPhoneNum"];
            this.outlet = data["outlet"];
            this.outletAddress = data["outletAddress"];
            this.sticked = data["sticked"];
            this.isActive = data["isActive"];
            this.pv = data["pv"];
            this.uv = data["uv"];
            this.subMaxBookingNum = data["subMaxBookingNum"];
            this.subAvailBookingNum = data["subAvailBookingNum"];
            this.subQueueNum = data["subQueueNum"];
            this.subBookedNum = data["subBookedNum"];
            this.wait4ConfirmNum = data["wait4ConfirmNum"];
            if (data["availableBookingTime"] && data["availableBookingTime"].constructor === Array) {
                this.availableBookingTime = [];
                for (let item of data["availableBookingTime"])
                    this.availableBookingTime.push(item);
            }
            this.pictureUrl = data["pictureUrl"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): BookingListDto {
        let result = new BookingListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["contactor"] = this.contactor;
        data["contactorPhoneNum"] = this.contactorPhoneNum;
        data["outlet"] = this.outlet;
        data["outletAddress"] = this.outletAddress;
        data["sticked"] = this.sticked;
        data["isActive"] = this.isActive;
        data["pv"] = this.pv;
        data["uv"] = this.uv;
        data["subMaxBookingNum"] = this.subMaxBookingNum;
        data["subAvailBookingNum"] = this.subAvailBookingNum;
        data["subQueueNum"] = this.subQueueNum;
        data["subBookedNum"] = this.subBookedNum;
        data["wait4ConfirmNum"] = this.wait4ConfirmNum;
        if (this.availableBookingTime && this.availableBookingTime.constructor === Array) {
            data["availableBookingTime"] = [];
            for (let item of this.availableBookingTime)
                data["availableBookingTime"].push(item);
        }
        data["pictureUrl"] = this.pictureUrl;
        data["id"] = this.id;
        return data; 
    }
}

/** 预约列表 */
export interface IBookingListDto {
    /** 预约名称 */
    name: string;
    /** 联系人 */
    contactor: string;
    /** 联系人电话 */
    contactorPhoneNum: string;
    /** 门店 */
    outlet: string;
    /** 门店 */
    outletAddress: string;
    /** 置顶 */
    sticked: boolean;
    /** 激活 */
    isActive: boolean;
    /** 查看次数 */
    pv: number;
    /** 查看人次 */
    uv: number;
    /** 最大预约人数(事项汇总) */
    subMaxBookingNum: number;
    /** 最大可预约人数 */
    subAvailBookingNum: number;
    /** 排队人数(事项汇总) */
    subQueueNum: number;
    /** 已预约人数(事项汇总) */
    subBookedNum: number;
    /** 待确认人数 */
    wait4ConfirmNum: number;
    /** 可用预约时间 */
    availableBookingTime: string[];
    /** 预约图片 */
    pictureUrl: string;
    id: number;
}

export class GetBookingDateAndTimeOutput implements IGetBookingDateAndTimeOutput {
    /** 可用预约日期 */
    availableDates: SelectListItemDto[];
    /** 可用预约时间 */
    availableTimes: SelectListItemDto[];

    constructor(data?: IGetBookingDateAndTimeOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["availableDates"] && data["availableDates"].constructor === Array) {
                this.availableDates = [];
                for (let item of data["availableDates"])
                    this.availableDates.push(SelectListItemDto.fromJS(item));
            }
            if (data["availableTimes"] && data["availableTimes"].constructor === Array) {
                this.availableTimes = [];
                for (let item of data["availableTimes"])
                    this.availableTimes.push(SelectListItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetBookingDateAndTimeOutput {
        let result = new GetBookingDateAndTimeOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.availableDates && this.availableDates.constructor === Array) {
            data["availableDates"] = [];
            for (let item of this.availableDates)
                data["availableDates"].push(item.toJSON());
        }
        if (this.availableTimes && this.availableTimes.constructor === Array) {
            data["availableTimes"] = [];
            for (let item of this.availableTimes)
                data["availableTimes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetBookingDateAndTimeOutput {
    /** 可用预约日期 */
    availableDates: SelectListItemDto[];
    /** 可用预约时间 */
    availableTimes: SelectListItemDto[];
}

export class GetBookingForEditOutput implements IGetBookingForEditOutput {
    /** 预约基本信息 */
    booking: BookingEditDto;
    /** 时间段 */
    items: BookingItemEditDto[];
    /** 预约图片 */
    bookingPictures: BookingPictureEditDto[];
    /** 可用门店列表 */
    availableOutlets: SelectListItemDto[];
    /** 可用联系人列表（默认门店下的可用联系人） */
    availableContactors: SelectListItemDto[];

    constructor(data?: IGetBookingForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.booking = data["booking"] ? BookingEditDto.fromJS(data["booking"]) : <any>undefined;
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(BookingItemEditDto.fromJS(item));
            }
            if (data["bookingPictures"] && data["bookingPictures"].constructor === Array) {
                this.bookingPictures = [];
                for (let item of data["bookingPictures"])
                    this.bookingPictures.push(BookingPictureEditDto.fromJS(item));
            }
            if (data["availableOutlets"] && data["availableOutlets"].constructor === Array) {
                this.availableOutlets = [];
                for (let item of data["availableOutlets"])
                    this.availableOutlets.push(SelectListItemDto.fromJS(item));
            }
            if (data["availableContactors"] && data["availableContactors"].constructor === Array) {
                this.availableContactors = [];
                for (let item of data["availableContactors"])
                    this.availableContactors.push(SelectListItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetBookingForEditOutput {
        let result = new GetBookingForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["booking"] = this.booking ? this.booking.toJSON() : <any>undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        if (this.bookingPictures && this.bookingPictures.constructor === Array) {
            data["bookingPictures"] = [];
            for (let item of this.bookingPictures)
                data["bookingPictures"].push(item.toJSON());
        }
        if (this.availableOutlets && this.availableOutlets.constructor === Array) {
            data["availableOutlets"] = [];
            for (let item of this.availableOutlets)
                data["availableOutlets"].push(item.toJSON());
        }
        if (this.availableContactors && this.availableContactors.constructor === Array) {
            data["availableContactors"] = [];
            for (let item of this.availableContactors)
                data["availableContactors"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetBookingForEditOutput {
    /** 预约基本信息 */
    booking: BookingEditDto;
    /** 时间段 */
    items: BookingItemEditDto[];
    /** 预约图片 */
    bookingPictures: BookingPictureEditDto[];
    /** 可用门店列表 */
    availableOutlets: SelectListItemDto[];
    /** 可用联系人列表（默认门店下的可用联系人） */
    availableContactors: SelectListItemDto[];
}

export class BookingEditDto implements IBookingEditDto {
    /** Id，空时为创建预约 */
    id: number;
    /** 预约名称 */
    name: string;
    /** 预约简介 */
    description: string;
    /** 模板Id */
    templateId: number;
    /** 联系人Id(必填) */
    contactorId: number;
    /** 门店Id(必填) */
    outletId: number;
    /** 需要填写性别 */
    needGender: boolean;
    /** 需要年龄 */
    needAge: boolean;
    /** 需要邮箱 */
    needEmail: boolean;
    /** 置顶 */
    sticked: boolean;
    /** 激活 */
    isActive: boolean;

    constructor(data?: IBookingEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.description = data["description"];
            this.templateId = data["templateId"];
            this.contactorId = data["contactorId"];
            this.outletId = data["outletId"];
            this.needGender = data["needGender"];
            this.needAge = data["needAge"];
            this.needEmail = data["needEmail"];
            this.sticked = data["sticked"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): BookingEditDto {
        let result = new BookingEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["templateId"] = this.templateId;
        data["contactorId"] = this.contactorId;
        data["outletId"] = this.outletId;
        data["needGender"] = this.needGender;
        data["needAge"] = this.needAge;
        data["needEmail"] = this.needEmail;
        data["sticked"] = this.sticked;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IBookingEditDto {
    /** Id，空时为创建预约 */
    id: number;
    /** 预约名称 */
    name: string;
    /** 预约简介 */
    description: string;
    /** 模板Id */
    templateId: number;
    /** 联系人Id(必填) */
    contactorId: number;
    /** 门店Id(必填) */
    outletId: number;
    /** 需要填写性别 */
    needGender: boolean;
    /** 需要年龄 */
    needAge: boolean;
    /** 需要邮箱 */
    needEmail: boolean;
    /** 置顶 */
    sticked: boolean;
    /** 激活 */
    isActive: boolean;
}

export class BookingItemEditDto implements IBookingItemEditDto {
    /** 预约 */
    bookingId: number;
    /** 可用日期(多个日期，使用","区分) */
    availableDates: string;
    /** 时间 */
    hourOfDay: string;
    /** 最大预约人数 */
    maxBookingNum: number;
    /** 最大排队人数 */
    maxQueueNum: number;
    /** 已预约人数 */
    bookedNum: number;
    /** 是否激活 */
    isActive: boolean;
    id: number;

    constructor(data?: IBookingItemEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bookingId = data["bookingId"];
            this.availableDates = data["availableDates"];
            this.hourOfDay = data["hourOfDay"];
            this.maxBookingNum = data["maxBookingNum"];
            this.maxQueueNum = data["maxQueueNum"];
            this.bookedNum = data["bookedNum"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): BookingItemEditDto {
        let result = new BookingItemEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingId"] = this.bookingId;
        data["availableDates"] = this.availableDates;
        data["hourOfDay"] = this.hourOfDay;
        data["maxBookingNum"] = this.maxBookingNum;
        data["maxQueueNum"] = this.maxQueueNum;
        data["bookedNum"] = this.bookedNum;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface IBookingItemEditDto {
    /** 预约 */
    bookingId: number;
    /** 可用日期(多个日期，使用","区分) */
    availableDates: string;
    /** 时间 */
    hourOfDay: string;
    /** 最大预约人数 */
    maxBookingNum: number;
    /** 最大排队人数 */
    maxQueueNum: number;
    /** 已预约人数 */
    bookedNum: number;
    /** 是否激活 */
    isActive: boolean;
    id: number;
}

export class BookingPictureEditDto implements IBookingPictureEditDto {
    /** 图片Id */
    pictureId: number;
    /** 图片 Url */
    pictureUrl: string;
    /** 排序 */
    displayOrder: number;
    id: number;

    constructor(data?: IBookingPictureEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.pictureId = data["pictureId"];
            this.pictureUrl = data["pictureUrl"];
            this.displayOrder = data["displayOrder"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): BookingPictureEditDto {
        let result = new BookingPictureEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pictureId"] = this.pictureId;
        data["pictureUrl"] = this.pictureUrl;
        data["displayOrder"] = this.displayOrder;
        data["id"] = this.id;
        return data; 
    }
}

export interface IBookingPictureEditDto {
    /** 图片Id */
    pictureId: number;
    /** 图片 Url */
    pictureUrl: string;
    /** 排序 */
    displayOrder: number;
    id: number;
}

export class GetBookingDetailOutput implements IGetBookingDetailOutput {
    /** 预约名称 */
    name: string;
    /** 预约描述 */
    description: string;
    /** 联系人 */
    contactor: string;
    /** 联系人电话 */
    contactorPhoneNum: string;
    /** 门店 */
    outlet: string;
    /** 门店地址 */
    outletAddress: string;
    /** 营业时间 */
    businessHours: string;
    /** 温馨提示 */
    hint: string;
    /** 置顶 */
    sticked: boolean;
    /** 激活 */
    isActive: boolean;
    /** 最大预约人数(事项汇总) */
    subMaxBookingNum: number;
    /** 最大可预约人数 */
    subAvailBookingNum: number;
    /** 排队人数(事项汇总) */
    subQueueNum: number;
    /** 已预约人数(事项汇总) */
    subBookedNum: number;
    /** 待确认人数 */
    wait4ConfirmNum: number;
    /** 可用预约时间 */
    availableBookingTime: string[];
    /** 预约图片 */
    pictures: string[];
    id: number;

    constructor(data?: IGetBookingDetailOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.description = data["description"];
            this.contactor = data["contactor"];
            this.contactorPhoneNum = data["contactorPhoneNum"];
            this.outlet = data["outlet"];
            this.outletAddress = data["outletAddress"];
            this.businessHours = data["businessHours"];
            this.hint = data["hint"];
            this.sticked = data["sticked"];
            this.isActive = data["isActive"];
            this.subMaxBookingNum = data["subMaxBookingNum"];
            this.subAvailBookingNum = data["subAvailBookingNum"];
            this.subQueueNum = data["subQueueNum"];
            this.subBookedNum = data["subBookedNum"];
            this.wait4ConfirmNum = data["wait4ConfirmNum"];
            if (data["availableBookingTime"] && data["availableBookingTime"].constructor === Array) {
                this.availableBookingTime = [];
                for (let item of data["availableBookingTime"])
                    this.availableBookingTime.push(item);
            }
            if (data["pictures"] && data["pictures"].constructor === Array) {
                this.pictures = [];
                for (let item of data["pictures"])
                    this.pictures.push(item);
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): GetBookingDetailOutput {
        let result = new GetBookingDetailOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["contactor"] = this.contactor;
        data["contactorPhoneNum"] = this.contactorPhoneNum;
        data["outlet"] = this.outlet;
        data["outletAddress"] = this.outletAddress;
        data["businessHours"] = this.businessHours;
        data["hint"] = this.hint;
        data["sticked"] = this.sticked;
        data["isActive"] = this.isActive;
        data["subMaxBookingNum"] = this.subMaxBookingNum;
        data["subAvailBookingNum"] = this.subAvailBookingNum;
        data["subQueueNum"] = this.subQueueNum;
        data["subBookedNum"] = this.subBookedNum;
        data["wait4ConfirmNum"] = this.wait4ConfirmNum;
        if (this.availableBookingTime && this.availableBookingTime.constructor === Array) {
            data["availableBookingTime"] = [];
            for (let item of this.availableBookingTime)
                data["availableBookingTime"].push(item);
        }
        if (this.pictures && this.pictures.constructor === Array) {
            data["pictures"] = [];
            for (let item of this.pictures)
                data["pictures"].push(item);
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IGetBookingDetailOutput {
    /** 预约名称 */
    name: string;
    /** 预约描述 */
    description: string;
    /** 联系人 */
    contactor: string;
    /** 联系人电话 */
    contactorPhoneNum: string;
    /** 门店 */
    outlet: string;
    /** 门店地址 */
    outletAddress: string;
    /** 营业时间 */
    businessHours: string;
    /** 温馨提示 */
    hint: string;
    /** 置顶 */
    sticked: boolean;
    /** 激活 */
    isActive: boolean;
    /** 最大预约人数(事项汇总) */
    subMaxBookingNum: number;
    /** 最大可预约人数 */
    subAvailBookingNum: number;
    /** 排队人数(事项汇总) */
    subQueueNum: number;
    /** 已预约人数(事项汇总) */
    subBookedNum: number;
    /** 待确认人数 */
    wait4ConfirmNum: number;
    /** 可用预约时间 */
    availableBookingTime: string[];
    /** 预约图片 */
    pictures: string[];
    id: number;
}

export class CreateOrUpdateBookingInput implements ICreateOrUpdateBookingInput {
    /** 预约基本信息 */
    booking: BookingEditDto = new BookingEditDto();
    /** 时间段 */
    items: BookingItemEditDto[] = [];
    /** 预约图片 */
    bookingPictures: BookingPictureEditDto[] = [];

    constructor(data?: ICreateOrUpdateBookingInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.booking = data["booking"] ? BookingEditDto.fromJS(data["booking"]) : new BookingEditDto();
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(BookingItemEditDto.fromJS(item));
            }
            if (data["bookingPictures"] && data["bookingPictures"].constructor === Array) {
                this.bookingPictures = [];
                for (let item of data["bookingPictures"])
                    this.bookingPictures.push(BookingPictureEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateBookingInput {
        let result = new CreateOrUpdateBookingInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["booking"] = this.booking ? this.booking.toJSON() : <any>undefined;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        if (this.bookingPictures && this.bookingPictures.constructor === Array) {
            data["bookingPictures"] = [];
            for (let item of this.bookingPictures)
                data["bookingPictures"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateOrUpdateBookingInput {
    /** 预约基本信息 */
    booking: BookingEditDto;
    /** 时间段 */
    items: BookingItemEditDto[];
    /** 预约图片 */
    bookingPictures: BookingPictureEditDto[];
}

export class EntityDtoOfInt64 implements IEntityDtoOfInt64 {
    id: number;

    constructor(data?: IEntityDtoOfInt64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfInt64 {
        let result = new EntityDtoOfInt64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfInt64 {
    id: number;
}

export class ActiveOrDisableInput implements IActiveOrDisableInput {
    isActive: boolean;
    id: number;

    constructor(data?: IActiveOrDisableInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ActiveOrDisableInput {
        let result = new ActiveOrDisableInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface IActiveOrDisableInput {
    isActive: boolean;
    id: number;
}

export class Contactor implements IContactor {
    name: string;
    phoneNum: string;
    wechatQrcodeUrl: string;
    tenantId: number;
    outletId: number;
    isDefault: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: Moment;
    lastModificationTime: Moment;
    lastModifierUserId: number;
    creationTime: Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: IContactor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.phoneNum = data["phoneNum"];
            this.wechatQrcodeUrl = data["wechatQrcodeUrl"];
            this.tenantId = data["tenantId"];
            this.outletId = data["outletId"];
            this.isDefault = data["isDefault"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Contactor {
        let result = new Contactor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["phoneNum"] = this.phoneNum;
        data["wechatQrcodeUrl"] = this.wechatQrcodeUrl;
        data["tenantId"] = this.tenantId;
        data["outletId"] = this.outletId;
        data["isDefault"] = this.isDefault;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IContactor {
    name: string;
    phoneNum: string;
    wechatQrcodeUrl: string;
    tenantId: number;
    outletId: number;
    isDefault: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: Moment;
    lastModificationTime: Moment;
    lastModifierUserId: number;
    creationTime: Moment;
    creatorUserId: number;
    id: number;
}

export class BookingItem implements IBookingItem {
    tenantId: number;
    bookingId: number;
    availableDates: string;
    hourOfDay: string;
    maxBookingNum: number;
    maxQueueNum: number;
    bookedNum: number;
    queueNum: number;
    wait4ConfirmNum: number;
    isActive: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: Moment;
    booking: Booking;
    id: number;

    constructor(data?: IBookingItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.bookingId = data["bookingId"];
            this.availableDates = data["availableDates"];
            this.hourOfDay = data["hourOfDay"];
            this.maxBookingNum = data["maxBookingNum"];
            this.maxQueueNum = data["maxQueueNum"];
            this.bookedNum = data["bookedNum"];
            this.queueNum = data["queueNum"];
            this.wait4ConfirmNum = data["wait4ConfirmNum"];
            this.isActive = data["isActive"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.booking = data["booking"] ? Booking.fromJS(data["booking"]) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): BookingItem {
        let result = new BookingItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["bookingId"] = this.bookingId;
        data["availableDates"] = this.availableDates;
        data["hourOfDay"] = this.hourOfDay;
        data["maxBookingNum"] = this.maxBookingNum;
        data["maxQueueNum"] = this.maxQueueNum;
        data["bookedNum"] = this.bookedNum;
        data["queueNum"] = this.queueNum;
        data["wait4ConfirmNum"] = this.wait4ConfirmNum;
        data["isActive"] = this.isActive;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["booking"] = this.booking ? this.booking.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IBookingItem {
    tenantId: number;
    bookingId: number;
    availableDates: string;
    hourOfDay: string;
    maxBookingNum: number;
    maxQueueNum: number;
    bookedNum: number;
    queueNum: number;
    wait4ConfirmNum: number;
    isActive: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: Moment;
    booking: Booking;
    id: number;
}

export class Booking implements IBooking {
    tenantId: number;
    name: string;
    description: string;
    hint: string;
    templateId: number;
    contactorId: number;
    contactor: Contactor;
    outletId: number;
    outlet: Outlet;
    needGender: boolean;
    needAge: boolean;
    needEmail: boolean;
    sticked: boolean;
    isActive: boolean;
    pv: number;
    uv: number;
    items: BookingItem[];
    pictures: BookingPicture[];
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: Moment;
    lastModificationTime: Moment;
    lastModifierUserId: number;
    creationTime: Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: IBooking) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.name = data["name"];
            this.description = data["description"];
            this.hint = data["hint"];
            this.templateId = data["templateId"];
            this.contactorId = data["contactorId"];
            this.contactor = data["contactor"] ? Contactor.fromJS(data["contactor"]) : <any>undefined;
            this.outletId = data["outletId"];
            this.outlet = data["outlet"] ? Outlet.fromJS(data["outlet"]) : <any>undefined;
            this.needGender = data["needGender"];
            this.needAge = data["needAge"];
            this.needEmail = data["needEmail"];
            this.sticked = data["sticked"];
            this.isActive = data["isActive"];
            this.pv = data["pv"];
            this.uv = data["uv"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(BookingItem.fromJS(item));
            }
            if (data["pictures"] && data["pictures"].constructor === Array) {
                this.pictures = [];
                for (let item of data["pictures"])
                    this.pictures.push(BookingPicture.fromJS(item));
            }
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Booking {
        let result = new Booking();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["description"] = this.description;
        data["hint"] = this.hint;
        data["templateId"] = this.templateId;
        data["contactorId"] = this.contactorId;
        data["contactor"] = this.contactor ? this.contactor.toJSON() : <any>undefined;
        data["outletId"] = this.outletId;
        data["outlet"] = this.outlet ? this.outlet.toJSON() : <any>undefined;
        data["needGender"] = this.needGender;
        data["needAge"] = this.needAge;
        data["needEmail"] = this.needEmail;
        data["sticked"] = this.sticked;
        data["isActive"] = this.isActive;
        data["pv"] = this.pv;
        data["uv"] = this.uv;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        if (this.pictures && this.pictures.constructor === Array) {
            data["pictures"] = [];
            for (let item of this.pictures)
                data["pictures"].push(item.toJSON());
        }
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IBooking {
    tenantId: number;
    name: string;
    description: string;
    hint: string;
    templateId: number;
    contactorId: number;
    contactor: Contactor;
    outletId: number;
    outlet: Outlet;
    needGender: boolean;
    needAge: boolean;
    needEmail: boolean;
    sticked: boolean;
    isActive: boolean;
    pv: number;
    uv: number;
    items: BookingItem[];
    pictures: BookingPicture[];
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: Moment;
    lastModificationTime: Moment;
    lastModifierUserId: number;
    creationTime: Moment;
    creatorUserId: number;
    id: number;
}

export class Outlet implements IOutlet {
    tenantId: number;
    name: string;
    longitude: string;
    phoneNum: string;
    businessHours: string;
    province: string;
    provinceId: number;
    city: string;
    cityId: number;
    district: string;
    districtId: number;
    detailAddress: string;
    pictureId: number;
    isActive: boolean;
    contactors: Contactor[];
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: Moment;
    lastModificationTime: Moment;
    lastModifierUserId: number;
    creationTime: Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: IOutlet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.name = data["name"];
            this.longitude = data["longitude"];
            this.phoneNum = data["phoneNum"];
            this.businessHours = data["businessHours"];
            this.province = data["province"];
            this.provinceId = data["provinceId"];
            this.city = data["city"];
            this.cityId = data["cityId"];
            this.district = data["district"];
            this.districtId = data["districtId"];
            this.detailAddress = data["detailAddress"];
            this.pictureId = data["pictureId"];
            this.isActive = data["isActive"];
            if (data["contactors"] && data["contactors"].constructor === Array) {
                this.contactors = [];
                for (let item of data["contactors"])
                    this.contactors.push(Contactor.fromJS(item));
            }
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Outlet {
        let result = new Outlet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["longitude"] = this.longitude;
        data["phoneNum"] = this.phoneNum;
        data["businessHours"] = this.businessHours;
        data["province"] = this.province;
        data["provinceId"] = this.provinceId;
        data["city"] = this.city;
        data["cityId"] = this.cityId;
        data["district"] = this.district;
        data["districtId"] = this.districtId;
        data["detailAddress"] = this.detailAddress;
        data["pictureId"] = this.pictureId;
        data["isActive"] = this.isActive;
        if (this.contactors && this.contactors.constructor === Array) {
            data["contactors"] = [];
            for (let item of this.contactors)
                data["contactors"].push(item.toJSON());
        }
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOutlet {
    tenantId: number;
    name: string;
    longitude: string;
    phoneNum: string;
    businessHours: string;
    province: string;
    provinceId: number;
    city: string;
    cityId: number;
    district: string;
    districtId: number;
    detailAddress: string;
    pictureId: number;
    isActive: boolean;
    contactors: Contactor[];
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: Moment;
    lastModificationTime: Moment;
    lastModifierUserId: number;
    creationTime: Moment;
    creatorUserId: number;
    id: number;
}

export class BookingPicture implements IBookingPicture {
    tenantId: number;
    bookingId: number;
    pictureId: number;
    displayOrder: number;
    id: number;

    constructor(data?: IBookingPicture) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.bookingId = data["bookingId"];
            this.pictureId = data["pictureId"];
            this.displayOrder = data["displayOrder"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): BookingPicture {
        let result = new BookingPicture();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["bookingId"] = this.bookingId;
        data["pictureId"] = this.pictureId;
        data["displayOrder"] = this.displayOrder;
        data["id"] = this.id;
        return data; 
    }
}

export interface IBookingPicture {
    tenantId: number;
    bookingId: number;
    pictureId: number;
    displayOrder: number;
    id: number;
}

export class PagedResultDtoOfOrgBookingOrderListDto implements IPagedResultDtoOfOrgBookingOrderListDto {
    totalCount: number;
    items: OrgBookingOrderListDto[];

    constructor(data?: IPagedResultDtoOfOrgBookingOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OrgBookingOrderListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOrgBookingOrderListDto {
        let result = new PagedResultDtoOfOrgBookingOrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfOrgBookingOrderListDto {
    totalCount: number;
    items: OrgBookingOrderListDto[];
}

/** 预约列表 */
export class OrgBookingOrderListDto implements IOrgBookingOrderListDto {
    /** 应约人名称 */
    customerName: string;
    /** 应约人性别 */
    gender: OrgBookingOrderListDtoGender;
    /** 预约名称 */
    bookingName: string;
    /** 门店名称 */
    outletName: string;
    /** 预约日期 */
    bookingDate: Moment;
    /** 预约时间 */
    hourOfDay: string;
    /** 预约人数 */
    subscriberNum: number;
    /** 订单状态 */
    status: OrgBookingOrderListDtoStatus;
    /** 手机号码 */
    phoneNum: string;
    /** 创建时间 */
    creationTime: Moment;
    /** 头像Url */
    profilePictureUrl: string;
    id: number;

    constructor(data?: IOrgBookingOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customerName = data["customerName"];
            this.gender = data["gender"];
            this.bookingName = data["bookingName"];
            this.outletName = data["outletName"];
            this.bookingDate = data["bookingDate"] ? moment(data["bookingDate"].toString()) : <any>undefined;
            this.hourOfDay = data["hourOfDay"];
            this.subscriberNum = data["subscriberNum"];
            this.status = data["status"];
            this.phoneNum = data["phoneNum"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.profilePictureUrl = data["profilePictureUrl"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrgBookingOrderListDto {
        let result = new OrgBookingOrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerName"] = this.customerName;
        data["gender"] = this.gender;
        data["bookingName"] = this.bookingName;
        data["outletName"] = this.outletName;
        data["bookingDate"] = this.bookingDate ? this.bookingDate.toISOString() : <any>undefined;
        data["hourOfDay"] = this.hourOfDay;
        data["subscriberNum"] = this.subscriberNum;
        data["status"] = this.status;
        data["phoneNum"] = this.phoneNum;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["profilePictureUrl"] = this.profilePictureUrl;
        data["id"] = this.id;
        return data; 
    }
}

/** 预约列表 */
export interface IOrgBookingOrderListDto {
    /** 应约人名称 */
    customerName: string;
    /** 应约人性别 */
    gender: OrgBookingOrderListDtoGender;
    /** 预约名称 */
    bookingName: string;
    /** 门店名称 */
    outletName: string;
    /** 预约日期 */
    bookingDate: Moment;
    /** 预约时间 */
    hourOfDay: string;
    /** 预约人数 */
    subscriberNum: number;
    /** 订单状态 */
    status: OrgBookingOrderListDtoStatus;
    /** 手机号码 */
    phoneNum: string;
    /** 创建时间 */
    creationTime: Moment;
    /** 头像Url */
    profilePictureUrl: string;
    id: number;
}

export class OrgBookingOrderInfolDto implements IOrgBookingOrderInfolDto {
    /** 应约人名称 */
    customerName: string;
    /** 预约名称 */
    bookingName: string;
    /** 门店名称 */
    outletName: string;
    /** 预约日期 */
    bookingDate: Moment;
    /** 预约时间 */
    hourOfDay: string;
    /** 预约人数 */
    subscriberNum: number;
    /** 订单状态 */
    status: OrgBookingOrderInfolDtoStatus;
    /** 手机号码 */
    phoneNum: string;
    /** 备注 */
    remark: string;
    /** 性别 */
    gender: string;
    /** 年龄 */
    age: number;
    /** 邮箱 */
    emailAddress: string;
    /** 是否需要填写性别 */
    needGender: boolean;
    /** 需要年龄 */
    needAge: boolean;
    /** 需要邮箱 */
    needEmail: boolean;
    /** 创建时间 */
    creationTime: Moment;
    /** 头像Url */
    profilePictureUrl: string;
    id: number;

    constructor(data?: IOrgBookingOrderInfolDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customerName = data["customerName"];
            this.bookingName = data["bookingName"];
            this.outletName = data["outletName"];
            this.bookingDate = data["bookingDate"] ? moment(data["bookingDate"].toString()) : <any>undefined;
            this.hourOfDay = data["hourOfDay"];
            this.subscriberNum = data["subscriberNum"];
            this.status = data["status"];
            this.phoneNum = data["phoneNum"];
            this.remark = data["remark"];
            this.gender = data["gender"];
            this.age = data["age"];
            this.emailAddress = data["emailAddress"];
            this.needGender = data["needGender"];
            this.needAge = data["needAge"];
            this.needEmail = data["needEmail"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.profilePictureUrl = data["profilePictureUrl"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrgBookingOrderInfolDto {
        let result = new OrgBookingOrderInfolDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerName"] = this.customerName;
        data["bookingName"] = this.bookingName;
        data["outletName"] = this.outletName;
        data["bookingDate"] = this.bookingDate ? this.bookingDate.toISOString() : <any>undefined;
        data["hourOfDay"] = this.hourOfDay;
        data["subscriberNum"] = this.subscriberNum;
        data["status"] = this.status;
        data["phoneNum"] = this.phoneNum;
        data["remark"] = this.remark;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["emailAddress"] = this.emailAddress;
        data["needGender"] = this.needGender;
        data["needAge"] = this.needAge;
        data["needEmail"] = this.needEmail;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["profilePictureUrl"] = this.profilePictureUrl;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrgBookingOrderInfolDto {
    /** 应约人名称 */
    customerName: string;
    /** 预约名称 */
    bookingName: string;
    /** 门店名称 */
    outletName: string;
    /** 预约日期 */
    bookingDate: Moment;
    /** 预约时间 */
    hourOfDay: string;
    /** 预约人数 */
    subscriberNum: number;
    /** 订单状态 */
    status: OrgBookingOrderInfolDtoStatus;
    /** 手机号码 */
    phoneNum: string;
    /** 备注 */
    remark: string;
    /** 性别 */
    gender: string;
    /** 年龄 */
    age: number;
    /** 邮箱 */
    emailAddress: string;
    /** 是否需要填写性别 */
    needGender: boolean;
    /** 需要年龄 */
    needAge: boolean;
    /** 需要邮箱 */
    needEmail: boolean;
    /** 创建时间 */
    creationTime: Moment;
    /** 头像Url */
    profilePictureUrl: string;
    id: number;
}

export class BatchConfirmInput implements IBatchConfirmInput {
    /** 预约订单id数组 */
    ids: number[];

    constructor(data?: IBatchConfirmInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["ids"] && data["ids"].constructor === Array) {
                this.ids = [];
                for (let item of data["ids"])
                    this.ids.push(item);
            }
        }
    }

    static fromJS(data: any): BatchConfirmInput {
        let result = new BatchConfirmInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.ids && this.ids.constructor === Array) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data; 
    }
}

export interface IBatchConfirmInput {
    /** 预约订单id数组 */
    ids: number[];
}

export class RemarkBookingOrderInput implements IRemarkBookingOrderInput {
    /** 备注 */
    remark: string;
    id: number;

    constructor(data?: IRemarkBookingOrderInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.remark = data["remark"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): RemarkBookingOrderInput {
        let result = new RemarkBookingOrderInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["remark"] = this.remark;
        data["id"] = this.id;
        return data; 
    }
}

export interface IRemarkBookingOrderInput {
    /** 备注 */
    remark: string;
    id: number;
}

export class PagedResultDtoOfOutletListDto implements IPagedResultDtoOfOutletListDto {
    totalCount: number;
    items: OutletListDto[];

    constructor(data?: IPagedResultDtoOfOutletListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OutletListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOutletListDto {
        let result = new PagedResultDtoOfOutletListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfOutletListDto {
    totalCount: number;
    items: OutletListDto[];
}

export class OutletListDto implements IOutletListDto {
    /** 门店名称 */
    name: string;
    /** 经纬度 */
    longitude: string;
    /** 营业时间 */
    businessHours: string;
    /** 省份 */
    province: string;
    /** 城市 */
    city: string;
    /** 区域 */
    district: string;
    /** 详细地址 */
    detailAddress: string;
    /** 图片url */
    pictureUrl: string;
    /** 是否启用 */
    isActive: boolean;
    /** 联系人 */
    contactor: ContactorEditDto;
    id: number;

    constructor(data?: IOutletListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.longitude = data["longitude"];
            this.businessHours = data["businessHours"];
            this.province = data["province"];
            this.city = data["city"];
            this.district = data["district"];
            this.detailAddress = data["detailAddress"];
            this.pictureUrl = data["pictureUrl"];
            this.isActive = data["isActive"];
            this.contactor = data["contactor"] ? ContactorEditDto.fromJS(data["contactor"]) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OutletListDto {
        let result = new OutletListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["longitude"] = this.longitude;
        data["businessHours"] = this.businessHours;
        data["province"] = this.province;
        data["city"] = this.city;
        data["district"] = this.district;
        data["detailAddress"] = this.detailAddress;
        data["pictureUrl"] = this.pictureUrl;
        data["isActive"] = this.isActive;
        data["contactor"] = this.contactor ? this.contactor.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOutletListDto {
    /** 门店名称 */
    name: string;
    /** 经纬度 */
    longitude: string;
    /** 营业时间 */
    businessHours: string;
    /** 省份 */
    province: string;
    /** 城市 */
    city: string;
    /** 区域 */
    district: string;
    /** 详细地址 */
    detailAddress: string;
    /** 图片url */
    pictureUrl: string;
    /** 是否启用 */
    isActive: boolean;
    /** 联系人 */
    contactor: ContactorEditDto;
    id: number;
}

export class ContactorEditDto implements IContactorEditDto {
    /** 联系人Id，null时为创建,有值时为更新 */
    id: number;
    /** 姓名 */
    name: string;
    /** 电话号码 */
    phoneNum: string;
    /** 联系人二维码 */
    wechatQrcodeUrl: string;
    /** 门店Id */
    outletId: number;
    /** 是否默认 */
    isDefault: boolean;

    constructor(data?: IContactorEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.phoneNum = data["phoneNum"];
            this.wechatQrcodeUrl = data["wechatQrcodeUrl"];
            this.outletId = data["outletId"];
            this.isDefault = data["isDefault"];
        }
    }

    static fromJS(data: any): ContactorEditDto {
        let result = new ContactorEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["phoneNum"] = this.phoneNum;
        data["wechatQrcodeUrl"] = this.wechatQrcodeUrl;
        data["outletId"] = this.outletId;
        data["isDefault"] = this.isDefault;
        return data; 
    }
}

export interface IContactorEditDto {
    /** 联系人Id，null时为创建,有值时为更新 */
    id: number;
    /** 姓名 */
    name: string;
    /** 电话号码 */
    phoneNum: string;
    /** 联系人二维码 */
    wechatQrcodeUrl: string;
    /** 门店Id */
    outletId: number;
    /** 是否默认 */
    isDefault: boolean;
}

export class GetOutletForEditDto implements IGetOutletForEditDto {
    /** 门店信息 */
    outlet: OutletEditDto;
    /** 联系人集合 */
    contactors: ContactorEditDto[];
    /** 可用省份 */
    availableProvinces: SelectListItemDto[];
    /** 可用城市 */
    availableCitys: SelectListItemDto[];
    /** 可用区域 */
    availableDistricts: SelectListItemDto[];

    constructor(data?: IGetOutletForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.outlet = data["outlet"] ? OutletEditDto.fromJS(data["outlet"]) : <any>undefined;
            if (data["contactors"] && data["contactors"].constructor === Array) {
                this.contactors = [];
                for (let item of data["contactors"])
                    this.contactors.push(ContactorEditDto.fromJS(item));
            }
            if (data["availableProvinces"] && data["availableProvinces"].constructor === Array) {
                this.availableProvinces = [];
                for (let item of data["availableProvinces"])
                    this.availableProvinces.push(SelectListItemDto.fromJS(item));
            }
            if (data["availableCitys"] && data["availableCitys"].constructor === Array) {
                this.availableCitys = [];
                for (let item of data["availableCitys"])
                    this.availableCitys.push(SelectListItemDto.fromJS(item));
            }
            if (data["availableDistricts"] && data["availableDistricts"].constructor === Array) {
                this.availableDistricts = [];
                for (let item of data["availableDistricts"])
                    this.availableDistricts.push(SelectListItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetOutletForEditDto {
        let result = new GetOutletForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["outlet"] = this.outlet ? this.outlet.toJSON() : <any>undefined;
        if (this.contactors && this.contactors.constructor === Array) {
            data["contactors"] = [];
            for (let item of this.contactors)
                data["contactors"].push(item.toJSON());
        }
        if (this.availableProvinces && this.availableProvinces.constructor === Array) {
            data["availableProvinces"] = [];
            for (let item of this.availableProvinces)
                data["availableProvinces"].push(item.toJSON());
        }
        if (this.availableCitys && this.availableCitys.constructor === Array) {
            data["availableCitys"] = [];
            for (let item of this.availableCitys)
                data["availableCitys"].push(item.toJSON());
        }
        if (this.availableDistricts && this.availableDistricts.constructor === Array) {
            data["availableDistricts"] = [];
            for (let item of this.availableDistricts)
                data["availableDistricts"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetOutletForEditDto {
    /** 门店信息 */
    outlet: OutletEditDto;
    /** 联系人集合 */
    contactors: ContactorEditDto[];
    /** 可用省份 */
    availableProvinces: SelectListItemDto[];
    /** 可用城市 */
    availableCitys: SelectListItemDto[];
    /** 可用区域 */
    availableDistricts: SelectListItemDto[];
}

export class OutletEditDto implements IOutletEditDto {
    /** 门店Id，null时为创建,有值时为更新 */
    id: number;
    /** 门店名称 */
    name: string;
    /** 经纬度 */
    longitude: string;
    /** 营业时间 */
    businessHours: string;
    /** 电话号码 */
    phoneNum: string;
    /** 省份(必填) */
    provinceId: number;
    /** 城市(必填) */
    cityId: number;
    /** 区域(可选,不填传0) */
    districtId: number;
    /** 详细地址 */
    detailAddress: string;
    /** 图片 Id */
    pictureId: number;
    /** 图片 Url */
    pictureUrl: string;
    /** 是否启用 */
    isActive: boolean;

    constructor(data?: IOutletEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.longitude = data["longitude"];
            this.businessHours = data["businessHours"];
            this.phoneNum = data["phoneNum"];
            this.provinceId = data["provinceId"];
            this.cityId = data["cityId"];
            this.districtId = data["districtId"];
            this.detailAddress = data["detailAddress"];
            this.pictureId = data["pictureId"];
            this.pictureUrl = data["pictureUrl"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): OutletEditDto {
        let result = new OutletEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["longitude"] = this.longitude;
        data["businessHours"] = this.businessHours;
        data["phoneNum"] = this.phoneNum;
        data["provinceId"] = this.provinceId;
        data["cityId"] = this.cityId;
        data["districtId"] = this.districtId;
        data["detailAddress"] = this.detailAddress;
        data["pictureId"] = this.pictureId;
        data["pictureUrl"] = this.pictureUrl;
        data["isActive"] = this.isActive;
        return data; 
    }
}

export interface IOutletEditDto {
    /** 门店Id，null时为创建,有值时为更新 */
    id: number;
    /** 门店名称 */
    name: string;
    /** 经纬度 */
    longitude: string;
    /** 营业时间 */
    businessHours: string;
    /** 电话号码 */
    phoneNum: string;
    /** 省份(必填) */
    provinceId: number;
    /** 城市(必填) */
    cityId: number;
    /** 区域(可选,不填传0) */
    districtId: number;
    /** 详细地址 */
    detailAddress: string;
    /** 图片 Id */
    pictureId: number;
    /** 图片 Url */
    pictureUrl: string;
    /** 是否启用 */
    isActive: boolean;
}

export class CreateOrUpdateOutletInput implements ICreateOrUpdateOutletInput {
    /** 门店信息 */
    outlet: OutletEditDto;
    /** 联系人集合 */
    contactors: ContactorEditDto[];

    constructor(data?: ICreateOrUpdateOutletInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.outlet = data["outlet"] ? OutletEditDto.fromJS(data["outlet"]) : <any>undefined;
            if (data["contactors"] && data["contactors"].constructor === Array) {
                this.contactors = [];
                for (let item of data["contactors"])
                    this.contactors.push(ContactorEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateOutletInput {
        let result = new CreateOrUpdateOutletInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["outlet"] = this.outlet ? this.outlet.toJSON() : <any>undefined;
        if (this.contactors && this.contactors.constructor === Array) {
            data["contactors"] = [];
            for (let item of this.contactors)
                data["contactors"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateOrUpdateOutletInput {
    /** 门店信息 */
    outlet: OutletEditDto;
    /** 联系人集合 */
    contactors: ContactorEditDto[];
}

export class PaymentInfoDto implements IPaymentInfoDto {
    edition: EditionSelectDto;
    additionalPrice: number;

    constructor(data?: IPaymentInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionSelectDto.fromJS(data["edition"]) : <any>undefined;
            this.additionalPrice = data["additionalPrice"];
        }
    }

    static fromJS(data: any): PaymentInfoDto {
        let result = new PaymentInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        data["additionalPrice"] = this.additionalPrice;
        return data; 
    }
}

export interface IPaymentInfoDto {
    edition: EditionSelectDto;
    additionalPrice: number;
}

export class CreatePaymentDto implements ICreatePaymentDto {
    editionId: number;
    editionPaymentType: CreatePaymentDtoEditionPaymentType;
    paymentPeriodType: CreatePaymentDtoPaymentPeriodType;
    subscriptionPaymentGatewayType: CreatePaymentDtoSubscriptionPaymentGatewayType;

    constructor(data?: ICreatePaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.editionId = data["editionId"];
            this.editionPaymentType = data["editionPaymentType"];
            this.paymentPeriodType = data["paymentPeriodType"];
            this.subscriptionPaymentGatewayType = data["subscriptionPaymentGatewayType"];
        }
    }

    static fromJS(data: any): CreatePaymentDto {
        let result = new CreatePaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editionId"] = this.editionId;
        data["editionPaymentType"] = this.editionPaymentType;
        data["paymentPeriodType"] = this.paymentPeriodType;
        data["subscriptionPaymentGatewayType"] = this.subscriptionPaymentGatewayType;
        return data; 
    }
}

export interface ICreatePaymentDto {
    editionId: number;
    editionPaymentType: CreatePaymentDtoEditionPaymentType;
    paymentPeriodType: CreatePaymentDtoPaymentPeriodType;
    subscriptionPaymentGatewayType: CreatePaymentDtoSubscriptionPaymentGatewayType;
}

export class ExecutePaymentDto implements IExecutePaymentDto {
    gateway: ExecutePaymentDtoGateway;
    editionPaymentType: ExecutePaymentDtoEditionPaymentType;
    editionId: number;
    paymentPeriodType: ExecutePaymentDtoPaymentPeriodType;
    additionalData: { [key: string] : string; };

    constructor(data?: IExecutePaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.gateway = data["gateway"];
            this.editionPaymentType = data["editionPaymentType"];
            this.editionId = data["editionId"];
            this.paymentPeriodType = data["paymentPeriodType"];
            if (data["additionalData"]) {
                this.additionalData = {};
                for (let key in data["additionalData"]) {
                    if (data["additionalData"].hasOwnProperty(key))
                        this.additionalData[key] = data["additionalData"][key];
                }
            }
        }
    }

    static fromJS(data: any): ExecutePaymentDto {
        let result = new ExecutePaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gateway"] = this.gateway;
        data["editionPaymentType"] = this.editionPaymentType;
        data["editionId"] = this.editionId;
        data["paymentPeriodType"] = this.paymentPeriodType;
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    data["additionalData"][key] = this.additionalData[key];
            }
        }
        return data; 
    }
}

export interface IExecutePaymentDto {
    gateway: ExecutePaymentDtoGateway;
    editionPaymentType: ExecutePaymentDtoEditionPaymentType;
    editionId: number;
    paymentPeriodType: ExecutePaymentDtoPaymentPeriodType;
    additionalData: { [key: string] : string; };
}

export class PagedResultDtoOfSubscriptionPaymentListDto implements IPagedResultDtoOfSubscriptionPaymentListDto {
    totalCount: number;
    items: SubscriptionPaymentListDto[];

    constructor(data?: IPagedResultDtoOfSubscriptionPaymentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SubscriptionPaymentListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSubscriptionPaymentListDto {
        let result = new PagedResultDtoOfSubscriptionPaymentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfSubscriptionPaymentListDto {
    totalCount: number;
    items: SubscriptionPaymentListDto[];
}

export class SubscriptionPaymentListDto implements ISubscriptionPaymentListDto {
    gateway: string;
    amount: number;
    editionId: number;
    dayCount: number;
    paymentPeriodType: string;
    paymentId: string;
    payerId: string;
    status: string;
    editionDisplayName: string;
    lastModificationTime: Moment;
    lastModifierUserId: number;
    creationTime: Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: ISubscriptionPaymentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.gateway = data["gateway"];
            this.amount = data["amount"];
            this.editionId = data["editionId"];
            this.dayCount = data["dayCount"];
            this.paymentPeriodType = data["paymentPeriodType"];
            this.paymentId = data["paymentId"];
            this.payerId = data["payerId"];
            this.status = data["status"];
            this.editionDisplayName = data["editionDisplayName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SubscriptionPaymentListDto {
        let result = new SubscriptionPaymentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gateway"] = this.gateway;
        data["amount"] = this.amount;
        data["editionId"] = this.editionId;
        data["dayCount"] = this.dayCount;
        data["paymentPeriodType"] = this.paymentPeriodType;
        data["paymentId"] = this.paymentId;
        data["payerId"] = this.payerId;
        data["status"] = this.status;
        data["editionDisplayName"] = this.editionDisplayName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface ISubscriptionPaymentListDto {
    gateway: string;
    amount: number;
    editionId: number;
    dayCount: number;
    paymentPeriodType: string;
    paymentId: string;
    payerId: string;
    status: string;
    editionDisplayName: string;
    lastModificationTime: Moment;
    lastModifierUserId: number;
    creationTime: Moment;
    creatorUserId: number;
    id: number;
}

export class PagedResultDtoOfBookingTimelineDto implements IPagedResultDtoOfBookingTimelineDto {
    totalCount: number;
    items: BookingTimelineDto[];

    constructor(data?: IPagedResultDtoOfBookingTimelineDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(BookingTimelineDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfBookingTimelineDto {
        let result = new PagedResultDtoOfBookingTimelineDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfBookingTimelineDto {
    totalCount: number;
    items: BookingTimelineDto[];
}

export class BookingTimelineDto implements IBookingTimelineDto {
    /** 预约名称 */
    bookingName: string;
    /** 预约时间 */
    bookingDateTime: string;
    /** 门店 */
    outlet: string;
    /** 机构logo */
    orgLogoUrl: string;
    id: number;

    constructor(data?: IBookingTimelineDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bookingName = data["bookingName"];
            this.bookingDateTime = data["bookingDateTime"];
            this.outlet = data["outlet"];
            this.orgLogoUrl = data["orgLogoUrl"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): BookingTimelineDto {
        let result = new BookingTimelineDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingName"] = this.bookingName;
        data["bookingDateTime"] = this.bookingDateTime;
        data["outlet"] = this.outlet;
        data["orgLogoUrl"] = this.orgLogoUrl;
        data["id"] = this.id;
        return data; 
    }
}

export interface IBookingTimelineDto {
    /** 预约名称 */
    bookingName: string;
    /** 预约时间 */
    bookingDateTime: string;
    /** 门店 */
    outlet: string;
    /** 机构logo */
    orgLogoUrl: string;
    id: number;
}

export class PagedResultDtoOfBookingOrderListDto implements IPagedResultDtoOfBookingOrderListDto {
    totalCount: number;
    items: BookingOrderListDto[];

    constructor(data?: IPagedResultDtoOfBookingOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(BookingOrderListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfBookingOrderListDto {
        let result = new PagedResultDtoOfBookingOrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfBookingOrderListDto {
    totalCount: number;
    items: BookingOrderListDto[];
}

/** 预约列表 */
export class BookingOrderListDto implements IBookingOrderListDto {
    /** 预约名称 */
    bookingName: string;
    /** 门店名称 */
    outletName: string;
    /** 预约日期 */
    bookingDate: Moment;
    /** 预约时间 */
    hourOfDay: string;
    /** 预约人数 */
    subscriberNum: number;
    /** 订单状态 */
    status: BookingOrderListDtoStatus;
    /** 手机号码 */
    phoneNum: string;
    /** 置顶 */
    sticked: boolean;
    /** 创建时间 */
    creationTime: Moment;
    id: number;

    constructor(data?: IBookingOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bookingName = data["bookingName"];
            this.outletName = data["outletName"];
            this.bookingDate = data["bookingDate"] ? moment(data["bookingDate"].toString()) : <any>undefined;
            this.hourOfDay = data["hourOfDay"];
            this.subscriberNum = data["subscriberNum"];
            this.status = data["status"];
            this.phoneNum = data["phoneNum"];
            this.sticked = data["sticked"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): BookingOrderListDto {
        let result = new BookingOrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingName"] = this.bookingName;
        data["outletName"] = this.outletName;
        data["bookingDate"] = this.bookingDate ? this.bookingDate.toISOString() : <any>undefined;
        data["hourOfDay"] = this.hourOfDay;
        data["subscriberNum"] = this.subscriberNum;
        data["status"] = this.status;
        data["phoneNum"] = this.phoneNum;
        data["sticked"] = this.sticked;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

/** 预约列表 */
export interface IBookingOrderListDto {
    /** 预约名称 */
    bookingName: string;
    /** 门店名称 */
    outletName: string;
    /** 预约日期 */
    bookingDate: Moment;
    /** 预约时间 */
    hourOfDay: string;
    /** 预约人数 */
    subscriberNum: number;
    /** 订单状态 */
    status: BookingOrderListDtoStatus;
    /** 手机号码 */
    phoneNum: string;
    /** 置顶 */
    sticked: boolean;
    /** 创建时间 */
    creationTime: Moment;
    id: number;
}

export class GetPersonBookingOrderOutput implements IGetPersonBookingOrderOutput {
    /** 预约信息 */
    bookingInfo: BookingInfoDto;
    /** 预约订单信息 */
    orderInfo: BookingOrderInfo;

    constructor(data?: IGetPersonBookingOrderOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bookingInfo = data["bookingInfo"] ? BookingInfoDto.fromJS(data["bookingInfo"]) : <any>undefined;
            this.orderInfo = data["orderInfo"] ? BookingOrderInfo.fromJS(data["orderInfo"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPersonBookingOrderOutput {
        let result = new GetPersonBookingOrderOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingInfo"] = this.bookingInfo ? this.bookingInfo.toJSON() : <any>undefined;
        data["orderInfo"] = this.orderInfo ? this.orderInfo.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetPersonBookingOrderOutput {
    /** 预约信息 */
    bookingInfo: BookingInfoDto;
    /** 预约订单信息 */
    orderInfo: BookingOrderInfo;
}

export class BookingInfoDto implements IBookingInfoDto {
    /** 预约名称 */
    bookingName: string;
    /** 门店名称 */
    outletName: string;
    /** 机构名称 */
    tenantName: string;
    /** 门店地址 */
    outletAddress: string;
    /** 联系人 */
    contactor: string;
    /** 联系人电话 */
    contactorPhoneNum: string;
    /** 联系人二维码 */
    contactorQrcode: string;
    /** 门店图片 */
    outletPictureUrl: string;

    constructor(data?: IBookingInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bookingName = data["bookingName"];
            this.outletName = data["outletName"];
            this.tenantName = data["tenantName"];
            this.outletAddress = data["outletAddress"];
            this.contactor = data["contactor"];
            this.contactorPhoneNum = data["contactorPhoneNum"];
            this.contactorQrcode = data["contactorQrcode"];
            this.outletPictureUrl = data["outletPictureUrl"];
        }
    }

    static fromJS(data: any): BookingInfoDto {
        let result = new BookingInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingName"] = this.bookingName;
        data["outletName"] = this.outletName;
        data["tenantName"] = this.tenantName;
        data["outletAddress"] = this.outletAddress;
        data["contactor"] = this.contactor;
        data["contactorPhoneNum"] = this.contactorPhoneNum;
        data["contactorQrcode"] = this.contactorQrcode;
        data["outletPictureUrl"] = this.outletPictureUrl;
        return data; 
    }
}

export interface IBookingInfoDto {
    /** 预约名称 */
    bookingName: string;
    /** 门店名称 */
    outletName: string;
    /** 机构名称 */
    tenantName: string;
    /** 门店地址 */
    outletAddress: string;
    /** 联系人 */
    contactor: string;
    /** 联系人电话 */
    contactorPhoneNum: string;
    /** 联系人二维码 */
    contactorQrcode: string;
    /** 门店图片 */
    outletPictureUrl: string;
}

/** 预约订单详情 */
export class BookingOrderInfo implements IBookingOrderInfo {
    /** 预约日期 */
    bookingData: Moment;
    /** 预约时间 */
    hourOfDay: string;
    /** 预约人数 */
    bookingNum: number;
    /** 温馨提示 */
    hint: string;
    /** 客户名称 */
    customerName: string;
    /** 电话号码 */
    phoneNum: string;
    /** 邮箱地址 */
    emailAddress: string;
    /** 性别 */
    gender: string;
    /** 年龄 */
    age: number;
    /** 是否需要填写性别 */
    needGender: boolean;
    /** 需要年龄 */
    needAge: boolean;
    /** 需要邮箱 */
    needEmail: boolean;
    /** 取消理由 */
    refuseReason: string;
    /** 创建时间 */
    creationTime: Moment;
    /** 预约状态 */
    status: BookingOrderInfoStatus;
    id: number;

    constructor(data?: IBookingOrderInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bookingData = data["bookingData"] ? moment(data["bookingData"].toString()) : <any>undefined;
            this.hourOfDay = data["hourOfDay"];
            this.bookingNum = data["bookingNum"];
            this.hint = data["hint"];
            this.customerName = data["customerName"];
            this.phoneNum = data["phoneNum"];
            this.emailAddress = data["emailAddress"];
            this.gender = data["gender"];
            this.age = data["age"];
            this.needGender = data["needGender"];
            this.needAge = data["needAge"];
            this.needEmail = data["needEmail"];
            this.refuseReason = data["refuseReason"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.status = data["status"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): BookingOrderInfo {
        let result = new BookingOrderInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingData"] = this.bookingData ? this.bookingData.toISOString() : <any>undefined;
        data["hourOfDay"] = this.hourOfDay;
        data["bookingNum"] = this.bookingNum;
        data["hint"] = this.hint;
        data["customerName"] = this.customerName;
        data["phoneNum"] = this.phoneNum;
        data["emailAddress"] = this.emailAddress;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["needGender"] = this.needGender;
        data["needAge"] = this.needAge;
        data["needEmail"] = this.needEmail;
        data["refuseReason"] = this.refuseReason;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["id"] = this.id;
        return data; 
    }
}

/** 预约订单详情 */
export interface IBookingOrderInfo {
    /** 预约日期 */
    bookingData: Moment;
    /** 预约时间 */
    hourOfDay: string;
    /** 预约人数 */
    bookingNum: number;
    /** 温馨提示 */
    hint: string;
    /** 客户名称 */
    customerName: string;
    /** 电话号码 */
    phoneNum: string;
    /** 邮箱地址 */
    emailAddress: string;
    /** 性别 */
    gender: string;
    /** 年龄 */
    age: number;
    /** 是否需要填写性别 */
    needGender: boolean;
    /** 需要年龄 */
    needAge: boolean;
    /** 需要邮箱 */
    needEmail: boolean;
    /** 取消理由 */
    refuseReason: string;
    /** 创建时间 */
    creationTime: Moment;
    /** 预约状态 */
    status: BookingOrderInfoStatus;
    id: number;
}

export class CancelBookingOrderInput implements ICancelBookingOrderInput {
    /** 取消理由（必填） */
    refuseReason: string;
    id: number;

    constructor(data?: ICancelBookingOrderInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.refuseReason = data["refuseReason"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CancelBookingOrderInput {
        let result = new CancelBookingOrderInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["refuseReason"] = this.refuseReason;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICancelBookingOrderInput {
    /** 取消理由（必填） */
    refuseReason: string;
    id: number;
}

export class StickedInput implements IStickedInput {
    /** 置顶/取消 */
    sticked: boolean;
    id: number;

    constructor(data?: IStickedInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sticked = data["sticked"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): StickedInput {
        let result = new StickedInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sticked"] = this.sticked;
        data["id"] = this.id;
        return data; 
    }
}

export interface IStickedInput {
    /** 置顶/取消 */
    sticked: boolean;
    id: number;
}

export class ListResultDtoOfFlatPermissionWithLevelDto implements IListResultDtoOfFlatPermissionWithLevelDto {
    items: FlatPermissionWithLevelDto[];

    constructor(data?: IListResultDtoOfFlatPermissionWithLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(FlatPermissionWithLevelDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfFlatPermissionWithLevelDto {
        let result = new ListResultDtoOfFlatPermissionWithLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfFlatPermissionWithLevelDto {
    items: FlatPermissionWithLevelDto[];
}

export class FlatPermissionWithLevelDto implements IFlatPermissionWithLevelDto {
    /** 权限等级 */
    level: number;
    /** 父权限名称 */
    parentName: string;
    /** (系统)名称 */
    name: string;
    /** 显示名称 */
    displayName: string;
    /** 描述 */
    description: string;
    /** 默认授予 */
    isGrantedByDefault: boolean;

    constructor(data?: IFlatPermissionWithLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.level = data["level"];
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.isGrantedByDefault = data["isGrantedByDefault"];
        }
    }

    static fromJS(data: any): FlatPermissionWithLevelDto {
        let result = new FlatPermissionWithLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level;
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isGrantedByDefault"] = this.isGrantedByDefault;
        return data; 
    }
}

export interface IFlatPermissionWithLevelDto {
    /** 权限等级 */
    level: number;
    /** 父权限名称 */
    parentName: string;
    /** (系统)名称 */
    name: string;
    /** 显示名称 */
    displayName: string;
    /** 描述 */
    description: string;
    /** 默认授予 */
    isGrantedByDefault: boolean;
}

export class PagedResultDtoOfPictureListDto implements IPagedResultDtoOfPictureListDto {
    totalCount: number;
    items: PictureListDto[];

    constructor(data?: IPagedResultDtoOfPictureListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(PictureListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfPictureListDto {
        let result = new PagedResultDtoOfPictureListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfPictureListDto {
    totalCount: number;
    items: PictureListDto[];
}

export class PictureListDto implements IPictureListDto {
    /** 名称 */
    name: string;
    /** 图片Url */
    originalUrl: string;
    /** 文件 Key(eg:七牛) */
    key: string;
    /** 图片类型 */
    mimeType: string;
    /** 创建时间 */
    creationTime: Moment;
    id: number;

    constructor(data?: IPictureListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.originalUrl = data["originalUrl"];
            this.key = data["key"];
            this.mimeType = data["mimeType"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): PictureListDto {
        let result = new PictureListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["originalUrl"] = this.originalUrl;
        data["key"] = this.key;
        data["mimeType"] = this.mimeType;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IPictureListDto {
    /** 名称 */
    name: string;
    /** 图片Url */
    originalUrl: string;
    /** 文件 Key(eg:七牛) */
    key: string;
    /** 图片类型 */
    mimeType: string;
    /** 创建时间 */
    creationTime: Moment;
    id: number;
}

export class UploadTokenOutput implements IUploadTokenOutput {
    token: string;
    expirationOnUtc: Moment;

    constructor(data?: IUploadTokenOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.token = data["token"];
            this.expirationOnUtc = data["expirationOnUtc"] ? moment(data["expirationOnUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UploadTokenOutput {
        let result = new UploadTokenOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["expirationOnUtc"] = this.expirationOnUtc ? this.expirationOnUtc.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IUploadTokenOutput {
    token: string;
    expirationOnUtc: Moment;
}

export class CreateOrUpdatePictureInput implements ICreateOrUpdatePictureInput {
    /** 名称 */
    name: string;
    /** 图片 Key */
    key: string;
    /** 创建者id (回调用,必须大于0) */
    creatorUserId: number;
    /** 租户Id */
    tenantId: number;
    /** 分组Id */
    groupId: number;
    id: number;

    constructor(data?: ICreateOrUpdatePictureInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.key = data["key"];
            this.creatorUserId = data["creatorUserId"];
            this.tenantId = data["tenantId"];
            this.groupId = data["groupId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdatePictureInput {
        let result = new CreateOrUpdatePictureInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["key"] = this.key;
        data["creatorUserId"] = this.creatorUserId;
        data["tenantId"] = this.tenantId;
        data["groupId"] = this.groupId;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateOrUpdatePictureInput {
    /** 名称 */
    name: string;
    /** 图片 Key */
    key: string;
    /** 创建者id (回调用,必须大于0) */
    creatorUserId: number;
    /** 租户Id */
    tenantId: number;
    /** 分组Id */
    groupId: number;
    id: number;
}

export class PictureGroupListDto implements IPictureGroupListDto {
    /** 分组名称 */
    name: string;
    /** 图片数量 */
    pictureNum: number;
    /** 是否系统分组 */
    isSystemGroup: boolean;
    /** 创建者Id */
    creatorUserId: number;
    /** 创建时间 */
    creationTime: Moment;
    id: number;

    constructor(data?: IPictureGroupListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.pictureNum = data["pictureNum"];
            this.isSystemGroup = data["isSystemGroup"];
            this.creatorUserId = data["creatorUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): PictureGroupListDto {
        let result = new PictureGroupListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["pictureNum"] = this.pictureNum;
        data["isSystemGroup"] = this.isSystemGroup;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IPictureGroupListDto {
    /** 分组名称 */
    name: string;
    /** 图片数量 */
    pictureNum: number;
    /** 是否系统分组 */
    isSystemGroup: boolean;
    /** 创建者Id */
    creatorUserId: number;
    /** 创建时间 */
    creationTime: Moment;
    id: number;
}

export class CreateOrUpdatePictureGroupInput implements ICreateOrUpdatePictureGroupInput {
    name: string;
    id: number;

    constructor(data?: ICreateOrUpdatePictureGroupInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdatePictureGroupInput {
        let result = new CreateOrUpdatePictureGroupInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateOrUpdatePictureGroupInput {
    name: string;
    id: number;
}

export class CurrentUserProfileEditDto implements ICurrentUserProfileEditDto {
    /** 名字 */
    name: string;
    /** 昵称 */
    nickName: string;
    /** 用户名 */
    userName: string;
    /** 邮箱地址 */
    emailAddress: string;
    phoneNumber: string;
    /** 时区 */
    timezone: string;
    /** 性别 */
    gender: CurrentUserProfileEditDtoGender;
    /** 头像Url */
    profilePictureUrl: string;
    /** 图片Id */
    profilePictureId: number;

    constructor(data?: ICurrentUserProfileEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.nickName = data["nickName"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.timezone = data["timezone"];
            this.gender = data["gender"];
            this.profilePictureUrl = data["profilePictureUrl"];
            this.profilePictureId = data["profilePictureId"];
        }
    }

    static fromJS(data: any): CurrentUserProfileEditDto {
        let result = new CurrentUserProfileEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["nickName"] = this.nickName;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["timezone"] = this.timezone;
        data["gender"] = this.gender;
        data["profilePictureUrl"] = this.profilePictureUrl;
        data["profilePictureId"] = this.profilePictureId;
        return data; 
    }
}

export interface ICurrentUserProfileEditDto {
    /** 名字 */
    name: string;
    /** 昵称 */
    nickName: string;
    /** 用户名 */
    userName: string;
    /** 邮箱地址 */
    emailAddress: string;
    phoneNumber: string;
    /** 时区 */
    timezone: string;
    /** 性别 */
    gender: CurrentUserProfileEditDtoGender;
    /** 头像Url */
    profilePictureUrl: string;
    /** 图片Id */
    profilePictureId: number;
}

export class ChangePasswordInput implements IChangePasswordInput {
    /** 旧密码 */
    currentPassword: string;
    /** 新密码 */
    newPassword: string;

    constructor(data?: IChangePasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.currentPassword = data["currentPassword"];
            this.newPassword = data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordInput {
        let result = new ChangePasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        return data; 
    }
}

export interface IChangePasswordInput {
    /** 旧密码 */
    currentPassword: string;
    /** 新密码 */
    newPassword: string;
}

export class ChangePasswordByPhoneInput implements IChangePasswordByPhoneInput {
    /** 手机验证码 */
    code: string;
    /** 新密码 */
    newPassword: string;

    constructor(data?: IChangePasswordByPhoneInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.newPassword = data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordByPhoneInput {
        let result = new ChangePasswordByPhoneInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["newPassword"] = this.newPassword;
        return data; 
    }
}

export interface IChangePasswordByPhoneInput {
    /** 手机验证码 */
    code: string;
    /** 新密码 */
    newPassword: string;
}

export class BindingPhoneNumInput implements IBindingPhoneNumInput {
    /** 手机号码 */
    phoneNum: string;
    /** 手机验证码 */
    code: string;

    constructor(data?: IBindingPhoneNumInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.phoneNum = data["phoneNum"];
            this.code = data["code"];
        }
    }

    static fromJS(data: any): BindingPhoneNumInput {
        let result = new BindingPhoneNumInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNum"] = this.phoneNum;
        data["code"] = this.code;
        return data; 
    }
}

export interface IBindingPhoneNumInput {
    /** 手机号码 */
    phoneNum: string;
    /** 手机验证码 */
    code: string;
}

export class ChangeBindingPhoneNumInput implements IChangeBindingPhoneNumInput {
    /** 解绑码 */
    validCode: string;
    /** 手机号码 */
    newTelephone: string;
    /** 手机验证码 */
    bundlingCode: string;

    constructor(data?: IChangeBindingPhoneNumInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.validCode = data["validCode"];
            this.newTelephone = data["newTelephone"];
            this.bundlingCode = data["bundlingCode"];
        }
    }

    static fromJS(data: any): ChangeBindingPhoneNumInput {
        let result = new ChangeBindingPhoneNumInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["validCode"] = this.validCode;
        data["newTelephone"] = this.newTelephone;
        data["bundlingCode"] = this.bundlingCode;
        return data; 
    }
}

export interface IChangeBindingPhoneNumInput {
    /** 解绑码 */
    validCode: string;
    /** 手机号码 */
    newTelephone: string;
    /** 手机验证码 */
    bundlingCode: string;
}

export class UpdateProfilePictureInput implements IUpdateProfilePictureInput {
    /** 图片Id */
    profilePictureId: number;

    constructor(data?: IUpdateProfilePictureInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profilePictureId = data["profilePictureId"];
        }
    }

    static fromJS(data: any): UpdateProfilePictureInput {
        let result = new UpdateProfilePictureInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profilePictureId"] = this.profilePictureId;
        return data; 
    }
}

export interface IUpdateProfilePictureInput {
    /** 图片Id */
    profilePictureId: number;
}

export class GetPasswordComplexitySettingOutput implements IGetPasswordComplexitySettingOutput {
    setting: PasswordComplexitySetting;

    constructor(data?: IGetPasswordComplexitySettingOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.setting = data["setting"] ? PasswordComplexitySetting.fromJS(data["setting"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPasswordComplexitySettingOutput {
        let result = new GetPasswordComplexitySettingOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["setting"] = this.setting ? this.setting.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetPasswordComplexitySettingOutput {
    setting: PasswordComplexitySetting;
}

export class GetProfilePictureOutput implements IGetProfilePictureOutput {
    profilePicture: string;

    constructor(data?: IGetProfilePictureOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profilePicture = data["profilePicture"];
        }
    }

    static fromJS(data: any): GetProfilePictureOutput {
        let result = new GetProfilePictureOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profilePicture"] = this.profilePicture;
        return data; 
    }
}

export interface IGetProfilePictureOutput {
    profilePicture: string;
}

export class ChangeUserLanguageDto implements IChangeUserLanguageDto {
    /** 语言名称 */
    languageName: string;

    constructor(data?: IChangeUserLanguageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.languageName = data["languageName"];
        }
    }

    static fromJS(data: any): ChangeUserLanguageDto {
        let result = new ChangeUserLanguageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        return data; 
    }
}

export interface IChangeUserLanguageDto {
    /** 语言名称 */
    languageName: string;
}

export class UserSecurityInfoDto implements IUserSecurityInfoDto {
    emailAddress: string;
    phoneNumber: string;
    weChat: string;
    qq: string;
    weiBo: string;

    constructor(data?: IUserSecurityInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.weChat = data["weChat"];
            this.qq = data["qq"];
            this.weiBo = data["weiBo"];
        }
    }

    static fromJS(data: any): UserSecurityInfoDto {
        let result = new UserSecurityInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["weChat"] = this.weChat;
        data["qq"] = this.qq;
        data["weiBo"] = this.weiBo;
        return data; 
    }
}

export interface IUserSecurityInfoDto {
    emailAddress: string;
    phoneNumber: string;
    weChat: string;
    qq: string;
    weiBo: string;
}

export class PagedResultDtoOfRoleListDto implements IPagedResultDtoOfRoleListDto {
    totalCount: number;
    items: RoleListDto[];

    constructor(data?: IPagedResultDtoOfRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(RoleListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRoleListDto {
        let result = new PagedResultDtoOfRoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfRoleListDto {
    totalCount: number;
    items: RoleListDto[];
}

export class RoleListDto implements IRoleListDto {
    /** 角色名称 */
    name: string;
    /** 显示名称 */
    displayName: string;
    /** 是否为系统角色 */
    isStatic: boolean;
    /** 是否默认分配(给用户) */
    isDefault: boolean;
    /** 创建时间 */
    creationTime: Moment;
    id: number;

    constructor(data?: IRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.isStatic = data["isStatic"];
            this.isDefault = data["isDefault"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): RoleListDto {
        let result = new RoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isStatic"] = this.isStatic;
        data["isDefault"] = this.isDefault;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IRoleListDto {
    /** 角色名称 */
    name: string;
    /** 显示名称 */
    displayName: string;
    /** 是否为系统角色 */
    isStatic: boolean;
    /** 是否默认分配(给用户) */
    isDefault: boolean;
    /** 创建时间 */
    creationTime: Moment;
    id: number;
}

export class GetRoleForEditOutput implements IGetRoleForEditOutput {
    /** 角色详情 */
    role: RoleEditDto;
    /** 权限集合 */
    permissions: FlatPermissionDto[];
    /** 赋予权限名称集合 */
    grantedPermissionNames: string[];

    constructor(data?: IGetRoleForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : <any>undefined;
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(FlatPermissionDto.fromJS(item));
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): GetRoleForEditOutput {
        let result = new GetRoleForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface IGetRoleForEditOutput {
    /** 角色详情 */
    role: RoleEditDto;
    /** 权限集合 */
    permissions: FlatPermissionDto[];
    /** 赋予权限名称集合 */
    grantedPermissionNames: string[];
}

export class RoleEditDto implements IRoleEditDto {
    /** 角色Id(可空) */
    id: number;
    /** 显示名 */
    displayName: string;
    /** 是否默认 */
    isDefault: boolean;

    constructor(data?: IRoleEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.isDefault = data["isDefault"];
        }
    }

    static fromJS(data: any): RoleEditDto {
        let result = new RoleEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        return data; 
    }
}

export interface IRoleEditDto {
    /** 角色Id(可空) */
    id: number;
    /** 显示名 */
    displayName: string;
    /** 是否默认 */
    isDefault: boolean;
}

export class FlatPermissionDto implements IFlatPermissionDto {
    /** 父权限名称 */
    parentName: string;
    /** (系统)名称 */
    name: string;
    /** 显示名称 */
    displayName: string;
    /** 描述 */
    description: string;
    /** 默认授予 */
    isGrantedByDefault: boolean;

    constructor(data?: IFlatPermissionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.isGrantedByDefault = data["isGrantedByDefault"];
        }
    }

    static fromJS(data: any): FlatPermissionDto {
        let result = new FlatPermissionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isGrantedByDefault"] = this.isGrantedByDefault;
        return data; 
    }
}

export interface IFlatPermissionDto {
    /** 父权限名称 */
    parentName: string;
    /** (系统)名称 */
    name: string;
    /** 显示名称 */
    displayName: string;
    /** 描述 */
    description: string;
    /** 默认授予 */
    isGrantedByDefault: boolean;
}

export class CreateOrUpdateRoleInput implements ICreateOrUpdateRoleInput {
    /** 角色详情 */
    role: RoleEditDto = new RoleEditDto();
    /** 授予权限 */
    grantedPermissionNames: string[] = [];

    constructor(data?: ICreateOrUpdateRoleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : new RoleEditDto();
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateRoleInput {
        let result = new CreateOrUpdateRoleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface ICreateOrUpdateRoleInput {
    /** 角色详情 */
    role: RoleEditDto;
    /** 授予权限 */
    grantedPermissionNames: string[];
}

export class GetCurrentLoginInformationsOutput implements IGetCurrentLoginInformationsOutput {
    user: UserLoginInfoDto;
    tenant: TenantLoginInfoDto;
    application: ApplicationInfoDto;

    constructor(data?: IGetCurrentLoginInformationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.user = data["user"] ? UserLoginInfoDto.fromJS(data["user"]) : <any>undefined;
            this.tenant = data["tenant"] ? TenantLoginInfoDto.fromJS(data["tenant"]) : <any>undefined;
            this.application = data["application"] ? ApplicationInfoDto.fromJS(data["application"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCurrentLoginInformationsOutput {
        let result = new GetCurrentLoginInformationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
        data["application"] = this.application ? this.application.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetCurrentLoginInformationsOutput {
    user: UserLoginInfoDto;
    tenant: TenantLoginInfoDto;
    application: ApplicationInfoDto;
}

export class UserLoginInfoDto implements IUserLoginInfoDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    profilePictureId: string;
    phoneNumber: string;
    id: number;

    constructor(data?: IUserLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.profilePictureId = data["profilePictureId"];
            this.phoneNumber = data["phoneNumber"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserLoginInfoDto {
        let result = new UserLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["profilePictureId"] = this.profilePictureId;
        data["phoneNumber"] = this.phoneNumber;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserLoginInfoDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    profilePictureId: string;
    phoneNumber: string;
    id: number;
}

export class TenantLoginInfoDto implements ITenantLoginInfoDto {
    tenancyName: string;
    name: string;
    logoId: number;
    logoFileType: string;
    subscriptionEndDateUtc: Moment;
    isInTrialPeriod: boolean;
    edition: EditionInfoDto;
    creationTime: Moment;
    paymentPeriodType: TenantLoginInfoDtoPaymentPeriodType;
    subscriptionDateString: string;
    creationTimeString: string;
    id: number;

    constructor(data?: ITenantLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.logoId = data["logoId"];
            this.logoFileType = data["logoFileType"];
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            this.isInTrialPeriod = data["isInTrialPeriod"];
            this.edition = data["edition"] ? EditionInfoDto.fromJS(data["edition"]) : <any>undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.paymentPeriodType = data["paymentPeriodType"];
            this.subscriptionDateString = data["subscriptionDateString"];
            this.creationTimeString = data["creationTimeString"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantLoginInfoDto {
        let result = new TenantLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["logoId"] = this.logoId;
        data["logoFileType"] = this.logoFileType;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["paymentPeriodType"] = this.paymentPeriodType;
        data["subscriptionDateString"] = this.subscriptionDateString;
        data["creationTimeString"] = this.creationTimeString;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantLoginInfoDto {
    tenancyName: string;
    name: string;
    logoId: number;
    logoFileType: string;
    subscriptionEndDateUtc: Moment;
    isInTrialPeriod: boolean;
    edition: EditionInfoDto;
    creationTime: Moment;
    paymentPeriodType: TenantLoginInfoDtoPaymentPeriodType;
    subscriptionDateString: string;
    creationTimeString: string;
    id: number;
}

export class ApplicationInfoDto implements IApplicationInfoDto {
    version: string;
    releaseDate: Moment;
    features: { [key: string] : boolean; };

    constructor(data?: IApplicationInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.version = data["version"];
            this.releaseDate = data["releaseDate"] ? moment(data["releaseDate"].toString()) : <any>undefined;
            if (data["features"]) {
                this.features = {};
                for (let key in data["features"]) {
                    if (data["features"].hasOwnProperty(key))
                        this.features[key] = data["features"][key];
                }
            }
        }
    }

    static fromJS(data: any): ApplicationInfoDto {
        let result = new ApplicationInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : <any>undefined;
        if (this.features) {
            data["features"] = {};
            for (let key in this.features) {
                if (this.features.hasOwnProperty(key))
                    data["features"][key] = this.features[key];
            }
        }
        return data; 
    }
}

export interface IApplicationInfoDto {
    version: string;
    releaseDate: Moment;
    features: { [key: string] : boolean; };
}

export class EditionInfoDto implements IEditionInfoDto {
    displayName: string;
    trialDayCount: number;
    monthlyPrice: number;
    annualPrice: number;
    isHighestEdition: boolean;
    isFree: boolean;
    id: number;

    constructor(data?: IEditionInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.trialDayCount = data["trialDayCount"];
            this.monthlyPrice = data["monthlyPrice"];
            this.annualPrice = data["annualPrice"];
            this.isHighestEdition = data["isHighestEdition"];
            this.isFree = data["isFree"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EditionInfoDto {
        let result = new EditionInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["trialDayCount"] = this.trialDayCount;
        data["monthlyPrice"] = this.monthlyPrice;
        data["annualPrice"] = this.annualPrice;
        data["isHighestEdition"] = this.isHighestEdition;
        data["isFree"] = this.isFree;
        data["id"] = this.id;
        return data; 
    }
}

export interface IEditionInfoDto {
    displayName: string;
    trialDayCount: number;
    monthlyPrice: number;
    annualPrice: number;
    isHighestEdition: boolean;
    isFree: boolean;
    id: number;
}

/** 批量发送短信 */
export class BatchSendSMSInput implements IBatchSendSMSInput {
    /** 目标号码数组 */
    targetNumbers: string[];
    /** 内容 */
    content: string;
    /** 验证码结果字符串 */
    captchaResponse: string;

    constructor(data?: IBatchSendSMSInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["targetNumbers"] && data["targetNumbers"].constructor === Array) {
                this.targetNumbers = [];
                for (let item of data["targetNumbers"])
                    this.targetNumbers.push(item);
            }
            this.content = data["content"];
            this.captchaResponse = data["captchaResponse"];
        }
    }

    static fromJS(data: any): BatchSendSMSInput {
        let result = new BatchSendSMSInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.targetNumbers && this.targetNumbers.constructor === Array) {
            data["targetNumbers"] = [];
            for (let item of this.targetNumbers)
                data["targetNumbers"].push(item);
        }
        data["content"] = this.content;
        data["captchaResponse"] = this.captchaResponse;
        return data; 
    }
}

/** 批量发送短信 */
export interface IBatchSendSMSInput {
    /** 目标号码数组 */
    targetNumbers: string[];
    /** 内容 */
    content: string;
    /** 验证码结果字符串 */
    captchaResponse: string;
}

export class SendResult implements ISendResult {
    success: boolean;
    errorMessage: string;
    successCount: number;
    failCount: number;

    constructor(data?: ISendResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"];
            this.errorMessage = data["errorMessage"];
            this.successCount = data["successCount"];
            this.failCount = data["failCount"];
        }
    }

    static fromJS(data: any): SendResult {
        let result = new SendResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["errorMessage"] = this.errorMessage;
        data["successCount"] = this.successCount;
        data["failCount"] = this.failCount;
        return data; 
    }
}

export interface ISendResult {
    success: boolean;
    errorMessage: string;
    successCount: number;
    failCount: number;
}

export class UserCodeSendInput implements IUserCodeSendInput {
    /** 验证码类型 */
    codeType: UserCodeSendInputCodeType;
    /** 验证码结果字符串 */
    captchaResponse: string;

    constructor(data?: IUserCodeSendInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.codeType = data["codeType"];
            this.captchaResponse = data["captchaResponse"];
        }
    }

    static fromJS(data: any): UserCodeSendInput {
        let result = new UserCodeSendInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["codeType"] = this.codeType;
        data["captchaResponse"] = this.captchaResponse;
        return data; 
    }
}

export interface IUserCodeSendInput {
    /** 验证码类型 */
    codeType: UserCodeSendInputCodeType;
    /** 验证码结果字符串 */
    captchaResponse: string;
}

export class CodeSendInput implements ICodeSendInput {
    /** 目标号码(数组) */
    targetNumber: string;
    /** 验证码类型 */
    codeType: CodeSendInputCodeType;
    /** 验证码结果字符串 */
    captchaResponse: string;

    constructor(data?: ICodeSendInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.targetNumber = data["targetNumber"];
            this.codeType = data["codeType"];
            this.captchaResponse = data["captchaResponse"];
        }
    }

    static fromJS(data: any): CodeSendInput {
        let result = new CodeSendInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetNumber"] = this.targetNumber;
        data["codeType"] = this.codeType;
        data["captchaResponse"] = this.captchaResponse;
        return data; 
    }
}

export interface ICodeSendInput {
    /** 目标号码(数组) */
    targetNumber: string;
    /** 验证码类型 */
    codeType: CodeSendInputCodeType;
    /** 验证码结果字符串 */
    captchaResponse: string;
}

export class CheckUserCodeInput implements ICheckUserCodeInput {
    /** 验证码 */
    code: string;
    /** 验证码类型 */
    codeType: CheckUserCodeInputCodeType;
    /** 验证码结果字符串 */
    captchaResponse: string;

    constructor(data?: ICheckUserCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.codeType = data["codeType"];
            this.captchaResponse = data["captchaResponse"];
        }
    }

    static fromJS(data: any): CheckUserCodeInput {
        let result = new CheckUserCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["codeType"] = this.codeType;
        data["captchaResponse"] = this.captchaResponse;
        return data; 
    }
}

export interface ICheckUserCodeInput {
    /** 验证码 */
    code: string;
    /** 验证码类型 */
    codeType: CheckUserCodeInputCodeType;
    /** 验证码结果字符串 */
    captchaResponse: string;
}

export class PagedResultDtoOfSMSTemplateListDto implements IPagedResultDtoOfSMSTemplateListDto {
    totalCount: number;
    items: SMSTemplateListDto[];

    constructor(data?: IPagedResultDtoOfSMSTemplateListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SMSTemplateListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSMSTemplateListDto {
        let result = new PagedResultDtoOfSMSTemplateListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfSMSTemplateListDto {
    totalCount: number;
    items: SMSTemplateListDto[];
}

export class SMSTemplateListDto implements ISMSTemplateListDto {
    /** 模板消息名称 */
    name: string;
    /** 短息模板编号（第三方短信编号） */
    templateCode: string;
    /** 短信供应商名称 */
    smsProvider: string;
    /** 创建时间 */
    creationTime: Moment;
    /** 是否激活 */
    isActive: boolean;
    id: number;

    constructor(data?: ISMSTemplateListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.templateCode = data["templateCode"];
            this.smsProvider = data["smsProvider"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SMSTemplateListDto {
        let result = new SMSTemplateListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["templateCode"] = this.templateCode;
        data["smsProvider"] = this.smsProvider;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface ISMSTemplateListDto {
    /** 模板消息名称 */
    name: string;
    /** 短息模板编号（第三方短信编号） */
    templateCode: string;
    /** 短信供应商名称 */
    smsProvider: string;
    /** 创建时间 */
    creationTime: Moment;
    /** 是否激活 */
    isActive: boolean;
    id: number;
}

export class GetSMSTemplateForEditDto implements IGetSMSTemplateForEditDto {
    /** 模板消息名称 */
    name: string;
    /** 短息模板编号（第三方短信编号） */
    templateCode: string;
    /** 短信供应商名称 */
    smsProvider: string;
    /** 创建时间 */
    creationTime: Moment;
    /** 最后修改时间 */
    lastModificationTime: Moment;
    /** 是否激活 */
    isActive: boolean;
    /** 模板参数集合 */
    items: SMSTemplateItemDto[];
    /** 可用的短信供应商 */
    availabelSmsProviders: SMSProviderInfoDto[];
    id: number;

    constructor(data?: IGetSMSTemplateForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.templateCode = data["templateCode"];
            this.smsProvider = data["smsProvider"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = data["isActive"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SMSTemplateItemDto.fromJS(item));
            }
            if (data["availabelSmsProviders"] && data["availabelSmsProviders"].constructor === Array) {
                this.availabelSmsProviders = [];
                for (let item of data["availabelSmsProviders"])
                    this.availabelSmsProviders.push(SMSProviderInfoDto.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): GetSMSTemplateForEditDto {
        let result = new GetSMSTemplateForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["templateCode"] = this.templateCode;
        data["smsProvider"] = this.smsProvider;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        if (this.availabelSmsProviders && this.availabelSmsProviders.constructor === Array) {
            data["availabelSmsProviders"] = [];
            for (let item of this.availabelSmsProviders)
                data["availabelSmsProviders"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IGetSMSTemplateForEditDto {
    /** 模板消息名称 */
    name: string;
    /** 短息模板编号（第三方短信编号） */
    templateCode: string;
    /** 短信供应商名称 */
    smsProvider: string;
    /** 创建时间 */
    creationTime: Moment;
    /** 最后修改时间 */
    lastModificationTime: Moment;
    /** 是否激活 */
    isActive: boolean;
    /** 模板参数集合 */
    items: SMSTemplateItemDto[];
    /** 可用的短信供应商 */
    availabelSmsProviders: SMSProviderInfoDto[];
    id: number;
}

export class SMSTemplateItemDto implements ISMSTemplateItemDto {
    /** 创建时间 */
    creationTime: Moment;
    /** 模板参数Id，null时为创建,有值时为更新 */
    id: number;
    /** 模板消息字段名 */
    dataItemName: string;
    /** 模板消息字段值类 */
    dataItemValue: string;

    constructor(data?: ISMSTemplateItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
            this.dataItemName = data["dataItemName"];
            this.dataItemValue = data["dataItemValue"];
        }
    }

    static fromJS(data: any): SMSTemplateItemDto {
        let result = new SMSTemplateItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        data["dataItemName"] = this.dataItemName;
        data["dataItemValue"] = this.dataItemValue;
        return data; 
    }
}

export interface ISMSTemplateItemDto {
    /** 创建时间 */
    creationTime: Moment;
    /** 模板参数Id，null时为创建,有值时为更新 */
    id: number;
    /** 模板消息字段名 */
    dataItemName: string;
    /** 模板消息字段值类 */
    dataItemValue: string;
}

export class SMSProviderInfoDto implements ISMSProviderInfoDto {
    /** 名称(显示名称) */
    displayName: string;
    /** 系统名称 */
    systemName: string;

    constructor(data?: ISMSProviderInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.systemName = data["systemName"];
        }
    }

    static fromJS(data: any): SMSProviderInfoDto {
        let result = new SMSProviderInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["systemName"] = this.systemName;
        return data; 
    }
}

export interface ISMSProviderInfoDto {
    /** 名称(显示名称) */
    displayName: string;
    /** 系统名称 */
    systemName: string;
}

export class CreateOrUpdateSMSTemplateInput implements ICreateOrUpdateSMSTemplateInput {
    /** 模板Id，null时为创建,有值时为更新 */
    id: number;
    /** 模板消息名称 */
    name: string;
    /** 短息模板编号（第三方短信编号） */
    templateCode: string;
    /** 短信供应商名称 */
    smsProvider: string;
    /** 是否激活 */
    isActive: boolean;
    /** 模板参数集合 */
    items: SMSTemplateItemInput[];

    constructor(data?: ICreateOrUpdateSMSTemplateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.templateCode = data["templateCode"];
            this.smsProvider = data["smsProvider"];
            this.isActive = data["isActive"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SMSTemplateItemInput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateSMSTemplateInput {
        let result = new CreateOrUpdateSMSTemplateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["templateCode"] = this.templateCode;
        data["smsProvider"] = this.smsProvider;
        data["isActive"] = this.isActive;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateOrUpdateSMSTemplateInput {
    /** 模板Id，null时为创建,有值时为更新 */
    id: number;
    /** 模板消息名称 */
    name: string;
    /** 短息模板编号（第三方短信编号） */
    templateCode: string;
    /** 短信供应商名称 */
    smsProvider: string;
    /** 是否激活 */
    isActive: boolean;
    /** 模板参数集合 */
    items: SMSTemplateItemInput[];
}

export class SMSTemplateItemInput implements ISMSTemplateItemInput {
    /** 模板参数Id，null时为创建,有值时为更新 */
    id: number;
    /** 模板消息字段名 */
    dataItemName: string;
    /** 模板消息字段值类 */
    dataItemValue: string;

    constructor(data?: ISMSTemplateItemInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.dataItemName = data["dataItemName"];
            this.dataItemValue = data["dataItemValue"];
        }
    }

    static fromJS(data: any): SMSTemplateItemInput {
        let result = new SMSTemplateItemInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dataItemName"] = this.dataItemName;
        data["dataItemValue"] = this.dataItemValue;
        return data; 
    }
}

export interface ISMSTemplateItemInput {
    /** 模板参数Id，null时为创建,有值时为更新 */
    id: number;
    /** 模板消息字段名 */
    dataItemName: string;
    /** 模板消息字段值类 */
    dataItemValue: string;
}

export class PagedResultDtoOfProvinceListDto implements IPagedResultDtoOfProvinceListDto {
    totalCount: number;
    items: ProvinceListDto[];

    constructor(data?: IPagedResultDtoOfProvinceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ProvinceListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfProvinceListDto {
        let result = new PagedResultDtoOfProvinceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfProvinceListDto {
    totalCount: number;
    items: ProvinceListDto[];
}

export class ProvinceListDto implements IProvinceListDto {
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;

    constructor(data?: IProvinceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.display = data["display"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProvinceListDto {
        let result = new ProvinceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["display"] = this.display;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface IProvinceListDto {
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;
}

export class CreateOrUpdateProvinceInput implements ICreateOrUpdateProvinceInput {
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;

    constructor(data?: ICreateOrUpdateProvinceInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.display = data["display"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdateProvinceInput {
        let result = new CreateOrUpdateProvinceInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["display"] = this.display;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateOrUpdateProvinceInput {
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;
}

export class PagedResultDtoOfCityListDto implements IPagedResultDtoOfCityListDto {
    totalCount: number;
    items: CityListDto[];

    constructor(data?: IPagedResultDtoOfCityListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(CityListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfCityListDto {
        let result = new PagedResultDtoOfCityListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfCityListDto {
    totalCount: number;
    items: CityListDto[];
}

export class CityListDto implements ICityListDto {
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;

    constructor(data?: ICityListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.display = data["display"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CityListDto {
        let result = new CityListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["display"] = this.display;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICityListDto {
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;
}

export class CreateOrUpdateCityInput implements ICreateOrUpdateCityInput {
    /** 省份id */
    provinceId: number;
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;

    constructor(data?: ICreateOrUpdateCityInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.provinceId = data["provinceId"];
            this.name = data["name"];
            this.display = data["display"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdateCityInput {
        let result = new CreateOrUpdateCityInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["provinceId"] = this.provinceId;
        data["name"] = this.name;
        data["display"] = this.display;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateOrUpdateCityInput {
    /** 省份id */
    provinceId: number;
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;
}

export class PagedResultDtoOfDistrictListDto implements IPagedResultDtoOfDistrictListDto {
    totalCount: number;
    items: DistrictListDto[];

    constructor(data?: IPagedResultDtoOfDistrictListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(DistrictListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfDistrictListDto {
        let result = new PagedResultDtoOfDistrictListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfDistrictListDto {
    totalCount: number;
    items: DistrictListDto[];
}

export class DistrictListDto implements IDistrictListDto {
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;

    constructor(data?: IDistrictListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.display = data["display"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DistrictListDto {
        let result = new DistrictListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["display"] = this.display;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface IDistrictListDto {
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;
}

export class CreateOrUpdateDistrictInput implements ICreateOrUpdateDistrictInput {
    /** 城市id */
    cityId: number;
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;

    constructor(data?: ICreateOrUpdateDistrictInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.cityId = data["cityId"];
            this.name = data["name"];
            this.display = data["display"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdateDistrictInput {
        let result = new CreateOrUpdateDistrictInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cityId"] = this.cityId;
        data["name"] = this.name;
        data["display"] = this.display;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateOrUpdateDistrictInput {
    /** 城市id */
    cityId: number;
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number;
    /** 启用 */
    isActive: boolean;
    id: number;
}

export class PagedResultDtoOfTenantListDto implements IPagedResultDtoOfTenantListDto {
    totalCount: number;
    items: TenantListDto[];

    constructor(data?: IPagedResultDtoOfTenantListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TenantListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTenantListDto {
        let result = new PagedResultDtoOfTenantListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfTenantListDto {
    totalCount: number;
    items: TenantListDto[];
}

export class TenantListDto implements ITenantListDto {
    /** 租户名 */
    tenancyName: string;
    /** (显示)名称 */
    name: string;
    /** 版本名 */
    editionDisplayName: string;
    /** 连接字符串 */
    connectionString: string;
    /** 是否激活 */
    isActive: boolean;
    /** 创建时间 */
    creationTime: Moment;
    id: number;

    constructor(data?: ITenantListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.editionDisplayName = data["editionDisplayName"];
            this.connectionString = data["connectionString"];
            this.isActive = data["isActive"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantListDto {
        let result = new TenantListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["editionDisplayName"] = this.editionDisplayName;
        data["connectionString"] = this.connectionString;
        data["isActive"] = this.isActive;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantListDto {
    /** 租户名 */
    tenancyName: string;
    /** (显示)名称 */
    name: string;
    /** 版本名 */
    editionDisplayName: string;
    /** 连接字符串 */
    connectionString: string;
    /** 是否激活 */
    isActive: boolean;
    /** 创建时间 */
    creationTime: Moment;
    id: number;
}

export class CreateTenantInput implements ICreateTenantInput {
    /** 租户名称 */
    tenancyName: string;
    /** 名称 */
    name: string;
    /** 管理员邮箱地址 */
    adminEmailAddress: string;
    /** 管理员手机号码 */
    phoneNumber: string;
    /** 管理员密码 */
    adminPassword: string;
    /** 数据库连接字符串 */
    connectionString: string;
    /** 下次登录需要修改密码 */
    shouldChangePasswordOnNextLogin: boolean;
    /** 发送激活邮件 */
    sendActivationEmail: boolean;
    /** 版本Id */
    editionId: number;
    /** 激活 */
    isActive: boolean;
    subscriptionEndDateUtc: Moment;
    isInTrialPeriod: boolean;

    constructor(data?: ICreateTenantInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.adminEmailAddress = data["adminEmailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.adminPassword = data["adminPassword"];
            this.connectionString = data["connectionString"];
            this.shouldChangePasswordOnNextLogin = data["shouldChangePasswordOnNextLogin"];
            this.sendActivationEmail = data["sendActivationEmail"];
            this.editionId = data["editionId"];
            this.isActive = data["isActive"];
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            this.isInTrialPeriod = data["isInTrialPeriod"];
        }
    }

    static fromJS(data: any): CreateTenantInput {
        let result = new CreateTenantInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["adminEmailAddress"] = this.adminEmailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["adminPassword"] = this.adminPassword;
        data["connectionString"] = this.connectionString;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin;
        data["sendActivationEmail"] = this.sendActivationEmail;
        data["editionId"] = this.editionId;
        data["isActive"] = this.isActive;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        return data; 
    }
}

export interface ICreateTenantInput {
    /** 租户名称 */
    tenancyName: string;
    /** 名称 */
    name: string;
    /** 管理员邮箱地址 */
    adminEmailAddress: string;
    /** 管理员手机号码 */
    phoneNumber: string;
    /** 管理员密码 */
    adminPassword: string;
    /** 数据库连接字符串 */
    connectionString: string;
    /** 下次登录需要修改密码 */
    shouldChangePasswordOnNextLogin: boolean;
    /** 发送激活邮件 */
    sendActivationEmail: boolean;
    /** 版本Id */
    editionId: number;
    /** 激活 */
    isActive: boolean;
    subscriptionEndDateUtc: Moment;
    isInTrialPeriod: boolean;
}

export class GetTenantForEditOutput implements IGetTenantForEditOutput {
    /** 租户详情 */
    tenant: TenantEditDto;
    /** 特性(限制) */
    features: GetTenantFeaturesEditOutput;
    id: number;

    constructor(data?: IGetTenantForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenant = data["tenant"] ? TenantEditDto.fromJS(data["tenant"]) : <any>undefined;
            this.features = data["features"] ? GetTenantFeaturesEditOutput.fromJS(data["features"]) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): GetTenantForEditOutput {
        let result = new GetTenantForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
        data["features"] = this.features ? this.features.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IGetTenantForEditOutput {
    /** 租户详情 */
    tenant: TenantEditDto;
    /** 特性(限制) */
    features: GetTenantFeaturesEditOutput;
    id: number;
}

export class TenantEditDto implements ITenantEditDto {
    /** 租户名称 */
    tenancyName: string;
    /** 名称 */
    name: string;
    /** 数据库连接字符串 */
    connectionString: string;
    /** 版本Id */
    editionId: number;
    /** 激活 */
    isActive: boolean;
    /** 已有(设置的)特性值,更新时要赋值 */
    features: NameValueDto[];
    id: number;

    constructor(data?: ITenantEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.connectionString = data["connectionString"];
            this.editionId = data["editionId"];
            this.isActive = data["isActive"];
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(NameValueDto.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantEditDto {
        let result = new TenantEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["connectionString"] = this.connectionString;
        data["editionId"] = this.editionId;
        data["isActive"] = this.isActive;
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantEditDto {
    /** 租户名称 */
    tenancyName: string;
    /** 名称 */
    name: string;
    /** 数据库连接字符串 */
    connectionString: string;
    /** 版本Id */
    editionId: number;
    /** 激活 */
    isActive: boolean;
    /** 已有(设置的)特性值,更新时要赋值 */
    features: NameValueDto[];
    id: number;
}

export class GetTenantFeaturesEditOutput implements IGetTenantFeaturesEditOutput {
    featureValues: NameValueDto[];
    features: FlatFeatureDto[];

    constructor(data?: IGetTenantFeaturesEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetTenantFeaturesEditOutput {
        let result = new GetTenantFeaturesEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetTenantFeaturesEditOutput {
    featureValues: NameValueDto[];
    features: FlatFeatureDto[];
}

export class UpdateTenantFeaturesInput implements IUpdateTenantFeaturesInput {
    /** 租户Id */
    id: number;
    /** 特性 */
    featureValues: NameValueDto[] = [];

    constructor(data?: IUpdateTenantFeaturesInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateTenantFeaturesInput {
        let result = new UpdateTenantFeaturesInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateTenantFeaturesInput {
    /** 租户Id */
    id: number;
    /** 特性 */
    featureValues: NameValueDto[];
}

export class EntityDto implements IEntityDto {
    id: number;

    constructor(data?: IEntityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDto {
        let result = new EntityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDto {
    id: number;
}

export class GetMemberActivityOutput implements IGetMemberActivityOutput {
    memberActivities: MemberActivity[];

    constructor(data?: IGetMemberActivityOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["memberActivities"] && data["memberActivities"].constructor === Array) {
                this.memberActivities = [];
                for (let item of data["memberActivities"])
                    this.memberActivities.push(MemberActivity.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMemberActivityOutput {
        let result = new GetMemberActivityOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.memberActivities && this.memberActivities.constructor === Array) {
            data["memberActivities"] = [];
            for (let item of this.memberActivities)
                data["memberActivities"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetMemberActivityOutput {
    memberActivities: MemberActivity[];
}

export class MemberActivity implements IMemberActivity {
    name: string;
    earnings: string;
    cases: number;
    closed: number;
    rate: string;

    constructor(data?: IMemberActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.earnings = data["earnings"];
            this.cases = data["cases"];
            this.closed = data["closed"];
            this.rate = data["rate"];
        }
    }

    static fromJS(data: any): MemberActivity {
        let result = new MemberActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["earnings"] = this.earnings;
        data["cases"] = this.cases;
        data["closed"] = this.closed;
        data["rate"] = this.rate;
        return data; 
    }
}

export interface IMemberActivity {
    name: string;
    earnings: string;
    cases: number;
    closed: number;
    rate: string;
}

export class GetDashboardDataOutput implements IGetDashboardDataOutput {
    totalProfit: number;
    newFeedbacks: number;
    newOrders: number;
    newUsers: number;
    salesSummary: SalesSummaryData[];
    totalSales: number;
    revenue: number;
    expenses: number;
    growth: number;
    transactionPercent: number;
    newVisitPercent: number;
    bouncePercent: number;
    networkLoad: number[];
    cpuLoad: number[];
    loadRate: number[];
    timeLineItems: TimeLineItem[];

    constructor(data?: IGetDashboardDataOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalProfit = data["totalProfit"];
            this.newFeedbacks = data["newFeedbacks"];
            this.newOrders = data["newOrders"];
            this.newUsers = data["newUsers"];
            if (data["salesSummary"] && data["salesSummary"].constructor === Array) {
                this.salesSummary = [];
                for (let item of data["salesSummary"])
                    this.salesSummary.push(SalesSummaryData.fromJS(item));
            }
            this.totalSales = data["totalSales"];
            this.revenue = data["revenue"];
            this.expenses = data["expenses"];
            this.growth = data["growth"];
            this.transactionPercent = data["transactionPercent"];
            this.newVisitPercent = data["newVisitPercent"];
            this.bouncePercent = data["bouncePercent"];
            if (data["networkLoad"] && data["networkLoad"].constructor === Array) {
                this.networkLoad = [];
                for (let item of data["networkLoad"])
                    this.networkLoad.push(item);
            }
            if (data["cpuLoad"] && data["cpuLoad"].constructor === Array) {
                this.cpuLoad = [];
                for (let item of data["cpuLoad"])
                    this.cpuLoad.push(item);
            }
            if (data["loadRate"] && data["loadRate"].constructor === Array) {
                this.loadRate = [];
                for (let item of data["loadRate"])
                    this.loadRate.push(item);
            }
            if (data["timeLineItems"] && data["timeLineItems"].constructor === Array) {
                this.timeLineItems = [];
                for (let item of data["timeLineItems"])
                    this.timeLineItems.push(TimeLineItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDashboardDataOutput {
        let result = new GetDashboardDataOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalProfit"] = this.totalProfit;
        data["newFeedbacks"] = this.newFeedbacks;
        data["newOrders"] = this.newOrders;
        data["newUsers"] = this.newUsers;
        if (this.salesSummary && this.salesSummary.constructor === Array) {
            data["salesSummary"] = [];
            for (let item of this.salesSummary)
                data["salesSummary"].push(item.toJSON());
        }
        data["totalSales"] = this.totalSales;
        data["revenue"] = this.revenue;
        data["expenses"] = this.expenses;
        data["growth"] = this.growth;
        data["transactionPercent"] = this.transactionPercent;
        data["newVisitPercent"] = this.newVisitPercent;
        data["bouncePercent"] = this.bouncePercent;
        if (this.networkLoad && this.networkLoad.constructor === Array) {
            data["networkLoad"] = [];
            for (let item of this.networkLoad)
                data["networkLoad"].push(item);
        }
        if (this.cpuLoad && this.cpuLoad.constructor === Array) {
            data["cpuLoad"] = [];
            for (let item of this.cpuLoad)
                data["cpuLoad"].push(item);
        }
        if (this.loadRate && this.loadRate.constructor === Array) {
            data["loadRate"] = [];
            for (let item of this.loadRate)
                data["loadRate"].push(item);
        }
        if (this.timeLineItems && this.timeLineItems.constructor === Array) {
            data["timeLineItems"] = [];
            for (let item of this.timeLineItems)
                data["timeLineItems"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetDashboardDataOutput {
    totalProfit: number;
    newFeedbacks: number;
    newOrders: number;
    newUsers: number;
    salesSummary: SalesSummaryData[];
    totalSales: number;
    revenue: number;
    expenses: number;
    growth: number;
    transactionPercent: number;
    newVisitPercent: number;
    bouncePercent: number;
    networkLoad: number[];
    cpuLoad: number[];
    loadRate: number[];
    timeLineItems: TimeLineItem[];
}

export class SalesSummaryData implements ISalesSummaryData {
    period: string;
    sales: number;
    profit: number;

    constructor(data?: ISalesSummaryData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.period = data["period"];
            this.sales = data["sales"];
            this.profit = data["profit"];
        }
    }

    static fromJS(data: any): SalesSummaryData {
        let result = new SalesSummaryData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["period"] = this.period;
        data["sales"] = this.sales;
        data["profit"] = this.profit;
        return data; 
    }
}

export interface ISalesSummaryData {
    period: string;
    sales: number;
    profit: number;
}

export class TimeLineItem implements ITimeLineItem {
    title: string;
    image: string;
    autherName: string;
    longDate: string;
    shortDate: string;
    titleDate: string;
    text: string;

    constructor(data?: ITimeLineItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["title"];
            this.image = data["image"];
            this.autherName = data["autherName"];
            this.longDate = data["longDate"];
            this.shortDate = data["shortDate"];
            this.titleDate = data["titleDate"];
            this.text = data["text"];
        }
    }

    static fromJS(data: any): TimeLineItem {
        let result = new TimeLineItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["image"] = this.image;
        data["autherName"] = this.autherName;
        data["longDate"] = this.longDate;
        data["shortDate"] = this.shortDate;
        data["titleDate"] = this.titleDate;
        data["text"] = this.text;
        return data; 
    }
}

export interface ITimeLineItem {
    title: string;
    image: string;
    autherName: string;
    longDate: string;
    shortDate: string;
    titleDate: string;
    text: string;
}

export class GetSalesSummaryOutput implements IGetSalesSummaryOutput {
    salesSummary: SalesSummaryData[];

    constructor(data?: IGetSalesSummaryOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["salesSummary"] && data["salesSummary"].constructor === Array) {
                this.salesSummary = [];
                for (let item of data["salesSummary"])
                    this.salesSummary.push(SalesSummaryData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetSalesSummaryOutput {
        let result = new GetSalesSummaryOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.salesSummary && this.salesSummary.constructor === Array) {
            data["salesSummary"] = [];
            for (let item of this.salesSummary)
                data["salesSummary"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetSalesSummaryOutput {
    salesSummary: SalesSummaryData[];
}

export class GetWorldMapOutput implements IGetWorldMapOutput {
    countries: WorldMapCountry[];

    constructor(data?: IGetWorldMapOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["countries"] && data["countries"].constructor === Array) {
                this.countries = [];
                for (let item of data["countries"])
                    this.countries.push(WorldMapCountry.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetWorldMapOutput {
        let result = new GetWorldMapOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.countries && this.countries.constructor === Array) {
            data["countries"] = [];
            for (let item of this.countries)
                data["countries"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetWorldMapOutput {
    countries: WorldMapCountry[];
}

export class WorldMapCountry implements IWorldMapCountry {
    countryName: string;
    color: number;

    constructor(data?: IWorldMapCountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.countryName = data["countryName"];
            this.color = data["color"];
        }
    }

    static fromJS(data: any): WorldMapCountry {
        let result = new WorldMapCountry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["countryName"] = this.countryName;
        data["color"] = this.color;
        return data; 
    }
}

export interface IWorldMapCountry {
    countryName: string;
    color: number;
}

export class GetServerStatsOutput implements IGetServerStatsOutput {
    networkLoad: number[];
    cpuLoad: number[];
    loadRate: number[];

    constructor(data?: IGetServerStatsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["networkLoad"] && data["networkLoad"].constructor === Array) {
                this.networkLoad = [];
                for (let item of data["networkLoad"])
                    this.networkLoad.push(item);
            }
            if (data["cpuLoad"] && data["cpuLoad"].constructor === Array) {
                this.cpuLoad = [];
                for (let item of data["cpuLoad"])
                    this.cpuLoad.push(item);
            }
            if (data["loadRate"] && data["loadRate"].constructor === Array) {
                this.loadRate = [];
                for (let item of data["loadRate"])
                    this.loadRate.push(item);
            }
        }
    }

    static fromJS(data: any): GetServerStatsOutput {
        let result = new GetServerStatsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.networkLoad && this.networkLoad.constructor === Array) {
            data["networkLoad"] = [];
            for (let item of this.networkLoad)
                data["networkLoad"].push(item);
        }
        if (this.cpuLoad && this.cpuLoad.constructor === Array) {
            data["cpuLoad"] = [];
            for (let item of this.cpuLoad)
                data["cpuLoad"].push(item);
        }
        if (this.loadRate && this.loadRate.constructor === Array) {
            data["loadRate"] = [];
            for (let item of this.loadRate)
                data["loadRate"].push(item);
        }
        return data; 
    }
}

export interface IGetServerStatsOutput {
    networkLoad: number[];
    cpuLoad: number[];
    loadRate: number[];
}

export class GetGeneralStatsOutput implements IGetGeneralStatsOutput {
    transactionPercent: number;
    newVisitPercent: number;
    bouncePercent: number;

    constructor(data?: IGetGeneralStatsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transactionPercent = data["transactionPercent"];
            this.newVisitPercent = data["newVisitPercent"];
            this.bouncePercent = data["bouncePercent"];
        }
    }

    static fromJS(data: any): GetGeneralStatsOutput {
        let result = new GetGeneralStatsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionPercent"] = this.transactionPercent;
        data["newVisitPercent"] = this.newVisitPercent;
        data["bouncePercent"] = this.bouncePercent;
        return data; 
    }
}

export interface IGetGeneralStatsOutput {
    transactionPercent: number;
    newVisitPercent: number;
    bouncePercent: number;
}

export class TenantInfoEditDto implements ITenantInfoEditDto {
    /** 机构名称/租户名 */
    tenancyName: string;
    /** 宣传语 */
    tagline: string;
    /** 描述 */
    description: string;
    /** Logo 图片 Id */
    logoId: number;
    /** Logo 图片 Url */
    logoUrl: string;
    /** 背景图片 Id */
    backgroundPictureId: number;
    /** 背景图片 Url */
    backgroundPictureUrl: string;

    constructor(data?: ITenantInfoEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.tagline = data["tagline"];
            this.description = data["description"];
            this.logoId = data["logoId"];
            this.logoUrl = data["logoUrl"];
            this.backgroundPictureId = data["backgroundPictureId"];
            this.backgroundPictureUrl = data["backgroundPictureUrl"];
        }
    }

    static fromJS(data: any): TenantInfoEditDto {
        let result = new TenantInfoEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["tagline"] = this.tagline;
        data["description"] = this.description;
        data["logoId"] = this.logoId;
        data["logoUrl"] = this.logoUrl;
        data["backgroundPictureId"] = this.backgroundPictureId;
        data["backgroundPictureUrl"] = this.backgroundPictureUrl;
        return data; 
    }
}

export interface ITenantInfoEditDto {
    /** 机构名称/租户名 */
    tenancyName: string;
    /** 宣传语 */
    tagline: string;
    /** 描述 */
    description: string;
    /** Logo 图片 Id */
    logoId: number;
    /** Logo 图片 Url */
    logoUrl: string;
    /** 背景图片 Id */
    backgroundPictureId: number;
    /** 背景图片 Url */
    backgroundPictureUrl: string;
}

export class RegisterTenantInput implements IRegisterTenantInput {
    /** 租户名称 */
    tenancyName: string;
    /** 手机号码 */
    phoneNumber: string;
    /** 注册验证码 */
    registerCode: string;
    /** 管理员密码 */
    password: string;
    /** 验证码结果 */
    captchaResponse: string;

    constructor(data?: IRegisterTenantInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.phoneNumber = data["phoneNumber"];
            this.registerCode = data["registerCode"];
            this.password = data["password"];
            this.captchaResponse = data["captchaResponse"];
        }
    }

    static fromJS(data: any): RegisterTenantInput {
        let result = new RegisterTenantInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["phoneNumber"] = this.phoneNumber;
        data["registerCode"] = this.registerCode;
        data["password"] = this.password;
        data["captchaResponse"] = this.captchaResponse;
        return data; 
    }
}

export interface IRegisterTenantInput {
    /** 租户名称 */
    tenancyName: string;
    /** 手机号码 */
    phoneNumber: string;
    /** 注册验证码 */
    registerCode: string;
    /** 管理员密码 */
    password: string;
    /** 验证码结果 */
    captchaResponse: string;
}

export class RegisterTenantOutput implements IRegisterTenantOutput {
    tenantId: number;
    tenancyName: string;
    name: string;
    userName: string;
    emailAddress: string;
    isTenantActive: boolean;
    isActive: boolean;
    isEmailConfirmationRequired: boolean;

    constructor(data?: IRegisterTenantOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.isTenantActive = data["isTenantActive"];
            this.isActive = data["isActive"];
            this.isEmailConfirmationRequired = data["isEmailConfirmationRequired"];
        }
    }

    static fromJS(data: any): RegisterTenantOutput {
        let result = new RegisterTenantOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["isTenantActive"] = this.isTenantActive;
        data["isActive"] = this.isActive;
        data["isEmailConfirmationRequired"] = this.isEmailConfirmationRequired;
        return data; 
    }
}

export interface IRegisterTenantOutput {
    tenantId: number;
    tenancyName: string;
    name: string;
    userName: string;
    emailAddress: string;
    isTenantActive: boolean;
    isActive: boolean;
    isEmailConfirmationRequired: boolean;
}

export class TenantSettingsEditDto implements ITenantSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: TenantUserManagementSettingsEditDto = new TenantUserManagementSettingsEditDto();
    email: EmailSettingsEditDto;
    ldap: LdapSettingsEditDto;
    /** 安全设置 */
    security: SecuritySettingsEditDto = new SecuritySettingsEditDto();
    /** 第三方登陆 */
    externalAuthentication: ExternalAuthenticationEditDto;

    constructor(data?: ITenantSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.general = data["general"] ? GeneralSettingsEditDto.fromJS(data["general"]) : <any>undefined;
            this.userManagement = data["userManagement"] ? TenantUserManagementSettingsEditDto.fromJS(data["userManagement"]) : new TenantUserManagementSettingsEditDto();
            this.email = data["email"] ? EmailSettingsEditDto.fromJS(data["email"]) : <any>undefined;
            this.ldap = data["ldap"] ? LdapSettingsEditDto.fromJS(data["ldap"]) : <any>undefined;
            this.security = data["security"] ? SecuritySettingsEditDto.fromJS(data["security"]) : new SecuritySettingsEditDto();
            this.externalAuthentication = data["externalAuthentication"] ? ExternalAuthenticationEditDto.fromJS(data["externalAuthentication"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TenantSettingsEditDto {
        let result = new TenantSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["general"] = this.general ? this.general.toJSON() : <any>undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJSON() : <any>undefined;
        data["email"] = this.email ? this.email.toJSON() : <any>undefined;
        data["ldap"] = this.ldap ? this.ldap.toJSON() : <any>undefined;
        data["security"] = this.security ? this.security.toJSON() : <any>undefined;
        data["externalAuthentication"] = this.externalAuthentication ? this.externalAuthentication.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ITenantSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: TenantUserManagementSettingsEditDto;
    email: EmailSettingsEditDto;
    ldap: LdapSettingsEditDto;
    /** 安全设置 */
    security: SecuritySettingsEditDto;
    /** 第三方登陆 */
    externalAuthentication: ExternalAuthenticationEditDto;
}

export class TenantUserManagementSettingsEditDto implements ITenantUserManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredUserActiveByDefault: boolean;
    isEmailConfirmationRequiredForLogin: boolean;
    useCaptchaOnRegistration: boolean;

    constructor(data?: ITenantUserManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.allowSelfRegistration = data["allowSelfRegistration"];
            this.isNewRegisteredUserActiveByDefault = data["isNewRegisteredUserActiveByDefault"];
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"];
            this.useCaptchaOnRegistration = data["useCaptchaOnRegistration"];
        }
    }

    static fromJS(data: any): TenantUserManagementSettingsEditDto {
        let result = new TenantUserManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowSelfRegistration"] = this.allowSelfRegistration;
        data["isNewRegisteredUserActiveByDefault"] = this.isNewRegisteredUserActiveByDefault;
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin;
        data["useCaptchaOnRegistration"] = this.useCaptchaOnRegistration;
        return data; 
    }
}

export interface ITenantUserManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredUserActiveByDefault: boolean;
    isEmailConfirmationRequiredForLogin: boolean;
    useCaptchaOnRegistration: boolean;
}

/** LADP（活动目录）设置 */
export class LdapSettingsEditDto implements ILdapSettingsEditDto {
    /** 模块是否可用(.net core 1.1 不可用) */
    isModuleEnabled: boolean;
    /** 启用 */
    isEnabled: boolean;
    /** 域名 */
    domain: string;
    /** 用户名 */
    userName: string;
    /** 密码 */
    password: string;

    constructor(data?: ILdapSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isModuleEnabled = data["isModuleEnabled"];
            this.isEnabled = data["isEnabled"];
            this.domain = data["domain"];
            this.userName = data["userName"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): LdapSettingsEditDto {
        let result = new LdapSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isModuleEnabled"] = this.isModuleEnabled;
        data["isEnabled"] = this.isEnabled;
        data["domain"] = this.domain;
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data; 
    }
}

/** LADP（活动目录）设置 */
export interface ILdapSettingsEditDto {
    /** 模块是否可用(.net core 1.1 不可用) */
    isModuleEnabled: boolean;
    /** 启用 */
    isEnabled: boolean;
    /** 域名 */
    domain: string;
    /** 用户名 */
    userName: string;
    /** 密码 */
    password: string;
}

export class ListResultDtoOfNameValueDto implements IListResultDtoOfNameValueDto {
    items: NameValueDto[];

    constructor(data?: IListResultDtoOfNameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfNameValueDto {
        let result = new ListResultDtoOfNameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfNameValueDto {
    items: NameValueDto[];
}

export class AuthenticateModel implements IAuthenticateModel {
    /** 登陆凭证(用户名/邮箱地址/手机) */
    loginCertificate: string;
    /** 密码 */
    password: string;
    /** 双重认证码 */
    twoFactorVerificationCode: string;
    /** 在客户端记住 */
    rememberClient: boolean;
    /** 双重认证在客户端记住 */
    twoFactorRememberClientToken: string;
    /** 单步登陆 */
    singleSignIn: boolean;

    constructor(data?: IAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.loginCertificate = data["loginCertificate"];
            this.password = data["password"];
            this.twoFactorVerificationCode = data["twoFactorVerificationCode"];
            this.rememberClient = data["rememberClient"];
            this.twoFactorRememberClientToken = data["twoFactorRememberClientToken"];
            this.singleSignIn = data["singleSignIn"];
        }
    }

    static fromJS(data: any): AuthenticateModel {
        let result = new AuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loginCertificate"] = this.loginCertificate;
        data["password"] = this.password;
        data["twoFactorVerificationCode"] = this.twoFactorVerificationCode;
        data["rememberClient"] = this.rememberClient;
        data["twoFactorRememberClientToken"] = this.twoFactorRememberClientToken;
        data["singleSignIn"] = this.singleSignIn;
        return data; 
    }
}

export interface IAuthenticateModel {
    /** 登陆凭证(用户名/邮箱地址/手机) */
    loginCertificate: string;
    /** 密码 */
    password: string;
    /** 双重认证码 */
    twoFactorVerificationCode: string;
    /** 在客户端记住 */
    rememberClient: boolean;
    /** 双重认证在客户端记住 */
    twoFactorRememberClientToken: string;
    /** 单步登陆 */
    singleSignIn: boolean;
}

export class AuthenticateResultModel implements IAuthenticateResultModel {
    /** 访问令牌 */
    accessToken: string;
    /** 访问令牌(加密) */
    encryptedAccessToken: string;
    /** 过期时间 */
    expireInSeconds: number;
    /** 需要重置密码 */
    shouldResetPassword: boolean;
    /** 密码重置码 */
    passwordResetCode: string;
    /** 用户Id */
    userId: number;
    /** 租户Id */
    tenantId: number;
    /** 需要双重验证 */
    requiresTwoFactorVerification: boolean;
    /** 双重认证供应商 */
    twoFactorAuthProviders: string[];
    /** 记住双重认证 Token */
    twoFactorRememberClientToken: string;

    constructor(data?: IAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.shouldResetPassword = data["shouldResetPassword"];
            this.passwordResetCode = data["passwordResetCode"];
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
            this.requiresTwoFactorVerification = data["requiresTwoFactorVerification"];
            if (data["twoFactorAuthProviders"] && data["twoFactorAuthProviders"].constructor === Array) {
                this.twoFactorAuthProviders = [];
                for (let item of data["twoFactorAuthProviders"])
                    this.twoFactorAuthProviders.push(item);
            }
            this.twoFactorRememberClientToken = data["twoFactorRememberClientToken"];
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        let result = new AuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["shouldResetPassword"] = this.shouldResetPassword;
        data["passwordResetCode"] = this.passwordResetCode;
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        data["requiresTwoFactorVerification"] = this.requiresTwoFactorVerification;
        if (this.twoFactorAuthProviders && this.twoFactorAuthProviders.constructor === Array) {
            data["twoFactorAuthProviders"] = [];
            for (let item of this.twoFactorAuthProviders)
                data["twoFactorAuthProviders"].push(item);
        }
        data["twoFactorRememberClientToken"] = this.twoFactorRememberClientToken;
        return data; 
    }
}

export interface IAuthenticateResultModel {
    /** 访问令牌 */
    accessToken: string;
    /** 访问令牌(加密) */
    encryptedAccessToken: string;
    /** 过期时间 */
    expireInSeconds: number;
    /** 需要重置密码 */
    shouldResetPassword: boolean;
    /** 密码重置码 */
    passwordResetCode: string;
    /** 用户Id */
    userId: number;
    /** 租户Id */
    tenantId: number;
    /** 需要双重验证 */
    requiresTwoFactorVerification: boolean;
    /** 双重认证供应商 */
    twoFactorAuthProviders: string[];
    /** 记住双重认证 Token */
    twoFactorRememberClientToken: string;
}

export class PhoneAuthenticateModel implements IPhoneAuthenticateModel {
    /** 手机 */
    phoneNum: string;
    /** 登陆验证码 */
    loginCode: string;
    /** 在客户端记住 */
    rememberClient: boolean;

    constructor(data?: IPhoneAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.phoneNum = data["phoneNum"];
            this.loginCode = data["loginCode"];
            this.rememberClient = data["rememberClient"];
        }
    }

    static fromJS(data: any): PhoneAuthenticateModel {
        let result = new PhoneAuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNum"] = this.phoneNum;
        data["loginCode"] = this.loginCode;
        data["rememberClient"] = this.rememberClient;
        return data; 
    }
}

export interface IPhoneAuthenticateModel {
    /** 手机 */
    phoneNum: string;
    /** 登陆验证码 */
    loginCode: string;
    /** 在客户端记住 */
    rememberClient: boolean;
}

export class SendTwoFactorAuthCodeModel implements ISendTwoFactorAuthCodeModel {
    /** 用户Id */
    userId: number;
    /** 供应商（email/sms） */
    provider: string;

    constructor(data?: ISendTwoFactorAuthCodeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.provider = data["provider"];
        }
    }

    static fromJS(data: any): SendTwoFactorAuthCodeModel {
        let result = new SendTwoFactorAuthCodeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["provider"] = this.provider;
        return data; 
    }
}

export interface ISendTwoFactorAuthCodeModel {
    /** 用户Id */
    userId: number;
    /** 供应商（email/sms） */
    provider: string;
}

export class ImpersonatedAuthenticateResultModel implements IImpersonatedAuthenticateResultModel {
    /** 访问令牌 */
    accessToken: string;
    /** 访问令牌(加密) */
    encryptedAccessToken: string;
    /** 过期时间(秒) */
    expireInSeconds: number;

    constructor(data?: IImpersonatedAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
        }
    }

    static fromJS(data: any): ImpersonatedAuthenticateResultModel {
        let result = new ImpersonatedAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data; 
    }
}

export interface IImpersonatedAuthenticateResultModel {
    /** 访问令牌 */
    accessToken: string;
    /** 访问令牌(加密) */
    encryptedAccessToken: string;
    /** 过期时间(秒) */
    expireInSeconds: number;
}

/** 切换账号认证 - 结果 */
export class SwitchedAccountAuthenticateResultModel implements ISwitchedAccountAuthenticateResultModel {
    /** 访问令牌 */
    accessToken: string;
    /** 访问令牌（加密） */
    encryptedAccessToken: string;
    /** 过期时间（单位:秒） */
    expireInSeconds: number;

    constructor(data?: ISwitchedAccountAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
        }
    }

    static fromJS(data: any): SwitchedAccountAuthenticateResultModel {
        let result = new SwitchedAccountAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data; 
    }
}

/** 切换账号认证 - 结果 */
export interface ISwitchedAccountAuthenticateResultModel {
    /** 访问令牌 */
    accessToken: string;
    /** 访问令牌（加密） */
    encryptedAccessToken: string;
    /** 过期时间（单位:秒） */
    expireInSeconds: number;
}

export class ExternalLoginProviderInfoModel implements IExternalLoginProviderInfoModel {
    /** 名称 */
    name: string;
    /** 客户端Id */
    clientId: string;
    /** 是否在登录界面显示 */
    showOnLoginPage: boolean;

    constructor(data?: IExternalLoginProviderInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.clientId = data["clientId"];
            this.showOnLoginPage = data["showOnLoginPage"];
        }
    }

    static fromJS(data: any): ExternalLoginProviderInfoModel {
        let result = new ExternalLoginProviderInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["clientId"] = this.clientId;
        data["showOnLoginPage"] = this.showOnLoginPage;
        return data; 
    }
}

export interface IExternalLoginProviderInfoModel {
    /** 名称 */
    name: string;
    /** 客户端Id */
    clientId: string;
    /** 是否在登录界面显示 */
    showOnLoginPage: boolean;
}

export class ExternalAuthenticateModel implements IExternalAuthenticateModel {
    /** 认证类型 */
    authProvider: string;
    /** 认证秘钥 */
    providerKey: string;
    /** 认证访问码 */
    providerAccessCode: string;
    /** 是否单步登陆 */
    singleSignIn: boolean;

    constructor(data?: IExternalAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.authProvider = data["authProvider"];
            this.providerKey = data["providerKey"];
            this.providerAccessCode = data["providerAccessCode"];
            this.singleSignIn = data["singleSignIn"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateModel {
        let result = new ExternalAuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authProvider"] = this.authProvider;
        data["providerKey"] = this.providerKey;
        data["providerAccessCode"] = this.providerAccessCode;
        data["singleSignIn"] = this.singleSignIn;
        return data; 
    }
}

export interface IExternalAuthenticateModel {
    /** 认证类型 */
    authProvider: string;
    /** 认证秘钥 */
    providerKey: string;
    /** 认证访问码 */
    providerAccessCode: string;
    /** 是否单步登陆 */
    singleSignIn: boolean;
}

export class ExternalAuthenticateResultModel implements IExternalAuthenticateResultModel {
    /** 租户Id */
    tenantId: number;
    /** 用户Id */
    userId: number;
    /** 访问令牌 */
    accessToken: string;
    /** 访问令牌（加密） */
    encryptedAccessToken: string;
    /** 过期时间（单位:秒） */
    expireInSeconds: number;
    /** 等待激活 */
    waitingForActivation: boolean;
    /** 需要补充注册 */
    needSupplementary: boolean;

    constructor(data?: IExternalAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.waitingForActivation = data["waitingForActivation"];
            this.needSupplementary = data["needSupplementary"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateResultModel {
        let result = new ExternalAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["waitingForActivation"] = this.waitingForActivation;
        data["needSupplementary"] = this.needSupplementary;
        return data; 
    }
}

export interface IExternalAuthenticateResultModel {
    /** 租户Id */
    tenantId: number;
    /** 用户Id */
    userId: number;
    /** 访问令牌 */
    accessToken: string;
    /** 访问令牌（加密） */
    encryptedAccessToken: string;
    /** 过期时间（单位:秒） */
    expireInSeconds: number;
    /** 等待激活 */
    waitingForActivation: boolean;
    /** 需要补充注册 */
    needSupplementary: boolean;
}

export class ExternalBindingModel implements IExternalBindingModel {
    /** 认证类型 */
    authProvider: string;
    /** 认证秘钥 */
    providerKey: string;
    /** 认证访问码 */
    providerAccessCode: string;

    constructor(data?: IExternalBindingModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.authProvider = data["authProvider"];
            this.providerKey = data["providerKey"];
            this.providerAccessCode = data["providerAccessCode"];
        }
    }

    static fromJS(data: any): ExternalBindingModel {
        let result = new ExternalBindingModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authProvider"] = this.authProvider;
        data["providerKey"] = this.providerKey;
        data["providerAccessCode"] = this.providerAccessCode;
        return data; 
    }
}

export interface IExternalBindingModel {
    /** 认证类型 */
    authProvider: string;
    /** 认证秘钥 */
    providerKey: string;
    /** 认证访问码 */
    providerAccessCode: string;
}

export class ExternalUnBindingModel implements IExternalUnBindingModel {
    /** 认证类型 */
    authProvider: string;

    constructor(data?: IExternalUnBindingModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.authProvider = data["authProvider"];
        }
    }

    static fromJS(data: any): ExternalUnBindingModel {
        let result = new ExternalUnBindingModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authProvider"] = this.authProvider;
        return data; 
    }
}

export interface IExternalUnBindingModel {
    /** 认证类型 */
    authProvider: string;
}

/** 补充认证 */
export class SupplementAuthModel implements ISupplementAuthModel {
    /** 机构名称 */
    tenantName: string;

    constructor(data?: ISupplementAuthModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantName = data["tenantName"];
        }
    }

    static fromJS(data: any): SupplementAuthModel {
        let result = new SupplementAuthModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantName"] = this.tenantName;
        return data; 
    }
}

/** 补充认证 */
export interface ISupplementAuthModel {
    /** 机构名称 */
    tenantName: string;
}

export class SupplementAuthResultModel implements ISupplementAuthResultModel {
    /** 能否登陆 */
    canLogin: boolean;
    tenantId: number;
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;

    constructor(data?: ISupplementAuthResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.canLogin = data["canLogin"];
            this.tenantId = data["tenantId"];
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
        }
    }

    static fromJS(data: any): SupplementAuthResultModel {
        let result = new SupplementAuthResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        data["tenantId"] = this.tenantId;
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data; 
    }
}

export interface ISupplementAuthResultModel {
    /** 能否登陆 */
    canLogin: boolean;
    tenantId: number;
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
}

export class PagedResultDtoOfUserListDto implements IPagedResultDtoOfUserListDto {
    totalCount: number;
    items: UserListDto[];

    constructor(data?: IPagedResultDtoOfUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfUserListDto {
        let result = new PagedResultDtoOfUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfUserListDto {
    totalCount: number;
    items: UserListDto[];
}

export class UserListDto implements IUserListDto {
    /** 名称 */
    name: string;
    /** 姓 */
    surname: string;
    /** 用户名 */
    userName: string;
    /** 邮箱地址 */
    emailAddress: string;
    /** 电话号码 */
    phoneNumber: string;
    /** 头像图片Id */
    profilePictureId: number;
    /** 是否确认邮箱 */
    isEmailConfirmed: boolean;
    /** 角色 */
    roles: UserListRoleDto[];
    /** 最后登陆时间 */
    lastLoginTime: Moment;
    /** 是否已激活 */
    isActive: boolean;
    /** 创建时间 */
    creationTime: Moment;
    id: number;

    constructor(data?: IUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.profilePictureId = data["profilePictureId"];
            this.isEmailConfirmed = data["isEmailConfirmed"];
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(UserListRoleDto.fromJS(item));
            }
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : <any>undefined;
            this.isActive = data["isActive"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserListDto {
        let result = new UserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["profilePictureId"] = this.profilePictureId;
        data["isEmailConfirmed"] = this.isEmailConfirmed;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserListDto {
    /** 名称 */
    name: string;
    /** 姓 */
    surname: string;
    /** 用户名 */
    userName: string;
    /** 邮箱地址 */
    emailAddress: string;
    /** 电话号码 */
    phoneNumber: string;
    /** 头像图片Id */
    profilePictureId: number;
    /** 是否确认邮箱 */
    isEmailConfirmed: boolean;
    /** 角色 */
    roles: UserListRoleDto[];
    /** 最后登陆时间 */
    lastLoginTime: Moment;
    /** 是否已激活 */
    isActive: boolean;
    /** 创建时间 */
    creationTime: Moment;
    id: number;
}

export class UserListRoleDto implements IUserListRoleDto {
    /** 角色Id */
    roleId: number;
    /** 角色名称 */
    roleName: string;

    constructor(data?: IUserListRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleName = data["roleName"];
        }
    }

    static fromJS(data: any): UserListRoleDto {
        let result = new UserListRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        return data; 
    }
}

export interface IUserListRoleDto {
    /** 角色Id */
    roleId: number;
    /** 角色名称 */
    roleName: string;
}

export class GetUserForEditOutput implements IGetUserForEditOutput {
    /** 头像图片Id */
    profilePictureId: number;
    /** 用户资料 */
    user: UserEditDto;
    /** 角色 */
    roles: UserRoleDto[];
    /** 权限 */
    permissions: GetUserPermissionsForEditOutput;
    /** 第三方登陆绑定记录 */
    externalLogins: ExternalUserLoginDto[];

    constructor(data?: IGetUserForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profilePictureId = data["profilePictureId"];
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : <any>undefined;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(UserRoleDto.fromJS(item));
            }
            this.permissions = data["permissions"] ? GetUserPermissionsForEditOutput.fromJS(data["permissions"]) : <any>undefined;
            if (data["externalLogins"] && data["externalLogins"].constructor === Array) {
                this.externalLogins = [];
                for (let item of data["externalLogins"])
                    this.externalLogins.push(ExternalUserLoginDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserForEditOutput {
        let result = new GetUserForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profilePictureId"] = this.profilePictureId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        data["permissions"] = this.permissions ? this.permissions.toJSON() : <any>undefined;
        if (this.externalLogins && this.externalLogins.constructor === Array) {
            data["externalLogins"] = [];
            for (let item of this.externalLogins)
                data["externalLogins"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetUserForEditOutput {
    /** 头像图片Id */
    profilePictureId: number;
    /** 用户资料 */
    user: UserEditDto;
    /** 角色 */
    roles: UserRoleDto[];
    /** 权限 */
    permissions: GetUserPermissionsForEditOutput;
    /** 第三方登陆绑定记录 */
    externalLogins: ExternalUserLoginDto[];
}

export class UserEditDto implements IUserEditDto {
    /** 用户Id，null时为创建用户,有值时为更新用户 */
    id: number;
    /** 名称 */
    name: string;
    /** 姓 */
    surname: string;
    /** 用户名 */
    userName: string;
    /** 邮箱地址 */
    emailAddress: string;
    /** 电话号码 */
    phoneNumber: string;
    /** 密码
<remarks>
不要给这属性添加 Required 特性,因为 这个属性空值时表示代表不修改密码
</remarks> */
    password: string;
    /** 激活 */
    isActive: boolean;
    /** 下次登录需要修改密码 */
    shouldChangePasswordOnNextLogin: boolean;
    /** 启用双重验证 */
    isTwoFactorEnabled: boolean;
    /** 是否启用用户锁定 */
    isLockoutEnabled: boolean;

    constructor(data?: IUserEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.password = data["password"];
            this.isActive = data["isActive"];
            this.shouldChangePasswordOnNextLogin = data["shouldChangePasswordOnNextLogin"];
            this.isTwoFactorEnabled = data["isTwoFactorEnabled"];
            this.isLockoutEnabled = data["isLockoutEnabled"];
        }
    }

    static fromJS(data: any): UserEditDto {
        let result = new UserEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["password"] = this.password;
        data["isActive"] = this.isActive;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled;
        data["isLockoutEnabled"] = this.isLockoutEnabled;
        return data; 
    }
}

export interface IUserEditDto {
    /** 用户Id，null时为创建用户,有值时为更新用户 */
    id: number;
    /** 名称 */
    name: string;
    /** 姓 */
    surname: string;
    /** 用户名 */
    userName: string;
    /** 邮箱地址 */
    emailAddress: string;
    /** 电话号码 */
    phoneNumber: string;
    /** 密码
<remarks>
不要给这属性添加 Required 特性,因为 这个属性空值时表示代表不修改密码
</remarks> */
    password: string;
    /** 激活 */
    isActive: boolean;
    /** 下次登录需要修改密码 */
    shouldChangePasswordOnNextLogin: boolean;
    /** 启用双重验证 */
    isTwoFactorEnabled: boolean;
    /** 是否启用用户锁定 */
    isLockoutEnabled: boolean;
}

/** 用户角色 */
export class UserRoleDto implements IUserRoleDto {
    /** 角色Id/唯一凭证 */
    roleId: number;
    /** 角色名/系统名 */
    roleName: string;
    /** 显示名称 */
    roleDisplayName: string;
    /** 是否默认分配角色 */
    isAssigned: boolean;

    constructor(data?: IUserRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleName = data["roleName"];
            this.roleDisplayName = data["roleDisplayName"];
            this.isAssigned = data["isAssigned"];
        }
    }

    static fromJS(data: any): UserRoleDto {
        let result = new UserRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        data["roleDisplayName"] = this.roleDisplayName;
        data["isAssigned"] = this.isAssigned;
        return data; 
    }
}

/** 用户角色 */
export interface IUserRoleDto {
    /** 角色Id/唯一凭证 */
    roleId: number;
    /** 角色名/系统名 */
    roleName: string;
    /** 显示名称 */
    roleDisplayName: string;
    /** 是否默认分配角色 */
    isAssigned: boolean;
}

export class GetUserPermissionsForEditOutput implements IGetUserPermissionsForEditOutput {
    /** 现有权限 */
    permissions: FlatPermissionDto[];
    /** 授予权限名称 */
    grantedPermissionNames: string[];

    constructor(data?: IGetUserPermissionsForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(FlatPermissionDto.fromJS(item));
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): GetUserPermissionsForEditOutput {
        let result = new GetUserPermissionsForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface IGetUserPermissionsForEditOutput {
    /** 现有权限 */
    permissions: FlatPermissionDto[];
    /** 授予权限名称 */
    grantedPermissionNames: string[];
}

export class ExternalUserLoginDto implements IExternalUserLoginDto {
    /** 唯一凭证 */
    id: number;
    /** 第三方登陆类型 */
    loginProvider: string;
    /** OpenId/唯一凭证 */
    providerKey: string;
    /** 用户名 */
    userName: string;
    /** 第三方接口调用凭证 */
    accessToken: string;
    /** 刷新凭证 */
    refreshToken: string;
    /** 调用凭证过期时间 */
    accessTokenOutDataTime: Moment;
    /** 创建时间 */
    creationTime: Moment;

    constructor(data?: IExternalUserLoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.loginProvider = data["loginProvider"];
            this.providerKey = data["providerKey"];
            this.userName = data["userName"];
            this.accessToken = data["accessToken"];
            this.refreshToken = data["refreshToken"];
            this.accessTokenOutDataTime = data["accessTokenOutDataTime"] ? moment(data["accessTokenOutDataTime"].toString()) : <any>undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ExternalUserLoginDto {
        let result = new ExternalUserLoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["loginProvider"] = this.loginProvider;
        data["providerKey"] = this.providerKey;
        data["userName"] = this.userName;
        data["accessToken"] = this.accessToken;
        data["refreshToken"] = this.refreshToken;
        data["accessTokenOutDataTime"] = this.accessTokenOutDataTime ? this.accessTokenOutDataTime.toISOString() : <any>undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IExternalUserLoginDto {
    /** 唯一凭证 */
    id: number;
    /** 第三方登陆类型 */
    loginProvider: string;
    /** OpenId/唯一凭证 */
    providerKey: string;
    /** 用户名 */
    userName: string;
    /** 第三方接口调用凭证 */
    accessToken: string;
    /** 刷新凭证 */
    refreshToken: string;
    /** 调用凭证过期时间 */
    accessTokenOutDataTime: Moment;
    /** 创建时间 */
    creationTime: Moment;
}

export class UpdateUserPermissionsInput implements IUpdateUserPermissionsInput {
    /** 用户Id */
    id: number;
    /** 授予权限 */
    grantedPermissionNames: string[] = [];

    constructor(data?: IUpdateUserPermissionsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateUserPermissionsInput {
        let result = new UpdateUserPermissionsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface IUpdateUserPermissionsInput {
    /** 用户Id */
    id: number;
    /** 授予权限 */
    grantedPermissionNames: string[];
}

export class CreateOrUpdateUserInput implements ICreateOrUpdateUserInput {
    /** 用户基本信息 */
    user: UserEditDto = new UserEditDto();
    /** 分配角色名称 */
    assignedRoleNames: string[] = [];
    /** 授予权限 */
    grantedPermissionNames: string[];
    /** 发送激活邮件 */
    sendActivationEmail: boolean;
    /** 设置随机密码 */
    setRandomPassword: boolean;

    constructor(data?: ICreateOrUpdateUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : new UserEditDto();
            if (data["assignedRoleNames"] && data["assignedRoleNames"].constructor === Array) {
                this.assignedRoleNames = [];
                for (let item of data["assignedRoleNames"])
                    this.assignedRoleNames.push(item);
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
            this.sendActivationEmail = data["sendActivationEmail"];
            this.setRandomPassword = data["setRandomPassword"];
        }
    }

    static fromJS(data: any): CreateOrUpdateUserInput {
        let result = new CreateOrUpdateUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (this.assignedRoleNames && this.assignedRoleNames.constructor === Array) {
            data["assignedRoleNames"] = [];
            for (let item of this.assignedRoleNames)
                data["assignedRoleNames"].push(item);
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        data["sendActivationEmail"] = this.sendActivationEmail;
        data["setRandomPassword"] = this.setRandomPassword;
        return data; 
    }
}

export interface ICreateOrUpdateUserInput {
    /** 用户基本信息 */
    user: UserEditDto;
    /** 分配角色名称 */
    assignedRoleNames: string[];
    /** 授予权限 */
    grantedPermissionNames: string[];
    /** 发送激活邮件 */
    sendActivationEmail: boolean;
    /** 设置随机密码 */
    setRandomPassword: boolean;
}

export class LinkToUserInput implements ILinkToUserInput {
    /** 租户名称 */
    tenancyName: string;
    /** 用户名或邮箱地址 */
    usernameOrEmailAddress: string;
    /** 密码 */
    password: string;

    constructor(data?: ILinkToUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.usernameOrEmailAddress = data["usernameOrEmailAddress"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): LinkToUserInput {
        let result = new LinkToUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["usernameOrEmailAddress"] = this.usernameOrEmailAddress;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILinkToUserInput {
    /** 租户名称 */
    tenancyName: string;
    /** 用户名或邮箱地址 */
    usernameOrEmailAddress: string;
    /** 密码 */
    password: string;
}

export class PagedResultDtoOfLinkedUserDto implements IPagedResultDtoOfLinkedUserDto {
    totalCount: number;
    items: LinkedUserDto[];

    constructor(data?: IPagedResultDtoOfLinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LinkedUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLinkedUserDto {
        let result = new PagedResultDtoOfLinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfLinkedUserDto {
    totalCount: number;
    items: LinkedUserDto[];
}

/** 关联账号 */
export class LinkedUserDto implements ILinkedUserDto {
    tenantId: number;
    tenancyName: string;
    username: string;
    lastLoginTime: Moment;
    id: number;

    constructor(data?: ILinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.tenancyName = data["tenancyName"];
            this.username = data["username"];
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): LinkedUserDto {
        let result = new LinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["tenancyName"] = this.tenancyName;
        data["username"] = this.username;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

/** 关联账号 */
export interface ILinkedUserDto {
    tenantId: number;
    tenancyName: string;
    username: string;
    lastLoginTime: Moment;
    id: number;
}

export class ListResultDtoOfLinkedUserDto implements IListResultDtoOfLinkedUserDto {
    items: LinkedUserDto[];

    constructor(data?: IListResultDtoOfLinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LinkedUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfLinkedUserDto {
        let result = new ListResultDtoOfLinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfLinkedUserDto {
    items: LinkedUserDto[];
}

export class UnlinkUserInput implements IUnlinkUserInput {
    /** 租户Id(可空) */
    tenantId: number;
    /** 用户Id */
    userId: number;

    constructor(data?: IUnlinkUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): UnlinkUserInput {
        let result = new UnlinkUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IUnlinkUserInput {
    /** 租户Id(可空) */
    tenantId: number;
    /** 用户Id */
    userId: number;
}

export class ListResultDtoOfUserLoginAttemptDto implements IListResultDtoOfUserLoginAttemptDto {
    items: UserLoginAttemptDto[];

    constructor(data?: IListResultDtoOfUserLoginAttemptDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserLoginAttemptDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfUserLoginAttemptDto {
        let result = new ListResultDtoOfUserLoginAttemptDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfUserLoginAttemptDto {
    items: UserLoginAttemptDto[];
}

/** 用户登陆尝试 */
export class UserLoginAttemptDto implements IUserLoginAttemptDto {
    /** 租户名称 */
    tenancyName: string;
    /** 用户名或邮箱 */
    userNameOrEmail: string;
    /** 客户端Ip地址 */
    clientIpAddress: string;
    /** 客户端名称 */
    clientName: string;
    /** 浏览器信息 */
    browserInfo: string;
    /** 结果 */
    result: string;
    /** 创建时间 */
    creationTime: Moment;

    constructor(data?: IUserLoginAttemptDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.userNameOrEmail = data["userNameOrEmail"];
            this.clientIpAddress = data["clientIpAddress"];
            this.clientName = data["clientName"];
            this.browserInfo = data["browserInfo"];
            this.result = data["result"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UserLoginAttemptDto {
        let result = new UserLoginAttemptDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["userNameOrEmail"] = this.userNameOrEmail;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["result"] = this.result;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }
}

/** 用户登陆尝试 */
export interface IUserLoginAttemptDto {
    /** 租户名称 */
    tenancyName: string;
    /** 用户名或邮箱 */
    userNameOrEmail: string;
    /** 客户端Ip地址 */
    clientIpAddress: string;
    /** 客户端名称 */
    clientName: string;
    /** 浏览器信息 */
    browserInfo: string;
    /** 结果 */
    result: string;
    /** 创建时间 */
    creationTime: Moment;
}

export class GetLatestWebLogsOutput implements IGetLatestWebLogsOutput {
    latestWebLogLines: string[];

    constructor(data?: IGetLatestWebLogsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["latestWebLogLines"] && data["latestWebLogLines"].constructor === Array) {
                this.latestWebLogLines = [];
                for (let item of data["latestWebLogLines"])
                    this.latestWebLogLines.push(item);
            }
        }
    }

    static fromJS(data: any): GetLatestWebLogsOutput {
        let result = new GetLatestWebLogsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.latestWebLogLines && this.latestWebLogLines.constructor === Array) {
            data["latestWebLogLines"] = [];
            for (let item of this.latestWebLogLines)
                data["latestWebLogLines"].push(item);
        }
        return data; 
    }
}

export interface IGetLatestWebLogsOutput {
    latestWebLogLines: string[];
}

export class GetJsApiSignatureOutput implements IGetJsApiSignatureOutput {
    /** 公众号 AppId */
    appId: string;
    /** 签名 */
    signature: string;

    constructor(data?: IGetJsApiSignatureOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.appId = data["appId"];
            this.signature = data["signature"];
        }
    }

    static fromJS(data: any): GetJsApiSignatureOutput {
        let result = new GetJsApiSignatureOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appId"] = this.appId;
        data["signature"] = this.signature;
        return data; 
    }
}

export interface IGetJsApiSignatureOutput {
    /** 公众号 AppId */
    appId: string;
    /** 签名 */
    signature: string;
}

export enum IncomeStatisticsDateInterval {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum IncomeStatisticsDateInterval2 {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum DateInterval {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

/** 通知状态（可空） */
export enum State {
    _0 = 0, 
    _1 = 1, 
}

/** 性别 */
export enum Gender {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum Status {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
}

export enum Status2 {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
}

export enum SalesSummaryDatePeriod {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum SalesSummaryDatePeriod2 {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

/** 默认时区有效范围 */
export enum DefaultTimezoneScope {
    _1 = 1, 
    _2 = 2, 
    _4 = 4, 
    _7 = 7, 
}

export enum IsTenantAvailableOutputState {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum JoinBookingInputGender {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum JoinBookingInputSource {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
}

export enum BookingAccessRecordInputSource {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
}

export enum BookingAccessRecordInputWeChatSource {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
}

export enum BookingShareRecordInputTarget {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
}

export enum FriendDtoState {
    _1 = 1, 
    _2 = 2, 
}

export enum ChatMessageDtoSide {
    _1 = 1, 
    _2 = 2, 
}

export enum ChatMessageDtoReadState {
    _1 = 1, 
    _2 = 2, 
}

export class AdditionalData implements IAdditionalData {
    paypal: { [key: string] : string; };

    constructor(data?: IAdditionalData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Paypal"]) {
                this.paypal = {};
                for (let key in data["Paypal"]) {
                    if (data["Paypal"].hasOwnProperty(key))
                        this.paypal[key] = data["Paypal"][key];
                }
            }
        }
    }

    static fromJS(data: any): AdditionalData {
        let result = new AdditionalData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.paypal) {
            data["Paypal"] = {};
            for (let key in this.paypal) {
                if (this.paypal.hasOwnProperty(key))
                    data["Paypal"][key] = this.paypal[key];
            }
        }
        return data; 
    }
}

export interface IAdditionalData {
    paypal: { [key: string] : string; };
}

export enum UserNotificationState {
    _0 = 0, 
    _1 = 1, 
}

export enum TenantNotificationSeverity {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
}

export enum OrgBookingOrderListDtoGender {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum OrgBookingOrderListDtoStatus {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
}

export enum OrgBookingOrderInfolDtoStatus {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
}

export enum CreatePaymentDtoEditionPaymentType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum CreatePaymentDtoPaymentPeriodType {
    _30 = 30, 
    _365 = 365, 
}

export enum CreatePaymentDtoSubscriptionPaymentGatewayType {
    _1 = 1, 
}

export enum ExecutePaymentDtoGateway {
    _1 = 1, 
}

export enum ExecutePaymentDtoEditionPaymentType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum ExecutePaymentDtoPaymentPeriodType {
    _30 = 30, 
    _365 = 365, 
}

export enum BookingOrderListDtoStatus {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
}

export enum BookingOrderInfoStatus {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
}

export enum CurrentUserProfileEditDtoGender {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum TenantLoginInfoDtoPaymentPeriodType {
    _30 = 30, 
    _365 = 365, 
}

export enum UserCodeSendInputCodeType {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
    _60 = 60, 
    _70 = 70, 
}

export enum CodeSendInputCodeType {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
    _60 = 60, 
    _70 = 70, 
}

export enum CheckUserCodeInputCodeType {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
    _60 = 60, 
    _70 = 70, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
	headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
		super();

        this.message = message;
        this.status = status;
        this.response = response;
		this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => { 
        let reader = new FileReader(); 
        reader.onload = function() { 
            observer.next(this.result);
            observer.complete();
        }
        reader.readAsText(blob); 
    });
}